# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirewallDataLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id': 'RimeUUID',
        'location_args': 'FirewallLocationArgs',
        'location_params': 'FirewallLocationParams'
    }

    attribute_map = {
        'integration_id': 'integrationId',
        'location_args': 'locationArgs',
        'location_params': 'locationParams'
    }

    def __init__(self, integration_id=None, location_args=None, location_params=None):  # noqa: E501
        """FirewallDataLocation - a model defined in Swagger"""  # noqa: E501
        self._integration_id = None
        self._location_args = None
        self._location_params = None
        self.discriminator = None
        if integration_id is not None:
            self.integration_id = integration_id
        if location_args is not None:
            self.location_args = location_args
        if location_params is not None:
            self.location_params = location_params

    @property
    def integration_id(self):
        """Gets the integration_id of this FirewallDataLocation.  # noqa: E501


        :return: The integration_id of this FirewallDataLocation.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this FirewallDataLocation.


        :param integration_id: The integration_id of this FirewallDataLocation.  # noqa: E501
        :type: RimeUUID
        """

        self._integration_id = integration_id

    @property
    def location_args(self):
        """Gets the location_args of this FirewallDataLocation.  # noqa: E501


        :return: The location_args of this FirewallDataLocation.  # noqa: E501
        :rtype: FirewallLocationArgs
        """
        return self._location_args

    @location_args.setter
    def location_args(self, location_args):
        """Sets the location_args of this FirewallDataLocation.


        :param location_args: The location_args of this FirewallDataLocation.  # noqa: E501
        :type: FirewallLocationArgs
        """

        self._location_args = location_args

    @property
    def location_params(self):
        """Gets the location_params of this FirewallDataLocation.  # noqa: E501


        :return: The location_params of this FirewallDataLocation.  # noqa: E501
        :rtype: FirewallLocationParams
        """
        return self._location_params

    @location_params.setter
    def location_params(self, location_params):
        """Sets the location_params of this FirewallDataLocation.


        :param location_params: The location_params of this FirewallDataLocation.  # noqa: E501
        :type: FirewallLocationParams
        """

        self._location_params = location_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallDataLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallDataLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
