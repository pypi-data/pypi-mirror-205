# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirewallLocationArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_collector_location': 'FirewallDataCollectorLocation',
        'delta_lake_location': 'FirewallDeltaLakeLocation',
        'custom_location': 'FirewallCustomLoaderLocation'
    }

    attribute_map = {
        'data_collector_location': 'dataCollectorLocation',
        'delta_lake_location': 'deltaLakeLocation',
        'custom_location': 'customLocation'
    }

    def __init__(self, data_collector_location=None, delta_lake_location=None, custom_location=None):  # noqa: E501
        """FirewallLocationArgs - a model defined in Swagger"""  # noqa: E501
        self._data_collector_location = None
        self._delta_lake_location = None
        self._custom_location = None
        self.discriminator = None
        if data_collector_location is not None:
            self.data_collector_location = data_collector_location
        if delta_lake_location is not None:
            self.delta_lake_location = delta_lake_location
        if custom_location is not None:
            self.custom_location = custom_location

    @property
    def data_collector_location(self):
        """Gets the data_collector_location of this FirewallLocationArgs.  # noqa: E501


        :return: The data_collector_location of this FirewallLocationArgs.  # noqa: E501
        :rtype: FirewallDataCollectorLocation
        """
        return self._data_collector_location

    @data_collector_location.setter
    def data_collector_location(self, data_collector_location):
        """Sets the data_collector_location of this FirewallLocationArgs.


        :param data_collector_location: The data_collector_location of this FirewallLocationArgs.  # noqa: E501
        :type: FirewallDataCollectorLocation
        """

        self._data_collector_location = data_collector_location

    @property
    def delta_lake_location(self):
        """Gets the delta_lake_location of this FirewallLocationArgs.  # noqa: E501


        :return: The delta_lake_location of this FirewallLocationArgs.  # noqa: E501
        :rtype: FirewallDeltaLakeLocation
        """
        return self._delta_lake_location

    @delta_lake_location.setter
    def delta_lake_location(self, delta_lake_location):
        """Sets the delta_lake_location of this FirewallLocationArgs.


        :param delta_lake_location: The delta_lake_location of this FirewallLocationArgs.  # noqa: E501
        :type: FirewallDeltaLakeLocation
        """

        self._delta_lake_location = delta_lake_location

    @property
    def custom_location(self):
        """Gets the custom_location of this FirewallLocationArgs.  # noqa: E501


        :return: The custom_location of this FirewallLocationArgs.  # noqa: E501
        :rtype: FirewallCustomLoaderLocation
        """
        return self._custom_location

    @custom_location.setter
    def custom_location(self, custom_location):
        """Sets the custom_location of this FirewallLocationArgs.


        :param custom_location: The custom_location of this FirewallLocationArgs.  # noqa: E501
        :type: FirewallCustomLoaderLocation
        """

        self._custom_location = custom_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallLocationArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallLocationArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
