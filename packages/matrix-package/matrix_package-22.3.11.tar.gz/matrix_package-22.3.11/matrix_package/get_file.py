import numpy as np
from math import cos, pi
from colorama import Fore, Style

class GET(object):
    def __init__(self, cell: list , master: list,  name: list) -> None:
        self.cell = cell 
        self.master = master 
        self.name = name

    def HISTORY(self, output: str = 'CONFIG', bravais: str = 'cubic', megatm: int = 0, 
    encoding: bool = False, name_encoding: dict = None, selection: list=None):
        levcfg, imcon = 0, 0 
        err = None 

        file = open(output, 'w')
        file.write('CONFIG file generated by MATRIX code. Version 2022-0-0-1\n')

        if bravais in ['cubic', 'quadratic', 'orthorhombic']:
            if bravais == 'cubic':
                imcon = 1
            elif bravais == 'quadratic':
                imcon = 4
            else:
                imcon = 2

            val1 = '{:10d}{:10d}{:10d}'.format(levcfg, imcon, megatm)
            file.write(val1+'\n')
            for i in range(len(self.cell)):
                c1, c2, c3 = self.cell[i]
                val1 = '{:20.12f}{:20.12f}{:20.12f}'.format(c1, c2, c3)
                file.write(val1+'\n')

        elif bravais == 'hexagonal':
            imcon = 3
            val1 = '{:10d}{:10d}{:10d}'.format(levcfg, imcon, megatm)
            file.write(val1+'\n')
            for i in range(len(self.cell)):
                c1, c2, c3 = self.cell[i]
                if i == 1:
                    c1 = - 0.5 * c2
                    c2 = cos(pi / 6.0) * c2
                else:
                    pass 

                val1 = '{:20.12f}{:20.12f}{:20.12f}'.format(c1, c2, c3)
                file.write(val1+'\n')
        
        else:
            err = '{}Error: {}{} {}is not in the list {}["cubic", "quadratic", "orthorhombic", "hexagonal"]'.format(Fore.BLUE, Fore.RED, bravais, Fore.YELLOW, Fore.GREEN)
            
        if err == None:
            count = 0
            for i in range(len(self.master)):
                self.data = self.master[i] #np.column_stack(( self.name[i], self.master[i] ))
                shape = self.data.shape 
                for t in range(shape[0]):
                    for j in range(shape[1]):
                        if encoding == False:
                            for k in range(shape[2]):
                                count += 1
                                name = self.name[i][t, j, k]
                                x, y, z =  self.master[i][t, j, k, :]
                            
                                val0 = '{}{:15d}'.format(name, count)
                                val1 = '{:16.9f}{:16.9f}{:16.9f}'.format(x, y, z)

                                file.write(val0+'\n')
                                file.write(val1+'\n')
                        else:
                            if name_encoding:
                                if len(name_encoding) == len(self.master):
                                    if type(name_encoding) == type(list()):
                                        if len(name_encoding[i]) == shape[2]:
                                            for k in selection[i]:
                                                count += 1
                                                name = name_encoding[i][k]
                                                x, y, z =  self.master[i][t, j, k, :]
                                                l = len(name)
                                                if l==3:
                                                    pass 
                                                else:
                                                    l += 1

                                                val0 = '{:3}{:15d}'.format(name, count)

                                                val1 = '{:16.9f}{:<4}{:16.9f}{:<4}{:16.9f}'.format(x, '', y, '', z)

                                                file.write(val0+'\n')
                                                file.write(val1+'\n')
                                        else:
                                            print(len(name_encoding[i]), name_encoding[i])
                                            err = '{}ValueError: {}length name_encoding[{}] != {}'.format(Fore.BLUE, Fore.YELLOW, i, shape[2])
                                            print(err)
                                            break
                                    else:
                                        err = '{}TypeError: {}name_encoding {}is not a {}list()'.format(Fore.BLUE, Fore.YELLOW, Fore.RED, Fore.GREEN)
                                        print(err)
                                        break
                                else:
                                    err = '{}ValueError: {}length name_encoding != {}{}'.format(Fore.BLUE, Fore.YELLOW, Fore.RED, len(self.master))
                                    print(err)
                                    break
                            
                            else:
                                err = '{}ValueError: {}encoding is set on true {}but name_encoding is EMPTY'.format(Fore.BLUE, Fore.YELLOW, Fore.RED)
                                print(err)
                                break

        else:
            print(err)


    def INVERSE_TRANSFORMATION(self, output: str = 'CONFIG', bravais: str = 'cubic', megatm: int = 0, 
    encoding: bool = False, name_encoding: dict = None, selection: list=None, old_cell: list = None):

        levcfg, imcon = 0, 0 
        err = None 

        file = open(output, 'w')
        file.write('CONFIG file generated by MATRIX code. Version 2022-0-0-1\n')

        if bravais in ['cubic', 'quadratic', 'orthorhombic']:
            if bravais == 'cubic':
                imcon = 1
            elif bravais == 'quadratic':
                imcon = 4
            else:
                imcon = 2

            val1 = '{:10d}{:10d}{:10d}'.format(levcfg, imcon, megatm)
            file.write(val1+'\n')
            for i in range(len(self.cell)):
                c1, c2, c3 = self.cell[i]
                val1 = '{:20.12f}{:20.12f}{:20.12f}'.format(c1, c2, c3)
                file.write(val1+'\n')

        elif bravais == 'hexagonal':
            imcon = 3
            val1 = '{:10d}{:10d}{:10d}'.format(levcfg, imcon, megatm)
            file.write(val1+'\n')
            for i in range(len(self.cell)):
                c1, c2, c3 = self.cell[i]
                if i == 1:
                    c1 = - 0.5 * c2
                    c2 = cos(pi / 6.0) * c2
                else:
                    pass 

                val1 = '{:20.12f}{:20.12f}{:20.12f}'.format(c1, c2, c3)
                file.write(val1+'\n')
        
        else:
            err = '{}Error: {}{} {}is not in the list {}["cubic", "quadratic", "orthorhombic", "hexagonal"]'.format(Fore.BLUE, Fore.RED, bravais, Fore.YELLOW, Fore.GREEN)
            
        if err == None:
            count = 0
            for i in range(len(self.master)):
                self.data = self.master[i] 
                shape = self.data.shape 
                for t in range(shape[0]):
                    for j in range(shape[1]):
                        if encoding == False:
                            for k in range(shape[2]):
                                count += 1
                                name = self.name[i][t, j, k]
                                x, y, z =  self.master[i][t, j, k, :]
                            
                                val0 = '{}{:15d}'.format(name, count)
                                val1 = '{:16.9f}{:16.9f}{:16.9f}'.format(x, y, z)

                                file.write(val0+'\n')
                                file.write(val1+'\n')
                        else:
                            if name_encoding:
                                if len(name_encoding) == len(self.master):
                                    if type(name_encoding) == type(list()):
                                        if len(name_encoding[i]) == shape[2]:
                                            for k in selection[i]:
                                                count += 1
                                                name = name_encoding[i][k]
                                                
                                                if bravais == 'hexagonal':
                                                    x, y, z =  self.master[i][t, j, k, :]

                                                    pbc = 2. * np.cos(pi/6.) * x + y 
                                                    if pbc < 0:
                                                        x = x + self.cell[0][0]
                                                    elif pbc > (2. * np.cos(pi / 6.) * self.cell[0][0]):
                                                        x = x - self.cell[0][0] 

                                                    #if y > self.cell[1][1] * np.cos(pi / 6.):
                                                    #    y = y - self.cell[1][1] * np.cos(pi / 6.)
                                                    #    x = x + self.cell[0][0] * np.sin(pi / 6.)
                                                    #elif y < 0:
                                                    #    y = y + self.cell[1][1] * np.cos(pi / 6.)
                                                    #    x = x - self.cell[0][0] * np.sin(pi / 6.)

                                                    z = z + 3+12.29

                                                else:
                                                    x, y, z =  self.master[i][t, j, k, :]

                                                l = len(name)
                                                if l==3:
                                                    pass 
                                                else:
                                                    l += 1

                                                val0 = '{:3}{:15d}'.format(name, count)

                                                val1 = '{:16.9f}{:<4}{:16.9f}{:<4}{:16.9f}'.format(x, '', y, '', z)

                                                file.write(val0+'\n')
                                                file.write(val1+'\n')
                                        else:
                                            print(len(name_encoding[i]), name_encoding[i])
                                            err = '{}ValueError: {}length name_encoding[{}] != {}'.format(Fore.BLUE, Fore.YELLOW, i, shape[2])
                                            print(err)
                                            break
                                    else:
                                        err = '{}TypeError: {}name_encoding {}is not a {}list()'.format(Fore.BLUE, Fore.YELLOW, Fore.RED, Fore.GREEN)
                                        print(err)
                                        break
                                else:
                                    err = '{}ValueError: {}length name_encoding != {}{}'.format(Fore.BLUE, Fore.YELLOW, Fore.RED, len(self.master))
                                    print(err)
                                    break
                            
                            else:
                                err = '{}ValueError: {}encoding is set on true {}but name_encoding is EMPTY'.format(Fore.BLUE, Fore.YELLOW, Fore.RED)
                                print(err)
                                break

        else:
            print(err)


    def BILAYER(self, input : str, output = 'CONFIG'):

        nmol = len(self.master)
        self.info = []
        
        for i in range(nmol):
            self.data = self.master[i] 
            shape = self.data.shape 
            self.info.append(shape[0] * shape[1] * shape[2])

        count = np.sum(self.info)

        file_int = open(input, 'r')
        file_out = open(output, 'a') 

        integer = int(file_int.readline())
        char = file_int.readline()

        for i in range(integer):
            
            count += 1
            line = file_int.readline().split()
            name, x, y, z = line 
            x, y, z = float(x), float(y), float(z)
            
            string1 = '{:3}{:15d}'.format(name, count)
            string2 = '{:16.9f}{:<4}{:16.9f}{:<4}{:16.9f}'.format(x, '', y, '', z)

            file_out.write(string1+'\n')
            file_out.write(string2+'\n')