from typing import Any, ClassVar, Dict, List, Optional, Tuple

from typing import overload
import torch

class Config:
    class Target:
        __members__: ClassVar[dict] = ...  # read-only
        TensorRT: ClassVar[Config.Target] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    TensorRT: ClassVar[Config.Target] = ...
    default_fake_quantize_enabled: bool
    default_histogram_bins: int
    default_histogram_upsample_rate: int
    default_observer_enabled: bool
    default_track_quant_stats: bool
    exclude_funcs: Set[str]
    export_func: str
    target: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Config) -> None: ...

class DisjointIntSet:
    def __init__(self) -> None: ...
    def join(self, a: int, b: int) -> None: ...
    def maybe_join(self, a: int, b: int) -> None: ...
    def num_sets(self) -> int: ...
    def set_ids(self) -> Dict[int,int]: ...
    def sets(self) -> List[Set[int]]: ...
    def __contains__(self, arg0: int) -> bool: ...
    def __iadd__(self, arg0: int) -> DisjointIntSet: ...
    def __len__(self) -> int: ...

class DisjointStringSet:
    def __init__(self) -> None: ...
    def join(self, a: str, b: str) -> None: ...
    def maybe_join(self, a: str, b: str) -> None: ...
    def num_sets(self) -> int: ...
    def set_ids(self) -> Dict[str,int]: ...
    def sets(self) -> List[Set[str]]: ...
    def __contains__(self, arg0: str) -> bool: ...
    def __iadd__(self, arg0: str) -> DisjointStringSet: ...
    def __len__(self) -> int: ...

class NodeException(RuntimeError): ...

class Observer:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_range(self, range_id: int) -> Optional[Tuple[float,float]]: ...
    def get_shape(self, shape_id: int) -> Optional[List[Optional[int]]]: ...
    def is_floating_point(self, range_id: int) -> Optional[bool]: ...
    def num_ranges(self) -> int: ...
    def num_shapes(self) -> int: ...
    def num_tensors(self) -> int: ...

def apply_all_passes(mod: torch.ScriptModule, config: Config, copy: bool) -> torch.ScriptModule: ...
def get_implicit_tensors(mod: torch.ScriptModule, config: Config) -> Dict[str,Set[str]]: ...
def insert_all_observers(mod: torch.ScriptModule, config: Config, copy: bool) -> torch.ScriptModule: ...
def insert_observers(mod: torch.ScriptModule, config: Config, copy: bool) -> torch.ScriptModule: ...
def observer_name() -> str: ...
def quantize_props() -> List[str]: ...
