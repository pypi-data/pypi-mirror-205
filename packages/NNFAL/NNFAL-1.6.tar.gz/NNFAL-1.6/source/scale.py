"""
#NAV_30 Min:
x1       4.000010
x2      21.000100
v1      -0.999937
v2      -0.999985
time     0.000000
x1'      0.000009
x2'      1.032950
v1'     -0.999937
v2'     -1.051810
dtype: float64

#NAV_30 Max:
x1       5.000000
x2      22.000000
v1       0.999998
v2       0.999982
time    49.991500
x1'     22.766500
x2'     23.037700
v1'      1.516070
v2'      0.999982
dtype: float64

#Oscillator
p       0.200000
q      -0.099991
time    0.000000
dtype: float64

p       0.299996
q       0.099988
time    6.350000
dtype: float64

"""
"""
#Min and Max of F16 model
VT              540.000000
alpha             0.037027
beta              0.000000
phi               0.628340
theta            -1.256600
psi              -1.178100
P                 0.000000
Q                 0.000000
R                 0.000000
pn                0.000000
pe                0.000000
h              1798.000000
pow               9.000000
int_e_Nz          0.000000
int_e_ps          0.000000
xint_e_Ny_r       0.000000
time              0.000000
dtype: float64

VT              540.000000
alpha             0.037027
beta              0.000000
phi               0.890010
theta            -1.099600
psi              -0.392880
P                 0.000000
Q                 0.000000
R                 0.000000
pn                0.000000
pe                0.000000
h              1798.000000
pow               9.000000
int_e_Nz          0.000000
int_e_ps          0.000000
xint_e_Ny_r       0.000000
time              3.510000
dtype: float64


Min and Max of Oscillator
p       0.200000
q      -0.099991
time    0.000000
dtype: float64

p       0.299996
q       0.099988
time    6.350000
dtype: float64



Min and Max of Two_tanks

x1      1.50001
x2      1.00000
time    0.00000
dtype: float64

x1      2.49997
x2      1.00000
time    8.76001
dtype: float64


Min and Max of B Ball
x       10.0
v        0.0
time     0.0
dtype: float64

x       11.4999
v        0.0000
time    10.0000
dtype: float64

_AFC_P Min and Max
0       61.21
1      900.09
3      900.09
5      900.09
7      900.09
9      900.09
11     900.09
0.1      0.00

0        81.19
1      1100.00
3      1100.00
5      1100.00
7      1100.00
9      1100.00
11     1100.00
0.1      30.00
dtype: float64
"""

import numpy as np
data = {
    'F16': {
        'Min': [540, 0.037027, 0, 0.628319, -1.256637, -1.178097, 0, 0, 0, 0, 0, 1798, 9, 0, 0, 0, 0],
        'Max': [540, 0.037027, 0, 0.890013, -1.099557, -0.392699, 0, 0, 0, 0, 0, 1798, 9, 0, 0, 0, 3.51]
    },
    'NAV_30_NN': {
        'Min': [4.000010, 21.000100, -0.999937, -0.999985, 0],
        'Max': [5.000000, 22.000000, 0.999998, 0.999982, 49.991500]
    },
    'Oscillator_NN': {
        'Min': [0.200000, -0.099991, 0],
        'Max': [0.299996, 0.099988, 6.350000]
    },
    'Two_tanks_NN': {
        'Min': [1.50001, 1, 0],
        'Max': [2.49997, 1, 8.76001]
    },
    'B_Ball_NN': {
        'Min': [10, 0, 0],
        'Max': [11.4999, 0, 10]
    },
    'ACCU04_NN': {
        'Min': [9, 6, 3, 0, 0.010577, -0.999293, -0.099937, 3, 3, 3, 0],
        'Max': [9, 6, 3, 0, 99.994200, 0.999971, 1.899700, 3, 3, 3, 10]
    },
    'AT': {
    	  'Min' : [0, 1000, 1, 0.007026, 0.039996, 0.004835, 0.003577, 0.007203, 0.011604, 0.004939, 0.012116, 20],
	  'Max' : [0, 1000, 1, 99.979, 324.990, 99.984, 324.980, 99.997, 324.960, 99.995, 324.860, 30],
	  'ST'  : [1251.046],
	  'TT'  : [18400]
    },
    'ATv1': {
        'Min' : [0.007026, 0.039996, 0.004835, 0.003577, 0.007203, 0.011604, 0.004939, 0.012116, 20.000000],
        'Max' : [99.979, 324.990, 99.984, 324.980, 99.997, 324.960, 99.995, 324.860, 30.000]
     },
    'AFC_P': {
    	  'Min' : [61.205, 900.040, 61.201, 900.010, 61.201, 900.040, 61.201, 900.020, 61.208, 900.000, 61.201, 900.030, 0],
	  'Max' : [81.196, 1100.000, 81.193, 1099.900, 81.189, 1100.000, 81.197, 1100.000, 81.195, 1100.000, 81.199, 1100.000, 30],
	  'ST'  : [6045.4055],
	  'TT'  : [34524]
    },
    'SC': {
    	  'Min' : [3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 3.99, 0],
	  'Max' : [4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 4.01, 35]
    },
    'CC': {
    	  'Min' : [0.000266, 0.000011, 0.000036, 0.000124, 0.000037, 0.000233, 0.000033, 0.000022, 0.000067, 0.000223, 0.000072, 0.000162, 0],
	  'Max' : [0.99995, 0.99998, 0.99999, 0.99997, 0.99956, 0.99990, 0.99963, 0.99999, 0.99977, 0.99971, 0.99979, 0.99971, 100],
	  'ST'  : [2230.2694],
	  'TT'  : [14130]
    },
    'CC_old': {
    	  'Min' : [0,10,20,30,40,0],
	  'Max' : [9,19,29,39,49,100]
    }
}


def scaling(X):
    x_sc = []
    print(len(X))
    for i in range(0, len(X), 1):
        print(X[i], Min[i], Max[i], Min[i])
        x_sc.append(((X[i] - Min[i]) / (Max[i] - Min[i])))

    return x_sc


Min = []
Max = []


def inv_scaling(Y, property_name):
    if property_name in data:
        Min = data[property_name]["Min"]
        Max = data[property_name]["Max"]
    else:
        print(f"{property_name} not found in the data")
        return None
    y_inv = []
    for i in range(0, len(Y), 1):
        y_inv.append(Y[i] * (Max[i] - Min[i]) + Min[i])
    return y_inv


# X = [0.34627897]

# scaled_data = scaling(X)
# print(scaled_data)
# print(inv_scaling(X))
