{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","props","render","Streamlit","setFrameHeight","window","innerHeight","args","isUser","message","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","css","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","whiteSpace","flexDirection","fontFamily","font","src","alt","draggable","speed","state","index","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"0TAYMA,E,kDACJ,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAGDC,OAAS,WACdC,IAAUC,eAAeC,OAAOC,aAChC,MAA4B,EAAKL,MAAMM,KAA/BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QACZC,EAAY,GAIdA,EAHGF,EAGM,8EAFA,oNAQX,IAAQG,EAAU,EAAKV,MAAfU,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IACpB,CACEC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAEV,SAAClB,GAEC,OAAIA,EAAMO,OACDY,YAAP,mHAMKA,YAAP,6BAKEC,EAAUR,IAAOS,IAAI,CACzBC,QAAS,eACTC,WAAYb,EAAMc,yBAClBV,OAAQ,wBACRC,aAAc,OACdU,QAAS,YACTP,OAAQ,WACRF,OAAQ,OACRU,SAAU,MACVC,WAAY,aAIR5B,EAAOa,IAAOS,IAClB,CACEC,QAAS,OACTM,cAAe,MACfC,WAAW,GAAD,OAAKnB,EAAMoB,KAAX,sCACVZ,OAAQ,EACRD,MAAO,SAET,SAACjB,GAEC,OAAIA,EAAMO,OACDY,YAAP,+IAOKA,YAAP,6BAWJ,OACE,kBAAC,EAAD,CAAMZ,OAAQA,GACZ,kBAACI,EAAD,CACEJ,OAAQA,EACRwB,IAAKtB,EACLuB,IAAI,UACJC,UAAU,WAEA,IAAX1B,EACC,kBAACa,EAAD,KACE,kBAAC,UAAD,KACE,kBAAC,IAAD,CAAQc,MAAO,GAAI1B,KAIvB,kBAACY,EAAD,KAAUZ,KAvGhB,EAAK2B,MAAQ,CAAEC,MAAO,EAAG5B,QAAS,IAFZ,E,uBADP6B,KAiHJC,cAAwBvC,GCzHvCwC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7845d1d1.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/react\";\nimport { Textfit } from \"react-textfit\";\nimport Typing from \"react-typing-animation\";\n\nclass Chat extends StreamlitComponentBase {\n  constructor(props: any) {\n    super(props);\n    this.state = { index: 0, message: \"\" };\n  }\n  public render = (): ReactNode => {\n    Streamlit.setFrameHeight(window.innerHeight);\n    const { isUser, message } = this.props.args;\n    let avatarUrl = \"\";\n    if (!isUser) {\n      avatarUrl = `https://api.dicebear.com/6.x/avataaars/svg?seed=Felix&facialHair=beardMajestic&facialHairColor=2c1b18&eyes=happy&hairColor=4a312c&skinColor=d08b5b&style=circle&clothing=shirtVNeck&clothesColor=ffffff&top=curvy`;\n    } else {\n      avatarUrl = `https://api.dicebear.com/6.x/shapes/svg?backgroundType=gradientLinear,solid`;\n    }\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props;\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>;\n    }\n\n    // styles for the avatar image\n    const Avatar = styled.img(\n      {\n        border: `1px solid transparent`,\n        borderRadius: \"50%\",\n        height: \"5rem\",\n        width: \"5rem\",\n        margin: 0,\n      },\n      (props: { isUser: boolean }) => {\n        // specific styles\n        if (props.isUser) {\n          return css`\n            height: 4rem;\n            width: 4rem;\n            margin: 0;\n          `;\n        }\n        return css``;\n      }\n    );\n\n    // styles for the message box\n    const Message = styled.div({\n      display: \"inline-block\",\n      background: theme.secondaryBackgroundColor,\n      border: \"1px solid transparent\",\n      borderRadius: \"10px\",\n      padding: \"10px 14px\",\n      margin: \"5px 20px\",\n      height: \"auto\",\n      maxWidth: \"70%\",\n      whiteSpace: \"pre-line\",\n    });\n\n    // styles for the container\n    const Chat = styled.div(\n      {\n        display: \"flex\",\n        flexDirection: \"row\",\n        fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`,\n        margin: 0,\n        width: \"100%\",\n      },\n      (props: { isUser: boolean }) => {\n        // specific styles\n        if (props.isUser) {\n          return css`\n          flex-direction: row-reverse;\n          & > div {/\n            text-align: right;\n          }\n        `;\n        }\n        return css``;\n      }\n    );\n\n    function getHeight(message: any) {\n      let height: any = \"fit-content\";\n      if (message.length > 68) {\n        height = (message.length / 68) * 36;\n      }\n      return height;\n    }\n    return (\n      <Chat isUser={isUser}>\n        <Avatar\n          isUser={isUser}\n          src={avatarUrl}\n          alt=\"profile\"\n          draggable=\"false\"\n        />\n        {isUser === false ? (\n          <Message>\n            <Textfit>\n              <Typing speed={0}>{message}</Typing>\n            </Textfit>\n          </Message>\n        ) : (\n          <Message>{message}</Message>\n        )}\n      </Chat>\n    );\n  };\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}