{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","props","render","Streamlit","setFrameHeight","window","innerHeight","args","isUser","message","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","css","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","whiteSpace","flexDirection","fontFamily","font","src","alt","draggable","strings","typeSpeed","backSpeed","showCursor","style","state","index","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"kTAYMA,E,kDACJ,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IAGDC,OAAS,WACdC,IAAUC,eAAeC,OAAOC,aAChC,MAA4B,EAAKL,MAAMM,KAA/BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QACZC,EAAY,GAIdA,EAHGF,EAGM,8EAFA,oNASX,IAAQG,EAAU,EAAKV,MAAfU,MAIR,IAAKA,EACH,OAAO,oFAKT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAEV,SAAClB,GACC,OAAIA,EAAMO,OACDY,YAAP,qGAMKA,YAAP,6BAIIC,EAAUR,IAAOS,IAAI,CACzBC,QAAS,eACTC,WAAYb,EAAMc,yBAClBV,OAAQ,wBACRC,aAAc,OACdU,QAAS,YACTP,OAAQ,WACRF,OAAQ,OACRU,SAAU,MACVC,WAAY,aAIR5B,EAAOa,IAAOS,IAAI,CACtBC,QAAS,OACTM,cAAe,MACfC,WAAW,GAAD,OAAKnB,EAAMoB,KAAX,sCACVZ,OAAQ,EACRD,MAAO,SAET,SAACjB,GACC,OAAIA,EAAMO,OACDY,YAAP,+IAOKA,YAAP,6BAUF,OACE,kBAAC,EAAD,CAAMZ,OAAQA,GACZ,kBAACI,EAAD,CAASJ,OAAQA,EAAQwB,IAAKtB,EAAWuB,IAAI,UAAUC,UAAU,WACrD,IAAX1B,EACC,kBAAC,IAAD,CACE2B,QAAS,CAAC1B,GACV2B,UAAW,EACXC,UAAW,EACXC,YAAY,EACZC,MAAO,CACLhB,QAAS,cACTC,WAAYb,EAAMc,yBAClBV,OAAQ,wBACRC,aAAc,OACdU,QAAS,YACTP,OAAQ,WACRF,OAAQ,OACRU,SAAU,MACVC,WAAY,cAKlB,kBAACP,EAAD,KAAUZ,KA3Gd,EAAK+B,MAAQ,CAAEC,MAAO,EAAGhC,QAAS,IAFb,E,uBADNiC,KAoHJC,cAAwB3C,GC5HvC4C,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0b143d81.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport Typed from \"react-typed\"\n\n\nclass Chat extends StreamlitComponentBase {\n  constructor(props:any) {\n    super(props);\n    this.state = { index: 0, message: \"\" };\n  }\n  public render = (): ReactNode => {\n    Streamlit.setFrameHeight(window.innerHeight)\n    const { isUser, message } = this.props.args;\n    let avatarUrl = ''\n    if (!isUser){\n      avatarUrl = `https://api.dicebear.com/6.x/avataaars/svg?seed=Felix&facialHair=beardMajestic&facialHairColor=2c1b18&eyes=happy&hairColor=4a312c&skinColor=d08b5b&style=circle&clothing=shirtVNeck&clothesColor=ffffff&top=curvy`\n    }else{\n      avatarUrl = `https://api.dicebear.com/6.x/shapes/svg?backgroundType=gradientLinear,solid`\n    }\n    \n    \n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    \n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n\n\n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      borderRadius: '50%',\n      height: '5rem',\n      width: '5rem',\n      margin: 0\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n        height: 4rem;\n        width: 4rem;\n        margin: 0;\n        `\n      }\n      return css``\n    })\n    \n    // styles for the message box\n    const Message = styled.div({\n      display: 'inline-block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '10px',\n      padding: '10px 14px',\n      margin: '5px 20px',\n      height: 'auto',\n      maxWidth: '70%',\n      whiteSpace: 'pre-line',\n    })\n\n    // styles for the container\n    const Chat = styled.div({\n      display: 'flex',\n      flexDirection: 'row',\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      margin: 0,\n      width: '100%',\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          flex-direction: row-reverse;\n          & > div {/\n            text-align: right;\n          }\n        `\n      }\n      return css``\n    })\n  \n    function getHeight(message:any){\n      let height:any = \"fit-content\" \n      if (message.length > 68){\n      height = (message.length / 68) * 36\n      }\n      return height\n    }\n    return (\n      <Chat isUser={isUser}>\n        <Avatar  isUser={isUser} src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        {isUser === false ? \n          <Typed\n            strings={[message]}\n            typeSpeed={1}\n            backSpeed={1}\n            showCursor={false}\n            style={{\n              display: 'inline-flex',\n              background: theme.secondaryBackgroundColor,\n              border: '1px solid transparent',\n              borderRadius: '10px',\n              padding: '10px 14px',\n              margin: '5px 20px',\n              height: \"auto\",\n              maxWidth: '70%',\n              whiteSpace: 'pre-line',\n            }}\n          /> \n        \n        :\n        <Message>{message}</Message>}\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}