# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['via_hub_logistc',
 'via_hub_logistc.core',
 'via_hub_logistc.keyword',
 'via_hub_logistc.model']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'via-hub-logistc',
    'version': '1.0.14',
    'description': 'This project is intended to be a facilitator for new developments for test automation',
    'long_description': '# Biblioteca customizada para testes automatizados com robotframework\n\nA finalidade deste documento Ã© a de passar informaÃ§Ãµes das funÃ§Ãµes e keywords que estÃ£o sendo entregues.\n\n## ðŸ”§ InstalaÃ§Ã£o\n\t$ pip install via-hub-logistic\n\n## ðŸš€ Keywords:\n**Microsoft Azure**\n\n  ```robotframework\n    *** Settings ***\n    $  Library    via_hub_logistc.keywords.kws_microsoft.ViaAzure\n  ```\n  - *Azure Connect Blob Server*<br>\n    *Create connect with microsoft blob server*\n    \n    >&nbsp;*Parameters:*<br>\n    >&ensp;**host: str**<br>\n    >&emsp;A url used for connect blob server<br>\n    >&ensp;**account_name: bool**<br>\n    >&emsp;A username for connect account server<br>\n    >&ensp;**account_key: str** <br>\n    >&emsp;A access token the account<br>\n      \n    >&nbsp;*Returns:*<br>\n    >&ensp;*blob connect server*<br>\n \n  - Azure List All Directories In Container\n\t  > Return the json with all directories in a container<br>\n    > Params:<br>\n    > - **connection**: Object with connection :: *Connection*<br> \n    > - **container_name**: name container :: *str*<br>\n    > - **folder**: name the folder :: *str*<br>\n    > - **format**: Default false for return o path name the folder, true for return o full path name with folder :: *boolean*\n\n  - Azure Is Exist Directory In Container\n\t  > Return  True if the folder exists in the container or False if the folder not exist in container<br>\n    > Params:<br>\n    > - **connection**: Object with connection :: *Connection*<br>\n    > - **container_name**:  name container :: *str*<br>\n    > - **folder**:  name the folder :: *str*<br>\n    > - **directory**:  diectory search :: *srt*\n\n\n**Ibm Db2**\n\n  ```robotframework\n    *** Settings***\n    $  Library    via_hub_logistc.keywords.kws_db2.ViaDb2\n  ```\n  - Db2 Connect To Dataase\n\t  > Return the one object connction with database bd2 server<br>\n    > Params:<br>\n    > - **host**:  server name :: *str*<br>\n    > - **db_name**:  database name :: *str*<br>\n    > - **user_id**:  user name :: *str*<br>\n    > - **password**:  password id :: *str*\n\n  - Db2 Execute Qury\n\t  > Return json with result the of query <br>\n    > Params:<br>\n    > - **connection**: Object with connection the of database :: *Connection*<br>\n    > - **query**:  Query which will be used in the search :: *str*\n\n\n**Mongodb**\n\n  ```robotframework\n    *** Settings***\n    $  Library    via_hub_logistc.keywords.kws_mongodb.ViaMongo\n  ```\n  - Mongo Connect To Database\n\t  > Return conncection with mongoDB<br>\n    > Params:<br>\n    > - **strConnction**:  string connection :: *str*<br>\n\n  - Mongo Disconnect To Database\n\t  > Execute a disconnection with the server <br>\n    > Params:<br>\n    > - **client**: connection :: *Connection*<br>\n\n  - Mongo Find All\n\t  > Returns one json or list the json result <br>\n    > Params:<br>\n    > - **client**: connection :: *Connection*<br>\n    > - **baseName**: name the database :: *str*<br>\n    > - **collectionName**: name the collection:: *str*<br>\n\n  - Mongo Find By Parameter\n\t  > Returns one json or list the json result by parameter <br>\n    > Params:<br>\n    > - **client**: connection :: *Connection*<br>\n    > - **baseName**: name the database :: *str*<br>\n    > - **collectionName**: name the collection:: *str*<br>\n    > - **query**: Query which will be used in the search:: *dict*<br>\n\n**Mongodb**\n\n  ```robotframework\n    *** Settings***\n    $  Library    via_hub_logistc.keywords.kws_text.ViaText\n  ```\n  - Split Text\n\t  > Return text divide<br>\n    > Params:<br>\n    > - **text**:  text :: *str*<br>\n    > - **lengh**:  size limit caracteres :: *int*<br>\n\n## ðŸš€ Funcoes:\n**Arquivos**\n\n  ```Pytho\n    *** Settings***\n    $ Library    via_hub_logistc.core.via_file.FileYaml\n  ```\n  - read_yaml_file\n\t  > Return json with data file yaml<br>\n    > Params:<br>\n    > - **filename**:  path the file :: *str*<br>\n\n**Number**\n\n  ```Pytho\n    *** Settings***\n    $ Library    via_hub_logistc.core.via_number.ViaNumber\n  ```\n  - choose_number\n\t  > Return Choose number in range<br>\n    > Params:<br>\n    > - **stopNumber**:  number final the range :: *int*<br>\n  \n**Text**\n\n  ```Pytho\n    *** Settings***\n    $ Library    via_hub_logistc.core.via_text.ViaNumber\n  ```\n  - split_text\n\t  > Return split text informations $text and $length cut<br>\n    > Params:<br>\n    > - **text**:  text :: *int*<br>\n    > - **length**:  size the cut the text :: *int*<br>\n\n  - cut_text\n\t  > Return cut text informations $separator and $length cut<br>\n    > Params:<br>\n    > - **text**:  text :: *int*<br>\n    > - **separator**:  caracterer separator :: *int*<br>\n    > - **maxsplit**:  size the cut the text :: *int*<br>\n\n**Timer**\n\n  ```Pytho\n    *** Settings***\n    $ Library    via_hub_logistc.core.via_timer.ViaTimer\n  ```\n  - interval\n\t  > Return calculate date in two date<br>\n    > Params:<br>\n    > - **start**:  date start :: *int*<br>\n    > - **end**:  date end :: *int*<br>\n\n  - str_to_date\n\t  > Return on a date in format string<br>\n    > Params:<br>\n    > - **value**:  date  :: *int*<br>\n    > - **format**:  date format :: *int*<br>\n\n**Scenarios**\n\n  ```Pytho\n    *** Settings***\n    $ Library    via_hub_logistc.core.via_scenarios.ViaTimer\n  ```\n  - get_id_scenario\n\t  > Return id the scenarios<br>\n    > Params:<br>\n    > - **lst_tags**:  date start :: *list*<br>\n    > - **tag_id**: tag id for load in list :: *int*<br>\n\n\n**Conector Zephry**\n\n  ```Pytho\n    *** Settings***\n    $ Library    via_hub_logistc.core.via_report.ReportManager\n  ```\n  - get_cycle_id\n\t  > Return id the of cycle in jira<br>\n    > Params:<br>\n    > - **cycle**: cycle name :: *list*<br>\n\n  - create_cycle_name\n\t  > Return name the of cycle test in jira<br>\n    > Params:<br>\n    > - **project_id**: id project jira :: *list*<br>\n    > - **release**: name the branch the regression :: *list*<br>\n\n  - create_folder\n\t  > Return name new folder for test regression<br>\n    > Params:<br>\n    > - **projectKey**: key project jira :: *list*<br>\n    > - **folder_name**: name the folder the regression :: *list*<br>\n\n  - create_cycle_test\n\t  > Return new cycle for test regression<br>\n    > Params:<br>\n    > - **folder_name**: name the folder the regression :: *str*<br>\n    > - **test_plan**: id test plan:: *str*<br>\n    > - **key**: key the project :: *str*<br>\n    > - **name_cycle**: name the cycle the regression :: *str*<br>\n    > - **descripption**: description the cycle the regression :: *str*<br>\n    > - **iteration**: iteration the cycle the regression :: *str*<br>\n    > - **owner**: name the of runner the regression :: *str*<br>\n    > - **cycle_date**: date the cycle the regression :: *str*<br>\n    > - **status**: status the cycle the regression :: *str*<br>\n\n  - save_result_runner_tests\n\t  > Add scenarios to an existing cycle <br>\n    > Params:<br>\n    > - **cycle**: cycle the runner regression :: *str*<br>\n    > - **list_scenarios**: list with scenarios :: *list*<br>\n\n  - get_owner_test_case\n\t  > Return Get info the of created test case<br>\n    > Params:<br>\n    > - **test_key**: name teste case :: *str*<br>\n\n  - update_cycle_execution\n\t  > Change status upadate cycle test br>\n    > Params:<br>\n    > - **project_id**: id project the jira :: *str*<br>\n    > - **cycle_id**: id cycle :: *str*<br>\n    > - **status**: status the execution :: *str*<br>',
    'author': 'Jaderson Macedo',
    'author_email': 'jaderson.macedo@viavarejo.com.br',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
