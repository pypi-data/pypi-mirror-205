# -*- coding: utf-8 -*-
"""python_interview_problems_level_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pa0omrEf1fRRwZ_dZ4nDzEGVmh6Jfzyu
"""

def reverse_integer(num,no_digits):
  
  if num<0:
    reverse_num=0
    num = abs(num)
    while num>0:
      remainder = num % 10
      reverse_num = (reverse_num * 10) + remainder
      num = num // 10
    reverse_num = -reverse_num
  else:
    reverse_num=0
    while num > 0:
      remainder = num % 10 
      reverse_num = (reverse_num * 10) + remainder
      num = num // 10

  return '{:0{}d}' .format(reverse_num,no_digits)




def check_armstrong_no(num):
  no_of_digits = len(str(num))
  sum_of_exps=0
  for digit in str(num):
    sum_of_exps += int(digit) ** no_of_digits
  if sum_of_exps==num:
    return True
  else:
    return False



def check_prime(num):
  if num < 2:
    return False
  for i in range(2,int(num ** 0.5)+1):
    if num % i == 0:
      return False
  return True



def fibonacci_gen(n):
    if n==0:
      return []
    elif n==1:
      return [0]
    else:
      fib=[0,1]
      for i in range(2,n):
        fib.append(fib[i-1]+fib[i-2])
      return fib


def check_palindrome(num):
  num_str=str(num)
  length=len(num_str)
  for i in range(length // 2):
    if num_str[i] != num_str[length-i-1]:
      return False
  return True


def find_greatest(*args):
  greatest= float('-inf')
  for num in args:
    if num > greatest:
      greatest = num
  return greatest



def check_binary(num):
  for digit in str(num):
    if digit not in ['0','1']:
      return False
  return True


def check_perfect_number(num):
  sum=0
  for divisor in range(1,num):
    if num%divisor==0:
      sum+=divisor
      print(divisor)
  if sum==num:
    return True
  else:
    return False



def is_leap_year(y):
  if y%4==0 and (y%100!=0 or y%400==0):
    return True
  else:
    return False



def sp_interest(p,r,t):
  si=(p*r*t)/100
  p=print('simple interest is:',si)
  return p




def cel_to_far(c):
  far=(c*1.8)+32
  return far



def swap_two(a,b):
  a=a+b
  b=a-b
  a=a-b
  return a,b


def swap_two1(a,b):
  t=a
  a=b
  b=t
  return a,b



def add_two(a,b):
  while b!=0:
    carry = a & b
    a = a ^ b
    b = carry<<1
  return a


def check_perfect(n):
  sum=0
  for divisor in range(1,n):
    if n%divisor==0:
      sum+=divisor
  if sum==n:
      return True
  else:
    return False



def even_odd(num):
  if num>0 or num<0:
    num=abs(num)
    if num%2==0:
      return 'even'
    else:
      return 'odd'
  else:
    return 'please enter a value greater than zero.'


def pow(x,n):
  value=1
  for i in range(1,n+1):
    value*=x
  return value



def pow1(x,n):
  value=1
  while n!=0:
    value*=x
    n-=1
  return value


def gcd(a,b):
  while b!=0:
    a,b=b,a%b
  return a

def lcm(a,b):
  l=int(a*b/gcd(a,b))
  return l



def factorial(n):
  fact=1
  for i in range(1,n+1):
    fact*=i
  return fact



def remove_char(s,c):
  new_string=''
  for i in s:
    if i!=c:
      new_string+=i
  return new_string



def count_occurences(s,chars):
  occurences={}
  for c in chars:
    occurences[c]=0
  for c in s:
    if c in chars:
      occurences[c]+=1
  for c in chars:
    print(f"{c}:{occurences[c]}")



def count_occuraence(s,c):
  count=0
  for i in s:
    if i==c:
      count+=1
  return count



def remove_chars(s,chars):
  result=''
  for c in s:
    if c not in chars:
      result+=c
  return result



def check_anagram(s1,s2):
  s1=s1.lower()
  s2=s2.lower()
  freq1={}
  freq2={}
  for char in s1:
    if char in freq1:
      freq1[char]+=1
    else:
      freq1[char]=1
  for char in s2:
    if char in freq2:
      freq2[char]+=1
    else:
      freq2[char]=1
  if freq1==freq2:
    return True
  else:
    return False




def check_palindrome(s):
  s=s.lower()
  n=len(s)
  for i in range(len(s)):
    if s[i]!=s[n-i-1]:
      return False
  return True



def check_v_or_c(char):
  char=char.lower()
  if char in ('a','e','i','o','u'):
    return 'vowel'
  return 'consonant'




def check_digit(char):
  digits={'1','2','3','4','5','6','7','8','9'}
  if char in digits:
     return True
  return False



def str_replace_gap(s,char):
  new_string=''
  for i in s:
    if i==' ':
      new_string+=char
    else:
      new_string+=i

  return new_string



def to_lower(s):
  new_string=''
  for c in s:
    if ord(c)>=65 and ord(c)<=90:
       new_string+=chr(ord(c)+32)
    else:
      new_string+=c
  return new_string




def al_num_sp_count(s):
  s=to_lower(s)
  alpha=num=special=0

  for i in s:
    if i >='a' and i<='z':
      alpha+=1
    elif i>='0' and i<='9':
      num+=1
    else:
      special+=1
  return alpha,num,special




def str_split(s):
    characters=[]
    for i in range(len(s)):
      characters+=s[i]
    return characters



def remove_repeating_char(s):
  result=''
  for c in s:
    if c not in result:
      result+=c
  return result

remove_repeating_char('pavnakdjll')

def ch_ascend(s):
  chars=[]
  for i in s:
    chars.append(i)
  for i in range(len(chars)):
    for j in range(i+1, len(chars)):
      if chars[i] > chars[j]:
        chars[i],chars[j] = chars[j],chars[i]
  sorted_str=''
  for i in chars:
    sorted_str+=i
  return sorted_str



def find_pairs(arr, num):
    pairs = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == num:
                pairs.append((arr[i], arr[j]))
    return pairs



def find_top_two(arr):
  max1=max2=float('-inf')
  for num in arr:
    if num>max1:
      max2=max1
      max1=num
    elif num>max2 and num!=max1:
      max2=num
  return max1,max2


def remove_duplicate(arr):
    new_arr=[]
    for i in arr:
        if i not in new_arr:
          new_arr+=[i]
       
    return new_arr


def reverse_array(arr):
  n=len(arr)
  for i in range(n//2):
      temp=arr[i]
      arr[i]=arr[n-i-1]
      arr[n-i-1]=temp
  return arr


def remove_ele(p,arr):
  for i in range(p,len(arr)-1):
    arr[i]=arr[i+1]
  arr.pop()
  return arr


def arr_odd(arr):
  odd=[]
  for i in arr:
    if not i%2==0:
      odd+=[i]
  return odd


def remove_ele(arr,ele):
  new_arr=[]
  for i in arr:
    if i!=ele:
      new_arr+=[i]
  return new_arr


def rotate_left(arr,k):
  n=len(arr)
  k=k%n
  for i in range(k):
    temp=arr[0]
    for j in range(n-1):
      arr[j]=arr[j+1]
    arr[n-1]=temp
  return arr

def exit_module():
  import sys
  print("Exiting the module.")
  sys.exit()

