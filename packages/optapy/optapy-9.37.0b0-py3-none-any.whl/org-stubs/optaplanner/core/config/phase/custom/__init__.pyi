
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.function
import org.optaplanner.core.api.score.director
import org.optaplanner.core.config.phase
import org.optaplanner.core.impl.phase.custom
import typing



class CustomPhaseConfig(org.optaplanner.core.config.phase.PhaseConfig['CustomPhaseConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'CustomPhaseConfig': ...
    def getCustomPhaseCommandClassList(self) -> java.util.List[typing.Type[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand]]: ...
    def getCustomPhaseCommandList(self) -> java.util.List[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand]: ...
    def getCustomProperties(self) -> java.util.Map[str, str]: ...
    def inherit(self, customPhaseConfig: 'CustomPhaseConfig') -> 'CustomPhaseConfig': ...
    def setCustomPhaseCommandClassList(self, list: java.util.List[typing.Type[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand]]) -> None: ...
    def setCustomPhaseCommandList(self, list: java.util.List[typing.Union[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand, typing.Callable]]) -> None: ...
    def setCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withCustomPhaseCommandClassList(self, list: java.util.List[typing.Type[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand]]) -> 'CustomPhaseConfig': ...
    def withCustomPhaseCommandList(self, list: java.util.List[typing.Union[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand, typing.Callable]]) -> 'CustomPhaseConfig': ...
    _withCustomPhaseCommands__Solution_ = typing.TypeVar('_withCustomPhaseCommands__Solution_')  # <Solution_>
    def withCustomPhaseCommands(self, *customPhaseCommand: typing.Union[org.optaplanner.core.impl.phase.custom.CustomPhaseCommand[_withCustomPhaseCommands__Solution_], typing.Callable[[org.optaplanner.core.api.score.director.ScoreDirector[typing.Any]], None]]) -> 'CustomPhaseConfig': ...
    def withCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'CustomPhaseConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.phase.custom")``.

    CustomPhaseConfig: typing.Type[CustomPhaseConfig]
