
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.function
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.impl.heuristic.selector.move.factory
import typing



class MoveIteratorFactoryConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['MoveIteratorFactoryConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'MoveIteratorFactoryConfig': ...
    def getMoveIteratorFactoryClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.move.factory.MoveIteratorFactory]: ...
    def getMoveIteratorFactoryCustomProperties(self) -> java.util.Map[str, str]: ...
    def inherit(self, moveIteratorFactoryConfig: 'MoveIteratorFactoryConfig') -> 'MoveIteratorFactoryConfig': ...
    def setMoveIteratorFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.move.factory.MoveIteratorFactory]) -> None: ...
    def setMoveIteratorFactoryCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withMoveIteratorFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.move.factory.MoveIteratorFactory]) -> 'MoveIteratorFactoryConfig': ...
    def withMoveIteratorFactoryCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'MoveIteratorFactoryConfig': ...

class MoveListFactoryConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['MoveListFactoryConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'MoveListFactoryConfig': ...
    def getMoveListFactoryClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.move.factory.MoveListFactory]: ...
    def getMoveListFactoryCustomProperties(self) -> java.util.Map[str, str]: ...
    def inherit(self, moveListFactoryConfig: 'MoveListFactoryConfig') -> 'MoveListFactoryConfig': ...
    def setMoveListFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.move.factory.MoveListFactory]) -> None: ...
    def setMoveListFactoryCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withMoveListFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.move.factory.MoveListFactory]) -> 'MoveListFactoryConfig': ...
    def withMoveListFactoryCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'MoveListFactoryConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.move.factory")``.

    MoveIteratorFactoryConfig: typing.Type[MoveIteratorFactoryConfig]
    MoveListFactoryConfig: typing.Type[MoveListFactoryConfig]
