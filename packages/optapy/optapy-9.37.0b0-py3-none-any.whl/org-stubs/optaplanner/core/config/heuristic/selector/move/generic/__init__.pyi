
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import java.util.function
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.entity.pillar
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.heuristic.selector.move.generic.chained
import org.optaplanner.core.config.heuristic.selector.move.generic.list
import org.optaplanner.core.config.heuristic.selector.value
import typing



_AbstractPillarMoveSelectorConfig__Config_ = typing.TypeVar('_AbstractPillarMoveSelectorConfig__Config_', bound='AbstractPillarMoveSelectorConfig')  # <Config_>
class AbstractPillarMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig[_AbstractPillarMoveSelectorConfig__Config_], typing.Generic[_AbstractPillarMoveSelectorConfig__Config_]):
    def __init__(self): ...
    def getPillarSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.pillar.PillarSelectorConfig: ...
    def getSubPillarSequenceComparatorClass(self) -> typing.Type[java.util.Comparator]: ...
    def getSubPillarType(self) -> 'SubPillarType': ...
    def inherit(self, config_: _AbstractPillarMoveSelectorConfig__Config_) -> _AbstractPillarMoveSelectorConfig__Config_: ...
    def setPillarSelectorConfig(self, pillarSelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.pillar.PillarSelectorConfig) -> None: ...
    def setSubPillarSequenceComparatorClass(self, class_: typing.Type[java.util.Comparator]) -> None: ...
    def setSubPillarType(self, subPillarType: 'SubPillarType') -> None: ...
    def withPillarSelectorConfig(self, pillarSelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.pillar.PillarSelectorConfig) -> _AbstractPillarMoveSelectorConfig__Config_: ...
    def withSubPillarSequenceComparatorClass(self, class_: typing.Type[java.util.Comparator]) -> _AbstractPillarMoveSelectorConfig__Config_: ...
    def withSubPillarType(self, subPillarType: 'SubPillarType') -> _AbstractPillarMoveSelectorConfig__Config_: ...

class ChangeMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['ChangeMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'ChangeMoveSelectorConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, changeMoveSelectorConfig: 'ChangeMoveSelectorConfig') -> 'ChangeMoveSelectorConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'ChangeMoveSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'ChangeMoveSelectorConfig': ...

class SubPillarType(java.lang.Enum['SubPillarType']):
    NONE: typing.ClassVar['SubPillarType'] = ...
    SEQUENCE: typing.ClassVar['SubPillarType'] = ...
    ALL: typing.ClassVar['SubPillarType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SubPillarType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SubPillarType']: ...

class SwapMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['SwapMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'SwapMoveSelectorConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getSecondaryEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getVariableNameIncludeList(self) -> java.util.List[str]: ...
    def inherit(self, swapMoveSelectorConfig: 'SwapMoveSelectorConfig') -> 'SwapMoveSelectorConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setSecondaryEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setVariableNameIncludeList(self, list: java.util.List[str]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'SwapMoveSelectorConfig': ...
    def withSecondaryEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'SwapMoveSelectorConfig': ...
    def withVariableNameIncludes(self, *string: str) -> 'SwapMoveSelectorConfig': ...

class PillarChangeMoveSelectorConfig(AbstractPillarMoveSelectorConfig['PillarChangeMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'PillarChangeMoveSelectorConfig': ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, pillarChangeMoveSelectorConfig: 'PillarChangeMoveSelectorConfig') -> 'PillarChangeMoveSelectorConfig': ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'PillarChangeMoveSelectorConfig': ...

class PillarSwapMoveSelectorConfig(AbstractPillarMoveSelectorConfig['PillarSwapMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'PillarSwapMoveSelectorConfig': ...
    def getSecondaryPillarSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.pillar.PillarSelectorConfig: ...
    def getVariableNameIncludeList(self) -> java.util.List[str]: ...
    def inherit(self, pillarSwapMoveSelectorConfig: 'PillarSwapMoveSelectorConfig') -> 'PillarSwapMoveSelectorConfig': ...
    def setSecondaryPillarSelectorConfig(self, pillarSelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.pillar.PillarSelectorConfig) -> None: ...
    def setVariableNameIncludeList(self, list: java.util.List[str]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withSecondaryPillarSelectorConfig(self, pillarSelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.pillar.PillarSelectorConfig) -> 'PillarSwapMoveSelectorConfig': ...
    def withVariableNameIncludeList(self, list: java.util.List[str]) -> 'PillarSwapMoveSelectorConfig': ...
    def withVariableNameIncludes(self, *string: str) -> 'PillarSwapMoveSelectorConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.move.generic")``.

    AbstractPillarMoveSelectorConfig: typing.Type[AbstractPillarMoveSelectorConfig]
    ChangeMoveSelectorConfig: typing.Type[ChangeMoveSelectorConfig]
    PillarChangeMoveSelectorConfig: typing.Type[PillarChangeMoveSelectorConfig]
    PillarSwapMoveSelectorConfig: typing.Type[PillarSwapMoveSelectorConfig]
    SubPillarType: typing.Type[SubPillarType]
    SwapMoveSelectorConfig: typing.Type[SwapMoveSelectorConfig]
    chained: org.optaplanner.core.config.heuristic.selector.move.generic.chained.__module_protocol__
    list: org.optaplanner.core.config.heuristic.selector.move.generic.list.__module_protocol__
