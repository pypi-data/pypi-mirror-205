
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util.function
import org.optaplanner.core.config.heuristic.selector
import org.optaplanner.core.config.heuristic.selector.value
import typing



class SubChainSelectorConfig(org.optaplanner.core.config.heuristic.selector.SelectorConfig['SubChainSelectorConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'SubChainSelectorConfig': ...
    def getMaximumSubChainSize(self) -> int: ...
    def getMinimumSubChainSize(self) -> int: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, subChainSelectorConfig: 'SubChainSelectorConfig') -> 'SubChainSelectorConfig': ...
    def setMaximumSubChainSize(self, integer: int) -> None: ...
    def setMinimumSubChainSize(self, integer: int) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withMaximumSubChainSize(self, integer: int) -> 'SubChainSelectorConfig': ...
    def withMinimumSubChainSize(self, integer: int) -> 'SubChainSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'SubChainSelectorConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.value.chained")``.

    SubChainSelectorConfig: typing.Type[SubChainSelectorConfig]
