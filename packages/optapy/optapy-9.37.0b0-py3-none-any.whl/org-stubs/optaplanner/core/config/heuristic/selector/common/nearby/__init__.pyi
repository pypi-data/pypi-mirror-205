
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util.function
import org.optaplanner.core.config.heuristic.selector
import org.optaplanner.core.config.heuristic.selector.common
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.list
import org.optaplanner.core.config.heuristic.selector.value
import org.optaplanner.core.impl.heuristic.selector.common.nearby
import typing



class NearbySelectionConfig(org.optaplanner.core.config.heuristic.selector.SelectorConfig['NearbySelectionConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'NearbySelectionConfig': ...
    def getBetaDistributionAlpha(self) -> float: ...
    def getBetaDistributionBeta(self) -> float: ...
    def getBlockDistributionSizeMaximum(self) -> int: ...
    def getBlockDistributionSizeMinimum(self) -> int: ...
    def getBlockDistributionSizeRatio(self) -> float: ...
    def getBlockDistributionUniformDistributionProbability(self) -> float: ...
    def getLinearDistributionSizeMaximum(self) -> int: ...
    def getNearbyDistanceMeterClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyDistanceMeter]: ...
    def getNearbySelectionDistributionType(self) -> 'NearbySelectionDistributionType': ...
    def getOriginEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getOriginSubListSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig: ...
    def getOriginValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def getParabolicDistributionSizeMaximum(self) -> int: ...
    def inherit(self, nearbySelectionConfig: 'NearbySelectionConfig') -> 'NearbySelectionConfig': ...
    def setBetaDistributionAlpha(self, double: float) -> None: ...
    def setBetaDistributionBeta(self, double: float) -> None: ...
    def setBlockDistributionSizeMaximum(self, integer: int) -> None: ...
    def setBlockDistributionSizeMinimum(self, integer: int) -> None: ...
    def setBlockDistributionSizeRatio(self, double: float) -> None: ...
    def setBlockDistributionUniformDistributionProbability(self, double: float) -> None: ...
    def setLinearDistributionSizeMaximum(self, integer: int) -> None: ...
    def setNearbyDistanceMeterClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyDistanceMeter]) -> None: ...
    def setNearbySelectionDistributionType(self, nearbySelectionDistributionType: 'NearbySelectionDistributionType') -> None: ...
    def setOriginEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setOriginSubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> None: ...
    def setOriginValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def setParabolicDistributionSizeMaximum(self, integer: int) -> None: ...
    def validateNearby(self, selectionCacheType: org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType, selectionOrder: org.optaplanner.core.config.heuristic.selector.common.SelectionOrder) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withBetaDistributionAlpha(self, double: float) -> 'NearbySelectionConfig': ...
    def withBetaDistributionBeta(self, double: float) -> 'NearbySelectionConfig': ...
    def withBlockDistributionSizeMaximum(self, integer: int) -> 'NearbySelectionConfig': ...
    def withBlockDistributionSizeMinimum(self, integer: int) -> 'NearbySelectionConfig': ...
    def withBlockDistributionSizeRatio(self, double: float) -> 'NearbySelectionConfig': ...
    def withBlockDistributionUniformDistributionProbability(self, double: float) -> 'NearbySelectionConfig': ...
    def withLinearDistributionSizeMaximum(self, integer: int) -> 'NearbySelectionConfig': ...
    def withNearbyDistanceMeterClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.nearby.NearbyDistanceMeter]) -> 'NearbySelectionConfig': ...
    def withNearbySelectionDistributionType(self, nearbySelectionDistributionType: 'NearbySelectionDistributionType') -> 'NearbySelectionConfig': ...
    def withOriginEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'NearbySelectionConfig': ...
    def withOriginSubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> 'NearbySelectionConfig': ...
    def withOriginValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'NearbySelectionConfig': ...
    def withParabolicDistributionSizeMaximum(self, integer: int) -> 'NearbySelectionConfig': ...

class NearbySelectionDistributionType(java.lang.Enum['NearbySelectionDistributionType']):
    BLOCK_DISTRIBUTION: typing.ClassVar['NearbySelectionDistributionType'] = ...
    LINEAR_DISTRIBUTION: typing.ClassVar['NearbySelectionDistributionType'] = ...
    PARABOLIC_DISTRIBUTION: typing.ClassVar['NearbySelectionDistributionType'] = ...
    BETA_DISTRIBUTION: typing.ClassVar['NearbySelectionDistributionType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'NearbySelectionDistributionType': ...
    @staticmethod
    def values() -> typing.MutableSequence['NearbySelectionDistributionType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.common.nearby")``.

    NearbySelectionConfig: typing.Type[NearbySelectionConfig]
    NearbySelectionDistributionType: typing.Type[NearbySelectionDistributionType]
