
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util.function
import org.optaplanner.core.config.heuristic.selector.list
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.heuristic.selector.move.generic.list.kopt
import org.optaplanner.core.config.heuristic.selector.value
import typing



class ListChangeMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['ListChangeMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'ListChangeMoveSelectorConfig': ...
    def getDestinationSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.list.DestinationSelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, listChangeMoveSelectorConfig: 'ListChangeMoveSelectorConfig') -> 'ListChangeMoveSelectorConfig': ...
    def setDestinationSelectorConfig(self, destinationSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.DestinationSelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withDestinationSelectorConfig(self, destinationSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.DestinationSelectorConfig) -> 'ListChangeMoveSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'ListChangeMoveSelectorConfig': ...

class ListSwapMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['ListSwapMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'ListSwapMoveSelectorConfig': ...
    def getSecondaryValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, listSwapMoveSelectorConfig: 'ListSwapMoveSelectorConfig') -> 'ListSwapMoveSelectorConfig': ...
    def setSecondaryValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withSecondaryValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'ListSwapMoveSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'ListSwapMoveSelectorConfig': ...

class SubListChangeMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['SubListChangeMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'SubListChangeMoveSelectorConfig': ...
    def getDestinationSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.list.DestinationSelectorConfig: ...
    def getMaximumSubListSize(self) -> int: ...
    def getMinimumSubListSize(self) -> int: ...
    def getSelectReversingMoveToo(self) -> bool: ...
    def getSubListSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig: ...
    def inherit(self, subListChangeMoveSelectorConfig: 'SubListChangeMoveSelectorConfig') -> 'SubListChangeMoveSelectorConfig': ...
    def setDestinationSelectorConfig(self, destinationSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.DestinationSelectorConfig) -> None: ...
    def setMaximumSubListSize(self, integer: int) -> None: ...
    def setMinimumSubListSize(self, integer: int) -> None: ...
    def setSelectReversingMoveToo(self, boolean: bool) -> None: ...
    def setSubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withDestinationSelectorConfig(self, destinationSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.DestinationSelectorConfig) -> 'SubListChangeMoveSelectorConfig': ...
    def withSelectReversingMoveToo(self, boolean: bool) -> 'SubListChangeMoveSelectorConfig': ...
    def withSubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> 'SubListChangeMoveSelectorConfig': ...

class SubListSwapMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['SubListSwapMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'SubListSwapMoveSelectorConfig': ...
    def getMaximumSubListSize(self) -> int: ...
    def getMinimumSubListSize(self) -> int: ...
    def getSecondarySubListSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig: ...
    def getSelectReversingMoveToo(self) -> bool: ...
    def getSubListSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig: ...
    def inherit(self, subListSwapMoveSelectorConfig: 'SubListSwapMoveSelectorConfig') -> 'SubListSwapMoveSelectorConfig': ...
    def setMaximumSubListSize(self, integer: int) -> None: ...
    def setMinimumSubListSize(self, integer: int) -> None: ...
    def setSecondarySubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> None: ...
    def setSelectReversingMoveToo(self, boolean: bool) -> None: ...
    def setSubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withSecondarySubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> 'SubListSwapMoveSelectorConfig': ...
    def withSelectReversingMoveToo(self, boolean: bool) -> 'SubListSwapMoveSelectorConfig': ...
    def withSubListSelectorConfig(self, subListSelectorConfig: org.optaplanner.core.config.heuristic.selector.list.SubListSelectorConfig) -> 'SubListSwapMoveSelectorConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.move.generic.list")``.

    ListChangeMoveSelectorConfig: typing.Type[ListChangeMoveSelectorConfig]
    ListSwapMoveSelectorConfig: typing.Type[ListSwapMoveSelectorConfig]
    SubListChangeMoveSelectorConfig: typing.Type[SubListChangeMoveSelectorConfig]
    SubListSwapMoveSelectorConfig: typing.Type[SubListSwapMoveSelectorConfig]
    kopt: org.optaplanner.core.config.heuristic.selector.move.generic.list.kopt.__module_protocol__
