
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.function
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.impl.heuristic.selector.common.decorator
import typing



class CartesianProductMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['CartesianProductMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]): ...
    def copyConfig(self) -> 'CartesianProductMoveSelectorConfig': ...
    def extractLeafMoveSelectorConfigsIntoList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def getIgnoreEmptyChildIterators(self) -> bool: ...
    def getMoveSelectorConfigList(self) -> java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]: ...
    def getMoveSelectorList(self) -> java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]: ...
    def inherit(self, cartesianProductMoveSelectorConfig: 'CartesianProductMoveSelectorConfig') -> 'CartesianProductMoveSelectorConfig': ...
    def setIgnoreEmptyChildIterators(self, boolean: bool) -> None: ...
    def setMoveSelectorConfigList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def setMoveSelectorList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withIgnoreEmptyChildIterators(self, boolean: bool) -> 'CartesianProductMoveSelectorConfig': ...
    def withMoveSelectorList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> 'CartesianProductMoveSelectorConfig': ...
    def withMoveSelectors(self, *moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'CartesianProductMoveSelectorConfig': ...

class UnionMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['UnionMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]): ...
    def copyConfig(self) -> 'UnionMoveSelectorConfig': ...
    def extractLeafMoveSelectorConfigsIntoList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def getMoveSelectorConfigList(self) -> java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]: ...
    def getMoveSelectorList(self) -> java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]: ...
    def getSelectorProbabilityWeightFactoryClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory]: ...
    def inherit(self, unionMoveSelectorConfig: 'UnionMoveSelectorConfig') -> 'UnionMoveSelectorConfig': ...
    def setMoveSelectorConfigList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def setMoveSelectorList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def setSelectorProbabilityWeightFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withMoveSelectorList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> 'UnionMoveSelectorConfig': ...
    def withMoveSelectors(self, *moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'UnionMoveSelectorConfig': ...
    def withSelectorProbabilityWeightFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory]) -> 'UnionMoveSelectorConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.move.composite")``.

    CartesianProductMoveSelectorConfig: typing.Type[CartesianProductMoveSelectorConfig]
    UnionMoveSelectorConfig: typing.Type[UnionMoveSelectorConfig]
