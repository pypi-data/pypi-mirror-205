
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import org.optaplanner.core.config.heuristic.selector.common.decorator
import org.optaplanner.core.config.heuristic.selector.common.nearby
import typing



class SelectionCacheType(java.lang.Enum['SelectionCacheType']):
    JUST_IN_TIME: typing.ClassVar['SelectionCacheType'] = ...
    STEP: typing.ClassVar['SelectionCacheType'] = ...
    PHASE: typing.ClassVar['SelectionCacheType'] = ...
    SOLVER: typing.ClassVar['SelectionCacheType'] = ...
    def isCached(self) -> bool: ...
    def isNotCached(self) -> bool: ...
    @staticmethod
    def max(selectionCacheType: 'SelectionCacheType', selectionCacheType2: 'SelectionCacheType') -> 'SelectionCacheType': ...
    @staticmethod
    def resolve(selectionCacheType: 'SelectionCacheType', selectionCacheType2: 'SelectionCacheType') -> 'SelectionCacheType': ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SelectionCacheType': ...
    @staticmethod
    def values() -> typing.MutableSequence['SelectionCacheType']: ...

class SelectionOrder(java.lang.Enum['SelectionOrder']):
    INHERIT: typing.ClassVar['SelectionOrder'] = ...
    ORIGINAL: typing.ClassVar['SelectionOrder'] = ...
    SORTED: typing.ClassVar['SelectionOrder'] = ...
    RANDOM: typing.ClassVar['SelectionOrder'] = ...
    SHUFFLED: typing.ClassVar['SelectionOrder'] = ...
    PROBABILISTIC: typing.ClassVar['SelectionOrder'] = ...
    @staticmethod
    def fromRandomSelectionBoolean(boolean: bool) -> 'SelectionOrder': ...
    @staticmethod
    def resolve(selectionOrder: 'SelectionOrder', selectionOrder2: 'SelectionOrder') -> 'SelectionOrder': ...
    def toRandomSelectionBoolean(self) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SelectionOrder': ...
    @staticmethod
    def values() -> typing.MutableSequence['SelectionOrder']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.common")``.

    SelectionCacheType: typing.Type[SelectionCacheType]
    SelectionOrder: typing.Type[SelectionOrder]
    decorator: org.optaplanner.core.config.heuristic.selector.common.decorator.__module_protocol__
    nearby: org.optaplanner.core.config.heuristic.selector.common.nearby.__module_protocol__
