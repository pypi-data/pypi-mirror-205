
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.function
import org.optaplanner.core.config.heuristic.selector
import org.optaplanner.core.config.heuristic.selector.entity
import typing



class PillarSelectorConfig(org.optaplanner.core.config.heuristic.selector.SelectorConfig['PillarSelectorConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'PillarSelectorConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getMaximumSubPillarSize(self) -> int: ...
    def getMinimumSubPillarSize(self) -> int: ...
    def inherit(self, pillarSelectorConfig: 'PillarSelectorConfig') -> 'PillarSelectorConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setMaximumSubPillarSize(self, integer: int) -> None: ...
    def setMinimumSubPillarSize(self, integer: int) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'PillarSelectorConfig': ...
    def withMaximumSubPillarSize(self, integer: int) -> 'PillarSelectorConfig': ...
    def withMinimumSubPillarSize(self, integer: int) -> 'PillarSelectorConfig': ...

class SubPillarConfigPolicy:
    def equals(self, object: typing.Any) -> bool: ...
    def getEntityComparator(self) -> java.util.Comparator[typing.Any]: ...
    def getMaximumSubPillarSize(self) -> int: ...
    def getMinimumSubPillarSize(self) -> int: ...
    def hashCode(self) -> int: ...
    def isSubPillarEnabled(self) -> bool: ...
    @staticmethod
    def sequential(int: int, int2: int, comparator: typing.Union[java.util.Comparator[typing.Any], typing.Callable[[typing.Any, typing.Any], int]]) -> 'SubPillarConfigPolicy': ...
    @staticmethod
    def sequentialUnlimited(comparator: typing.Union[java.util.Comparator[typing.Any], typing.Callable[[typing.Any, typing.Any], int]]) -> 'SubPillarConfigPolicy': ...
    @staticmethod
    def withSubpillars(int: int, int2: int) -> 'SubPillarConfigPolicy': ...
    @staticmethod
    def withSubpillarsUnlimited() -> 'SubPillarConfigPolicy': ...
    @staticmethod
    def withoutSubpillars() -> 'SubPillarConfigPolicy': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.entity.pillar")``.

    PillarSelectorConfig: typing.Type[PillarSelectorConfig]
    SubPillarConfigPolicy: typing.Type[SubPillarConfigPolicy]
