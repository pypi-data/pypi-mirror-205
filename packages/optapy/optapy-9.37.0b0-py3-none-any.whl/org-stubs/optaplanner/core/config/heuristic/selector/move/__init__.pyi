
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import org.optaplanner.core.config.heuristic.selector
import org.optaplanner.core.config.heuristic.selector.common
import org.optaplanner.core.config.heuristic.selector.common.decorator
import org.optaplanner.core.config.heuristic.selector.move.composite
import org.optaplanner.core.config.heuristic.selector.move.factory
import org.optaplanner.core.config.heuristic.selector.move.generic
import org.optaplanner.core.impl.heuristic.selector.common.decorator
import typing



_MoveSelectorConfig__Config_ = typing.TypeVar('_MoveSelectorConfig__Config_', bound='MoveSelectorConfig')  # <Config_>
class MoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.SelectorConfig[_MoveSelectorConfig__Config_], typing.Generic[_MoveSelectorConfig__Config_]):
    def __init__(self): ...
    def extractLeafMoveSelectorConfigsIntoList(self, list: java.util.List['MoveSelectorConfig']) -> None: ...
    def getCacheType(self) -> org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType: ...
    def getFilterClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter]: ...
    def getFixedProbabilityWeight(self) -> float: ...
    def getProbabilityWeightFactoryClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory]: ...
    def getSelectedCountLimit(self) -> int: ...
    def getSelectionOrder(self) -> org.optaplanner.core.config.heuristic.selector.common.SelectionOrder: ...
    def getSorterClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorter]: ...
    def getSorterComparatorClass(self) -> typing.Type[java.util.Comparator]: ...
    def getSorterOrder(self) -> org.optaplanner.core.config.heuristic.selector.common.decorator.SelectionSorterOrder: ...
    def getSorterWeightFactoryClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory]: ...
    def inherit(self, config_: _MoveSelectorConfig__Config_) -> _MoveSelectorConfig__Config_: ...
    def inheritFolded(self, moveSelectorConfig: 'MoveSelectorConfig'[typing.Any]) -> None: ...
    def setCacheType(self, selectionCacheType: org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType) -> None: ...
    def setFilterClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter]) -> None: ...
    def setFixedProbabilityWeight(self, double: float) -> None: ...
    def setProbabilityWeightFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory]) -> None: ...
    def setSelectedCountLimit(self, long: int) -> None: ...
    def setSelectionOrder(self, selectionOrder: org.optaplanner.core.config.heuristic.selector.common.SelectionOrder) -> None: ...
    def setSorterClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorter]) -> None: ...
    def setSorterComparatorClass(self, class_: typing.Type[java.util.Comparator]) -> None: ...
    def setSorterOrder(self, selectionSorterOrder: org.optaplanner.core.config.heuristic.selector.common.decorator.SelectionSorterOrder) -> None: ...
    def setSorterWeightFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory]) -> None: ...
    def withCacheType(self, selectionCacheType: org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType) -> _MoveSelectorConfig__Config_: ...
    def withFilterClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter]) -> _MoveSelectorConfig__Config_: ...
    def withFixedProbabilityWeight(self, double: float) -> _MoveSelectorConfig__Config_: ...
    def withProbabilityWeightFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionProbabilityWeightFactory]) -> _MoveSelectorConfig__Config_: ...
    def withSelectedCountLimit(self, long: int) -> _MoveSelectorConfig__Config_: ...
    def withSelectionOrder(self, selectionOrder: org.optaplanner.core.config.heuristic.selector.common.SelectionOrder) -> _MoveSelectorConfig__Config_: ...
    def withSorterClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorter]) -> _MoveSelectorConfig__Config_: ...
    def withSorterComparatorClass(self, class_: typing.Type[java.util.Comparator]) -> _MoveSelectorConfig__Config_: ...
    def withSorterOrder(self, selectionSorterOrder: org.optaplanner.core.config.heuristic.selector.common.decorator.SelectionSorterOrder) -> _MoveSelectorConfig__Config_: ...
    def withSorterWeightFactoryClass(self, class_: typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory]) -> _MoveSelectorConfig__Config_: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.move")``.

    MoveSelectorConfig: typing.Type[MoveSelectorConfig]
    composite: org.optaplanner.core.config.heuristic.selector.move.composite.__module_protocol__
    factory: org.optaplanner.core.config.heuristic.selector.move.factory.__module_protocol__
    generic: org.optaplanner.core.config.heuristic.selector.move.generic.__module_protocol__
