
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util.function
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.heuristic.selector.value
import org.optaplanner.core.config.heuristic.selector.value.chained
import typing



class KOptMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['KOptMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'KOptMoveSelectorConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, kOptMoveSelectorConfig: 'KOptMoveSelectorConfig') -> 'KOptMoveSelectorConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'KOptMoveSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'KOptMoveSelectorConfig': ...

class SubChainChangeMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['SubChainChangeMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'SubChainChangeMoveSelectorConfig': ...
    def getEntityClass(self) -> typing.Type[typing.Any]: ...
    def getSelectReversingMoveToo(self) -> bool: ...
    def getSubChainSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, subChainChangeMoveSelectorConfig: 'SubChainChangeMoveSelectorConfig') -> 'SubChainChangeMoveSelectorConfig': ...
    def setEntityClass(self, class_: typing.Type[typing.Any]) -> None: ...
    def setSelectReversingMoveToo(self, boolean: bool) -> None: ...
    def setSubChainSelectorConfig(self, subChainSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntityClass(self, class_: typing.Type[typing.Any]) -> 'SubChainChangeMoveSelectorConfig': ...
    def withSelectReversingMoveToo(self, boolean: bool) -> 'SubChainChangeMoveSelectorConfig': ...
    def withSubChainSelectorConfig(self, subChainSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig) -> 'SubChainChangeMoveSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'SubChainChangeMoveSelectorConfig': ...

class SubChainSwapMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['SubChainSwapMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'SubChainSwapMoveSelectorConfig': ...
    def getEntityClass(self) -> typing.Type[typing.Any]: ...
    def getSecondarySubChainSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig: ...
    def getSelectReversingMoveToo(self) -> bool: ...
    def getSubChainSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig: ...
    def inherit(self, subChainSwapMoveSelectorConfig: 'SubChainSwapMoveSelectorConfig') -> 'SubChainSwapMoveSelectorConfig': ...
    def setEntityClass(self, class_: typing.Type[typing.Any]) -> None: ...
    def setSecondarySubChainSelectorConfig(self, subChainSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig) -> None: ...
    def setSelectReversingMoveToo(self, boolean: bool) -> None: ...
    def setSubChainSelectorConfig(self, subChainSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntityClass(self, class_: typing.Type[typing.Any]) -> 'SubChainSwapMoveSelectorConfig': ...
    def withSecondarySubChainSelectorConfig(self, subChainSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig) -> 'SubChainSwapMoveSelectorConfig': ...
    def withSelectReversingMoveToo(self, boolean: bool) -> 'SubChainSwapMoveSelectorConfig': ...
    def withSubChainSelectorConfig(self, subChainSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.chained.SubChainSelectorConfig) -> 'SubChainSwapMoveSelectorConfig': ...

class TailChainSwapMoveSelectorConfig(org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig['TailChainSwapMoveSelectorConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'TailChainSwapMoveSelectorConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, tailChainSwapMoveSelectorConfig: 'TailChainSwapMoveSelectorConfig') -> 'TailChainSwapMoveSelectorConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'TailChainSwapMoveSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'TailChainSwapMoveSelectorConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.move.generic.chained")``.

    KOptMoveSelectorConfig: typing.Type[KOptMoveSelectorConfig]
    SubChainChangeMoveSelectorConfig: typing.Type[SubChainChangeMoveSelectorConfig]
    SubChainSwapMoveSelectorConfig: typing.Type[SubChainSwapMoveSelectorConfig]
    TailChainSwapMoveSelectorConfig: typing.Type[TailChainSwapMoveSelectorConfig]
