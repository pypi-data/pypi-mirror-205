
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util.function
import org.optaplanner.core.config.heuristic.selector
import org.optaplanner.core.config.heuristic.selector.common.nearby
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.value
import typing



class DestinationSelectorConfig(org.optaplanner.core.config.heuristic.selector.SelectorConfig['DestinationSelectorConfig']):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, destinationSelectorConfig: 'DestinationSelectorConfig'): ...
    def copyConfig(self) -> 'DestinationSelectorConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getNearbySelectionConfig(self) -> org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, destinationSelectorConfig: 'DestinationSelectorConfig') -> 'DestinationSelectorConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setNearbySelectionConfig(self, nearbySelectionConfig: org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'DestinationSelectorConfig': ...
    def withNearbySelectionConfig(self, nearbySelectionConfig: org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig) -> 'DestinationSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'DestinationSelectorConfig': ...

class SubListSelectorConfig(org.optaplanner.core.config.heuristic.selector.SelectorConfig['SubListSelectorConfig']):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, subListSelectorConfig: 'SubListSelectorConfig'): ...
    def copyConfig(self) -> 'SubListSelectorConfig': ...
    def getId(self) -> str: ...
    def getMaximumSubListSize(self) -> int: ...
    def getMimicSelectorRef(self) -> str: ...
    def getMinimumSubListSize(self) -> int: ...
    def getNearbySelectionConfig(self) -> org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, subListSelectorConfig: 'SubListSelectorConfig') -> 'SubListSelectorConfig': ...
    def setId(self, string: str) -> None: ...
    def setMaximumSubListSize(self, integer: int) -> None: ...
    def setMimicSelectorRef(self, string: str) -> None: ...
    def setMinimumSubListSize(self, integer: int) -> None: ...
    def setNearbySelectionConfig(self, nearbySelectionConfig: org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withId(self, string: str) -> 'SubListSelectorConfig': ...
    def withMaximumSubListSize(self, integer: int) -> 'SubListSelectorConfig': ...
    def withMimicSelectorRef(self, string: str) -> 'SubListSelectorConfig': ...
    def withMinimumSubListSize(self, integer: int) -> 'SubListSelectorConfig': ...
    def withNearbySelectionConfig(self, nearbySelectionConfig: org.optaplanner.core.config.heuristic.selector.common.nearby.NearbySelectionConfig) -> 'SubListSelectorConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'SubListSelectorConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.heuristic.selector.list")``.

    DestinationSelectorConfig: typing.Type[DestinationSelectorConfig]
    SubListSelectorConfig: typing.Type[SubListSelectorConfig]
