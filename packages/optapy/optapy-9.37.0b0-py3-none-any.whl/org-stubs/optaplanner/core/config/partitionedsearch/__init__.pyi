
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.function
import org.optaplanner.core.config.phase
import org.optaplanner.core.impl.partitionedsearch.partitioner
import typing



class PartitionedSearchPhaseConfig(org.optaplanner.core.config.phase.PhaseConfig['PartitionedSearchPhaseConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    ACTIVE_THREAD_COUNT_AUTO: typing.ClassVar[str] = ...
    ACTIVE_THREAD_COUNT_UNLIMITED: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'PartitionedSearchPhaseConfig': ...
    def getPhaseConfigList(self) -> java.util.List[org.optaplanner.core.config.phase.PhaseConfig]: ...
    def getRunnablePartThreadLimit(self) -> str: ...
    def getSolutionPartitionerClass(self) -> typing.Type[org.optaplanner.core.impl.partitionedsearch.partitioner.SolutionPartitioner[typing.Any]]: ...
    def getSolutionPartitionerCustomProperties(self) -> java.util.Map[str, str]: ...
    def inherit(self, partitionedSearchPhaseConfig: 'PartitionedSearchPhaseConfig') -> 'PartitionedSearchPhaseConfig': ...
    def setPhaseConfigList(self, list: java.util.List[org.optaplanner.core.config.phase.PhaseConfig]) -> None: ...
    def setRunnablePartThreadLimit(self, string: str) -> None: ...
    def setSolutionPartitionerClass(self, class_: typing.Type[org.optaplanner.core.impl.partitionedsearch.partitioner.SolutionPartitioner[typing.Any]]) -> None: ...
    def setSolutionPartitionerCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withPhaseConfigList(self, list: java.util.List[org.optaplanner.core.config.phase.PhaseConfig]) -> 'PartitionedSearchPhaseConfig': ...
    def withPhaseConfigs(self, *phaseConfig: org.optaplanner.core.config.phase.PhaseConfig) -> 'PartitionedSearchPhaseConfig': ...
    def withRunnablePartThreadLimit(self, string: str) -> 'PartitionedSearchPhaseConfig': ...
    def withSolutionPartitionerClass(self, class_: typing.Type[org.optaplanner.core.impl.partitionedsearch.partitioner.SolutionPartitioner[typing.Any]]) -> 'PartitionedSearchPhaseConfig': ...
    def withSolutionPartitionerCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'PartitionedSearchPhaseConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.partitionedsearch")``.

    PartitionedSearchPhaseConfig: typing.Type[PartitionedSearchPhaseConfig]
