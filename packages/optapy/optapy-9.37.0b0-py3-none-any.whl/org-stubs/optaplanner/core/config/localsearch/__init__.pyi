
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util.function
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.localsearch.decider
import org.optaplanner.core.config.localsearch.decider.acceptor
import org.optaplanner.core.config.localsearch.decider.forager
import org.optaplanner.core.config.phase
import typing



class LocalSearchPhaseConfig(org.optaplanner.core.config.phase.PhaseConfig['LocalSearchPhaseConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'LocalSearchPhaseConfig': ...
    def getAcceptorConfig(self) -> org.optaplanner.core.config.localsearch.decider.acceptor.LocalSearchAcceptorConfig: ...
    def getForagerConfig(self) -> org.optaplanner.core.config.localsearch.decider.forager.LocalSearchForagerConfig: ...
    def getLocalSearchType(self) -> 'LocalSearchType': ...
    def getMoveSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig: ...
    def inherit(self, localSearchPhaseConfig: 'LocalSearchPhaseConfig') -> 'LocalSearchPhaseConfig': ...
    def setAcceptorConfig(self, localSearchAcceptorConfig: org.optaplanner.core.config.localsearch.decider.acceptor.LocalSearchAcceptorConfig) -> None: ...
    def setForagerConfig(self, localSearchForagerConfig: org.optaplanner.core.config.localsearch.decider.forager.LocalSearchForagerConfig) -> None: ...
    def setLocalSearchType(self, localSearchType: 'LocalSearchType') -> None: ...
    def setMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withAcceptorConfig(self, localSearchAcceptorConfig: org.optaplanner.core.config.localsearch.decider.acceptor.LocalSearchAcceptorConfig) -> 'LocalSearchPhaseConfig': ...
    def withForagerConfig(self, localSearchForagerConfig: org.optaplanner.core.config.localsearch.decider.forager.LocalSearchForagerConfig) -> 'LocalSearchPhaseConfig': ...
    def withLocalSearchType(self, localSearchType: 'LocalSearchType') -> 'LocalSearchPhaseConfig': ...
    def withMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'LocalSearchPhaseConfig': ...

class LocalSearchType(java.lang.Enum['LocalSearchType']):
    HILL_CLIMBING: typing.ClassVar['LocalSearchType'] = ...
    TABU_SEARCH: typing.ClassVar['LocalSearchType'] = ...
    SIMULATED_ANNEALING: typing.ClassVar['LocalSearchType'] = ...
    LATE_ACCEPTANCE: typing.ClassVar['LocalSearchType'] = ...
    GREAT_DELUGE: typing.ClassVar['LocalSearchType'] = ...
    VARIABLE_NEIGHBORHOOD_DESCENT: typing.ClassVar['LocalSearchType'] = ...
    @staticmethod
    def getBluePrintTypes() -> typing.MutableSequence['LocalSearchType']: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LocalSearchType': ...
    @staticmethod
    def values() -> typing.MutableSequence['LocalSearchType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.localsearch")``.

    LocalSearchPhaseConfig: typing.Type[LocalSearchPhaseConfig]
    LocalSearchType: typing.Type[LocalSearchType]
    decider: org.optaplanner.core.config.localsearch.decider.__module_protocol__
