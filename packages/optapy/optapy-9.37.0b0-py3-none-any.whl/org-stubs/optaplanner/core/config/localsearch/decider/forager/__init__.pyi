
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util.function
import org.optaplanner.core.config
import org.optaplanner.core.impl.localsearch.decider.forager.finalist
import typing



class FinalistPodiumType(java.lang.Enum['FinalistPodiumType']):
    HIGHEST_SCORE: typing.ClassVar['FinalistPodiumType'] = ...
    STRATEGIC_OSCILLATION: typing.ClassVar['FinalistPodiumType'] = ...
    STRATEGIC_OSCILLATION_BY_LEVEL: typing.ClassVar['FinalistPodiumType'] = ...
    STRATEGIC_OSCILLATION_BY_LEVEL_ON_BEST_SCORE: typing.ClassVar['FinalistPodiumType'] = ...
    _buildFinalistPodium__Solution_ = typing.TypeVar('_buildFinalistPodium__Solution_')  # <Solution_>
    def buildFinalistPodium(self) -> org.optaplanner.core.impl.localsearch.decider.forager.finalist.FinalistPodium[_buildFinalistPodium__Solution_]: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'FinalistPodiumType': ...
    @staticmethod
    def values() -> typing.MutableSequence['FinalistPodiumType']: ...

class LocalSearchForagerConfig(org.optaplanner.core.config.AbstractConfig['LocalSearchForagerConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'LocalSearchForagerConfig': ...
    def getAcceptedCountLimit(self) -> int: ...
    def getBreakTieRandomly(self) -> bool: ...
    def getFinalistPodiumType(self) -> FinalistPodiumType: ...
    def getPickEarlyType(self) -> 'LocalSearchPickEarlyType': ...
    def inherit(self, localSearchForagerConfig: 'LocalSearchForagerConfig') -> 'LocalSearchForagerConfig': ...
    def setAcceptedCountLimit(self, integer: int) -> None: ...
    def setBreakTieRandomly(self, boolean: bool) -> None: ...
    def setFinalistPodiumType(self, finalistPodiumType: FinalistPodiumType) -> None: ...
    def setPickEarlyType(self, localSearchPickEarlyType: 'LocalSearchPickEarlyType') -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withAcceptedCountLimit(self, int: int) -> 'LocalSearchForagerConfig': ...
    def withBreakTieRandomly(self, boolean: bool) -> 'LocalSearchForagerConfig': ...
    def withFinalistPodiumType(self, finalistPodiumType: FinalistPodiumType) -> 'LocalSearchForagerConfig': ...
    def withPickEarlyType(self, localSearchPickEarlyType: 'LocalSearchPickEarlyType') -> 'LocalSearchForagerConfig': ...

class LocalSearchPickEarlyType(java.lang.Enum['LocalSearchPickEarlyType']):
    NEVER: typing.ClassVar['LocalSearchPickEarlyType'] = ...
    FIRST_BEST_SCORE_IMPROVING: typing.ClassVar['LocalSearchPickEarlyType'] = ...
    FIRST_LAST_STEP_SCORE_IMPROVING: typing.ClassVar['LocalSearchPickEarlyType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LocalSearchPickEarlyType': ...
    @staticmethod
    def values() -> typing.MutableSequence['LocalSearchPickEarlyType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.localsearch.decider.forager")``.

    FinalistPodiumType: typing.Type[FinalistPodiumType]
    LocalSearchForagerConfig: typing.Type[LocalSearchForagerConfig]
    LocalSearchPickEarlyType: typing.Type[LocalSearchPickEarlyType]
