
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.function
import org.optaplanner.core.config
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.heuristic.selector.value
import typing



_EntityPlacerConfig__Config_ = typing.TypeVar('_EntityPlacerConfig__Config_', bound='EntityPlacerConfig')  # <Config_>
class EntityPlacerConfig(org.optaplanner.core.config.AbstractConfig[_EntityPlacerConfig__Config_], typing.Generic[_EntityPlacerConfig__Config_]):
    def __init__(self): ...

class PooledEntityPlacerConfig(EntityPlacerConfig['PooledEntityPlacerConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'PooledEntityPlacerConfig': ...
    def getMoveSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig: ...
    def inherit(self, pooledEntityPlacerConfig: 'PooledEntityPlacerConfig') -> 'PooledEntityPlacerConfig': ...
    def setMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'PooledEntityPlacerConfig': ...

class QueuedEntityPlacerConfig(EntityPlacerConfig['QueuedEntityPlacerConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'QueuedEntityPlacerConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getMoveSelectorConfigList(self) -> java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]: ...
    def inherit(self, queuedEntityPlacerConfig: 'QueuedEntityPlacerConfig') -> 'QueuedEntityPlacerConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setMoveSelectorConfigList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'QueuedEntityPlacerConfig': ...
    def withMoveSelectorConfigList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> 'QueuedEntityPlacerConfig': ...
    def withMoveSelectorConfigs(self, *moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'QueuedEntityPlacerConfig': ...

class QueuedValuePlacerConfig(EntityPlacerConfig['QueuedValuePlacerConfig']):
    def __init__(self): ...
    def copyConfig(self) -> 'QueuedValuePlacerConfig': ...
    def getEntityClass(self) -> typing.Type[typing.Any]: ...
    def getMoveSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig: ...
    def getValueSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig: ...
    def inherit(self, queuedValuePlacerConfig: 'QueuedValuePlacerConfig') -> 'QueuedValuePlacerConfig': ...
    def setEntityClass(self, class_: typing.Type[typing.Any]) -> None: ...
    def setMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> None: ...
    def setValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> None: ...
    def toString(self) -> str: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntityClass(self, class_: typing.Type[typing.Any]) -> 'QueuedValuePlacerConfig': ...
    def withMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'QueuedValuePlacerConfig': ...
    def withValueSelectorConfig(self, valueSelectorConfig: org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig) -> 'QueuedValuePlacerConfig': ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.constructionheuristic.placer")``.

    EntityPlacerConfig: typing.Type[EntityPlacerConfig]
    PooledEntityPlacerConfig: typing.Type[PooledEntityPlacerConfig]
    QueuedEntityPlacerConfig: typing.Type[QueuedEntityPlacerConfig]
    QueuedValuePlacerConfig: typing.Type[QueuedValuePlacerConfig]
