
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import java.util.function
import org.optaplanner.core.config.constructionheuristic.decider
import org.optaplanner.core.config.constructionheuristic.decider.forager
import org.optaplanner.core.config.constructionheuristic.placer
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.heuristic.selector.value
import org.optaplanner.core.config.phase
import typing



class ConstructionHeuristicPhaseConfig(org.optaplanner.core.config.phase.PhaseConfig['ConstructionHeuristicPhaseConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'ConstructionHeuristicPhaseConfig': ...
    def getConstructionHeuristicType(self) -> 'ConstructionHeuristicType': ...
    def getEntityPlacerConfig(self) -> org.optaplanner.core.config.constructionheuristic.placer.EntityPlacerConfig: ...
    def getEntitySorterManner(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner: ...
    def getForagerConfig(self) -> org.optaplanner.core.config.constructionheuristic.decider.forager.ConstructionHeuristicForagerConfig: ...
    def getMoveSelectorConfigList(self) -> java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]: ...
    def getValueSorterManner(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner: ...
    def inherit(self, constructionHeuristicPhaseConfig: 'ConstructionHeuristicPhaseConfig') -> 'ConstructionHeuristicPhaseConfig': ...
    def setConstructionHeuristicType(self, constructionHeuristicType: 'ConstructionHeuristicType') -> None: ...
    def setEntityPlacerConfig(self, entityPlacerConfig: org.optaplanner.core.config.constructionheuristic.placer.EntityPlacerConfig) -> None: ...
    def setEntitySorterManner(self, entitySorterManner: org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner) -> None: ...
    def setForagerConfig(self, constructionHeuristicForagerConfig: org.optaplanner.core.config.constructionheuristic.decider.forager.ConstructionHeuristicForagerConfig) -> None: ...
    def setMoveSelectorConfigList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> None: ...
    def setValueSorterManner(self, valueSorterManner: org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withConstructionHeuristicType(self, constructionHeuristicType: 'ConstructionHeuristicType') -> 'ConstructionHeuristicPhaseConfig': ...
    def withEntityPlacerConfig(self, entityPlacerConfig: org.optaplanner.core.config.constructionheuristic.placer.EntityPlacerConfig[typing.Any]) -> 'ConstructionHeuristicPhaseConfig': ...
    def withEntitySorterManner(self, entitySorterManner: org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner) -> 'ConstructionHeuristicPhaseConfig': ...
    def withForagerConfig(self, constructionHeuristicForagerConfig: org.optaplanner.core.config.constructionheuristic.decider.forager.ConstructionHeuristicForagerConfig) -> 'ConstructionHeuristicPhaseConfig': ...
    def withMoveSelectorConfigList(self, list: java.util.List[org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig]) -> 'ConstructionHeuristicPhaseConfig': ...
    def withValueSorterManner(self, valueSorterManner: org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner) -> 'ConstructionHeuristicPhaseConfig': ...

class ConstructionHeuristicType(java.lang.Enum['ConstructionHeuristicType']):
    FIRST_FIT: typing.ClassVar['ConstructionHeuristicType'] = ...
    FIRST_FIT_DECREASING: typing.ClassVar['ConstructionHeuristicType'] = ...
    WEAKEST_FIT: typing.ClassVar['ConstructionHeuristicType'] = ...
    WEAKEST_FIT_DECREASING: typing.ClassVar['ConstructionHeuristicType'] = ...
    STRONGEST_FIT: typing.ClassVar['ConstructionHeuristicType'] = ...
    STRONGEST_FIT_DECREASING: typing.ClassVar['ConstructionHeuristicType'] = ...
    ALLOCATE_ENTITY_FROM_QUEUE: typing.ClassVar['ConstructionHeuristicType'] = ...
    ALLOCATE_TO_VALUE_FROM_QUEUE: typing.ClassVar['ConstructionHeuristicType'] = ...
    CHEAPEST_INSERTION: typing.ClassVar['ConstructionHeuristicType'] = ...
    ALLOCATE_FROM_POOL: typing.ClassVar['ConstructionHeuristicType'] = ...
    @staticmethod
    def getBluePrintTypes() -> typing.MutableSequence['ConstructionHeuristicType']: ...
    def getDefaultEntitySorterManner(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner: ...
    def getDefaultValueSorterManner(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ConstructionHeuristicType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ConstructionHeuristicType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.constructionheuristic")``.

    ConstructionHeuristicPhaseConfig: typing.Type[ConstructionHeuristicPhaseConfig]
    ConstructionHeuristicType: typing.Type[ConstructionHeuristicType]
    decider: org.optaplanner.core.config.constructionheuristic.decider.__module_protocol__
    placer: org.optaplanner.core.config.constructionheuristic.placer.__module_protocol__
