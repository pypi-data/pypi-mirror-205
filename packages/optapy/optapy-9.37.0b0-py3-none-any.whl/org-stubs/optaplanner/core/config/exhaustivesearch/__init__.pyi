
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import java.util.function
import org.optaplanner.core.config.heuristic.selector.entity
import org.optaplanner.core.config.heuristic.selector.move
import org.optaplanner.core.config.heuristic.selector.value
import org.optaplanner.core.config.phase
import org.optaplanner.core.impl.exhaustivesearch.node
import typing



class ExhaustiveSearchPhaseConfig(org.optaplanner.core.config.phase.PhaseConfig['ExhaustiveSearchPhaseConfig']):
    XML_ELEMENT_NAME: typing.ClassVar[str] = ...
    def __init__(self): ...
    def copyConfig(self) -> 'ExhaustiveSearchPhaseConfig': ...
    def getEntitySelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig: ...
    def getEntitySorterManner(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner: ...
    def getExhaustiveSearchType(self) -> 'ExhaustiveSearchType': ...
    def getMoveSelectorConfig(self) -> org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig: ...
    def getNodeExplorationType(self) -> 'NodeExplorationType': ...
    def getValueSorterManner(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner: ...
    def inherit(self, exhaustiveSearchPhaseConfig: 'ExhaustiveSearchPhaseConfig') -> 'ExhaustiveSearchPhaseConfig': ...
    def setEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> None: ...
    def setEntitySorterManner(self, entitySorterManner: org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner) -> None: ...
    def setExhaustiveSearchType(self, exhaustiveSearchType: 'ExhaustiveSearchType') -> None: ...
    def setMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> None: ...
    def setNodeExplorationType(self, nodeExplorationType: 'NodeExplorationType') -> None: ...
    def setValueSorterManner(self, valueSorterManner: org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withEntitySelectorConfig(self, entitySelectorConfig: org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig) -> 'ExhaustiveSearchPhaseConfig': ...
    def withEntitySorterManner(self, entitySorterManner: org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner) -> 'ExhaustiveSearchPhaseConfig': ...
    def withExhaustiveSearchType(self, exhaustiveSearchType: 'ExhaustiveSearchType') -> 'ExhaustiveSearchPhaseConfig': ...
    def withMoveSelectorConfig(self, moveSelectorConfig: org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig) -> 'ExhaustiveSearchPhaseConfig': ...
    def withNodeExplorationType(self, nodeExplorationType: 'NodeExplorationType') -> 'ExhaustiveSearchPhaseConfig': ...
    def withValueSorterManner(self, valueSorterManner: org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner) -> 'ExhaustiveSearchPhaseConfig': ...

class ExhaustiveSearchType(java.lang.Enum['ExhaustiveSearchType']):
    BRUTE_FORCE: typing.ClassVar['ExhaustiveSearchType'] = ...
    BRANCH_AND_BOUND: typing.ClassVar['ExhaustiveSearchType'] = ...
    def getDefaultEntitySorterManner(self) -> org.optaplanner.core.config.heuristic.selector.entity.EntitySorterManner: ...
    def getDefaultValueSorterManner(self) -> org.optaplanner.core.config.heuristic.selector.value.ValueSorterManner: ...
    def isScoreBounderEnabled(self) -> bool: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ExhaustiveSearchType': ...
    @staticmethod
    def values() -> typing.MutableSequence['ExhaustiveSearchType']: ...

class NodeExplorationType(java.lang.Enum['NodeExplorationType']):
    ORIGINAL_ORDER: typing.ClassVar['NodeExplorationType'] = ...
    DEPTH_FIRST: typing.ClassVar['NodeExplorationType'] = ...
    BREADTH_FIRST: typing.ClassVar['NodeExplorationType'] = ...
    SCORE_FIRST: typing.ClassVar['NodeExplorationType'] = ...
    OPTIMISTIC_BOUND_FIRST: typing.ClassVar['NodeExplorationType'] = ...
    def buildNodeComparator(self, boolean: bool) -> java.util.Comparator[org.optaplanner.core.impl.exhaustivesearch.node.ExhaustiveSearchNode]: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'NodeExplorationType': ...
    @staticmethod
    def values() -> typing.MutableSequence['NodeExplorationType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.exhaustivesearch")``.

    ExhaustiveSearchPhaseConfig: typing.Type[ExhaustiveSearchPhaseConfig]
    ExhaustiveSearchType: typing.Type[ExhaustiveSearchType]
    NodeExplorationType: typing.Type[NodeExplorationType]
