
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang.annotation
import org.optaplanner.core.api.domain.autodiscover
import org.optaplanner.core.api.domain.lookup
import org.optaplanner.core.api.domain.solution.cloner
import org.optaplanner.core.impl.score.definition
import typing



class PlanningEntityCollectionProperty(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class PlanningEntityProperty(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class PlanningScore(java.lang.annotation.Annotation):
    NO_LEVEL_SIZE: typing.ClassVar[int] = ...
    def bendableHardLevelsSize(self) -> int: ...
    def bendableSoftLevelsSize(self) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def scoreDefinitionClass(self) -> typing.Type[org.optaplanner.core.impl.score.definition.ScoreDefinition]: ...
    def toString(self) -> str: ...
    class NullScoreDefinition(org.optaplanner.core.impl.score.definition.ScoreDefinition): ...

class PlanningSolution(java.lang.annotation.Annotation):
    def autoDiscoverMemberType(self) -> org.optaplanner.core.api.domain.autodiscover.AutoDiscoverMemberType: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def lookUpStrategyType(self) -> org.optaplanner.core.api.domain.lookup.LookUpStrategyType: ...
    def solutionCloner(self) -> typing.Type[org.optaplanner.core.api.domain.solution.cloner.SolutionCloner]: ...
    def toString(self) -> str: ...
    class NullSolutionCloner(org.optaplanner.core.api.domain.solution.cloner.SolutionCloner): ...

class ProblemFactCollectionProperty(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class ProblemFactProperty(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.domain.solution")``.

    PlanningEntityCollectionProperty: typing.Type[PlanningEntityCollectionProperty]
    PlanningEntityProperty: typing.Type[PlanningEntityProperty]
    PlanningScore: typing.Type[PlanningScore]
    PlanningSolution: typing.Type[PlanningSolution]
    ProblemFactCollectionProperty: typing.Type[ProblemFactCollectionProperty]
    ProblemFactProperty: typing.Type[ProblemFactProperty]
    cloner: org.optaplanner.core.api.domain.solution.cloner.__module_protocol__
