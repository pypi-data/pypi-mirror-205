
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.lang.annotation
import java.util
import org.optaplanner.core.api.score.director
import org.optaplanner.core.impl.heuristic.selector.common.decorator
import typing



_AbstractVariableListener__Solution_ = typing.TypeVar('_AbstractVariableListener__Solution_')  # <Solution_>
_AbstractVariableListener__Entity_ = typing.TypeVar('_AbstractVariableListener__Entity_')  # <Entity_>
class AbstractVariableListener(java.io.Closeable, typing.Generic[_AbstractVariableListener__Solution_, _AbstractVariableListener__Entity_]):
    def afterEntityAdded(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_AbstractVariableListener__Solution_], entity_: _AbstractVariableListener__Entity_) -> None: ...
    def afterEntityRemoved(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_AbstractVariableListener__Solution_], entity_: _AbstractVariableListener__Entity_) -> None: ...
    def beforeEntityAdded(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_AbstractVariableListener__Solution_], entity_: _AbstractVariableListener__Entity_) -> None: ...
    def beforeEntityRemoved(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_AbstractVariableListener__Solution_], entity_: _AbstractVariableListener__Entity_) -> None: ...
    def close(self) -> None: ...
    def resetWorkingSolution(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_AbstractVariableListener__Solution_]) -> None: ...

class AnchorShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sourceVariableName(self) -> str: ...
    def toString(self) -> str: ...

class IndexShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sourceVariableName(self) -> str: ...
    def toString(self) -> str: ...

class InverseRelationShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sourceVariableName(self) -> str: ...
    def toString(self) -> str: ...

class NextElementShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sourceVariableName(self) -> str: ...
    def toString(self) -> str: ...

class PiggybackShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def shadowEntityClass(self) -> typing.Type[typing.Any]: ...
    def shadowVariableName(self) -> str: ...
    def toString(self) -> str: ...
    class NullEntityClass: ...

class PlanningListVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def valueRangeProviderRefs(self) -> typing.MutableSequence[str]: ...

class PlanningVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def graphType(self) -> 'PlanningVariableGraphType': ...
    def hashCode(self) -> int: ...
    def nullable(self) -> bool: ...
    def strengthComparatorClass(self) -> typing.Type[java.util.Comparator]: ...
    def strengthWeightFactoryClass(self) -> typing.Type[org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory]: ...
    def toString(self) -> str: ...
    def valueRangeProviderRefs(self) -> typing.MutableSequence[str]: ...
    class NullStrengthComparator(java.util.Comparator):
        def equals(self, object: typing.Any) -> bool: ...
    class NullStrengthWeightFactory(org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionSorterWeightFactory): ...

class PlanningVariableGraphType(java.lang.Enum['PlanningVariableGraphType']):
    NONE: typing.ClassVar['PlanningVariableGraphType'] = ...
    CHAINED: typing.ClassVar['PlanningVariableGraphType'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PlanningVariableGraphType': ...
    @staticmethod
    def values() -> typing.MutableSequence['PlanningVariableGraphType']: ...

class PlanningVariableReference(java.lang.annotation.Annotation):
    def entityClass(self) -> typing.Type[typing.Any]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def variableName(self) -> str: ...
    class NullEntityClass: ...

class PreviousElementShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sourceVariableName(self) -> str: ...
    def toString(self) -> str: ...

class ShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sourceEntityClass(self) -> typing.Type[typing.Any]: ...
    def sourceVariableName(self) -> str: ...
    def toString(self) -> str: ...
    def variableListenerClass(self) -> typing.Type[AbstractVariableListener]: ...
    class List(java.lang.annotation.Annotation):
        def equals(self, object: typing.Any) -> bool: ...
        def hashCode(self) -> int: ...
        def toString(self) -> str: ...
        def value(self) -> typing.MutableSequence['ShadowVariable']: ...
    class NullEntityClass: ...

_ListVariableListener__Solution_ = typing.TypeVar('_ListVariableListener__Solution_')  # <Solution_>
_ListVariableListener__Entity_ = typing.TypeVar('_ListVariableListener__Entity_')  # <Entity_>
_ListVariableListener__Element_ = typing.TypeVar('_ListVariableListener__Element_')  # <Element_>
class ListVariableListener(AbstractVariableListener[_ListVariableListener__Solution_, _ListVariableListener__Entity_], typing.Generic[_ListVariableListener__Solution_, _ListVariableListener__Entity_, _ListVariableListener__Element_]):
    def afterListVariableChanged(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_ListVariableListener__Solution_], entity_: _ListVariableListener__Entity_, int: int, int2: int) -> None: ...
    def afterListVariableElementUnassigned(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_ListVariableListener__Solution_], element_: _ListVariableListener__Element_) -> None: ...
    def beforeListVariableChanged(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_ListVariableListener__Solution_], entity_: _ListVariableListener__Entity_, int: int, int2: int) -> None: ...

_VariableListener__Solution_ = typing.TypeVar('_VariableListener__Solution_')  # <Solution_>
_VariableListener__Entity_ = typing.TypeVar('_VariableListener__Entity_')  # <Entity_>
class VariableListener(AbstractVariableListener[_VariableListener__Solution_, _VariableListener__Entity_], typing.Generic[_VariableListener__Solution_, _VariableListener__Entity_]):
    def afterVariableChanged(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_VariableListener__Solution_], entity_: _VariableListener__Entity_) -> None: ...
    def beforeVariableChanged(self, scoreDirector: org.optaplanner.core.api.score.director.ScoreDirector[_VariableListener__Solution_], entity_: _VariableListener__Entity_) -> None: ...
    def requiresUniqueEntityEvents(self) -> bool: ...

class CustomShadowVariable(java.lang.annotation.Annotation):
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def sources(self) -> typing.MutableSequence[PlanningVariableReference]: ...
    def toString(self) -> str: ...
    def variableListenerClass(self) -> typing.Type[VariableListener]: ...
    def variableListenerRef(self) -> PlanningVariableReference: ...
    class NullVariableListener(VariableListener): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.domain.variable")``.

    AbstractVariableListener: typing.Type[AbstractVariableListener]
    AnchorShadowVariable: typing.Type[AnchorShadowVariable]
    CustomShadowVariable: typing.Type[CustomShadowVariable]
    IndexShadowVariable: typing.Type[IndexShadowVariable]
    InverseRelationShadowVariable: typing.Type[InverseRelationShadowVariable]
    ListVariableListener: typing.Type[ListVariableListener]
    NextElementShadowVariable: typing.Type[NextElementShadowVariable]
    PiggybackShadowVariable: typing.Type[PiggybackShadowVariable]
    PlanningListVariable: typing.Type[PlanningListVariable]
    PlanningVariable: typing.Type[PlanningVariable]
    PlanningVariableGraphType: typing.Type[PlanningVariableGraphType]
    PlanningVariableReference: typing.Type[PlanningVariableReference]
    PreviousElementShadowVariable: typing.Type[PreviousElementShadowVariable]
    ShadowVariable: typing.Type[ShadowVariable]
    VariableListener: typing.Type[VariableListener]
