
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import org.kie.api.runtime.rule
import org.optaplanner.core.api.score
import org.optaplanner.core.api.score.holder
import typing



class SimpleLongScore(org.optaplanner.core.api.score.Score['SimpleLongScore']):
    ZERO: typing.ClassVar['SimpleLongScore'] = ...
    ONE: typing.ClassVar['SimpleLongScore'] = ...
    def abs(self) -> 'SimpleLongScore': ...
    def add(self, simpleLongScore: 'SimpleLongScore') -> 'SimpleLongScore': ...
    def compareTo(self, simpleLongScore: 'SimpleLongScore') -> int: ...
    def divide(self, double: float) -> 'SimpleLongScore': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getScore(self) -> int: ...
    def hashCode(self) -> int: ...
    def initScore(self) -> int: ...
    def isFeasible(self) -> bool: ...
    def multiply(self, double: float) -> 'SimpleLongScore': ...
    @staticmethod
    def of(long: int) -> 'SimpleLongScore': ...
    @staticmethod
    def ofUninitialized(int: int, long: int) -> 'SimpleLongScore': ...
    @staticmethod
    def parseScore(string: str) -> 'SimpleLongScore': ...
    def power(self, double: float) -> 'SimpleLongScore': ...
    def score(self) -> int: ...
    def subtract(self, simpleLongScore: 'SimpleLongScore') -> 'SimpleLongScore': ...
    def toLevelNumbers(self) -> typing.MutableSequence[java.lang.Number]: ...
    def toShortString(self) -> str: ...
    def toString(self) -> str: ...
    def withInitScore(self, int: int) -> 'SimpleLongScore': ...
    def zero(self) -> 'SimpleLongScore': ...

class SimpleLongScoreHolder(org.optaplanner.core.api.score.holder.ScoreHolder[SimpleLongScore]):
    def addConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, long: int) -> None: ...
    def impactScore(self, ruleContext: org.kie.api.runtime.rule.RuleContext, long: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext, long: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext, long: int) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.buildin.simplelong")``.

    SimpleLongScore: typing.Type[SimpleLongScore]
    SimpleLongScoreHolder: typing.Type[SimpleLongScoreHolder]
