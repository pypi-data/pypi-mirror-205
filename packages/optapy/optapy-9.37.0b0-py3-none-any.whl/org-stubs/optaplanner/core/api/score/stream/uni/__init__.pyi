
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import decimal
import java.lang
import java.math
import java.util
import java.util.function
import org.optaplanner.core.api.score
import org.optaplanner.core.api.score.stream
import org.optaplanner.core.api.score.stream.bi
import org.optaplanner.core.api.score.stream.quad
import org.optaplanner.core.api.score.stream.tri
import typing



_UniConstraintBuilder__A = typing.TypeVar('_UniConstraintBuilder__A')  # <A>
_UniConstraintBuilder__Score_ = typing.TypeVar('_UniConstraintBuilder__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class UniConstraintBuilder(org.optaplanner.core.api.score.stream.ConstraintBuilder, typing.Generic[_UniConstraintBuilder__A, _UniConstraintBuilder__Score_]):
    def indictWith(self, function: typing.Union[java.util.function.Function[_UniConstraintBuilder__A, typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any], typing.Set[typing.Any]]], typing.Callable[[_UniConstraintBuilder__A], typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any], typing.Set[typing.Any]]]]) -> 'UniConstraintBuilder'[_UniConstraintBuilder__A, _UniConstraintBuilder__Score_]: ...
    _justifyWith__ConstraintJustification_ = typing.TypeVar('_justifyWith__ConstraintJustification_', bound=org.optaplanner.core.api.score.stream.ConstraintJustification)  # <ConstraintJustification_>
    def justifyWith(self, biFunction: typing.Union[java.util.function.BiFunction[_UniConstraintBuilder__A, _UniConstraintBuilder__Score_, _justifyWith__ConstraintJustification_], typing.Callable[[_UniConstraintBuilder__A, _UniConstraintBuilder__Score_], _justifyWith__ConstraintJustification_]]) -> 'UniConstraintBuilder'[_UniConstraintBuilder__A, _UniConstraintBuilder__Score_]: ...

_UniConstraintCollector__A = typing.TypeVar('_UniConstraintCollector__A')  # <A>
_UniConstraintCollector__ResultContainer_ = typing.TypeVar('_UniConstraintCollector__ResultContainer_')  # <ResultContainer_>
_UniConstraintCollector__Result_ = typing.TypeVar('_UniConstraintCollector__Result_')  # <Result_>
class UniConstraintCollector(typing.Generic[_UniConstraintCollector__A, _UniConstraintCollector__ResultContainer_, _UniConstraintCollector__Result_]):
    def accumulator(self) -> java.util.function.BiFunction[_UniConstraintCollector__ResultContainer_, _UniConstraintCollector__A, java.lang.Runnable]: ...
    def finisher(self) -> java.util.function.Function[_UniConstraintCollector__ResultContainer_, _UniConstraintCollector__Result_]: ...
    def supplier(self) -> java.util.function.Supplier[_UniConstraintCollector__ResultContainer_]: ...

_UniConstraintStream__A = typing.TypeVar('_UniConstraintStream__A')  # <A>
class UniConstraintStream(org.optaplanner.core.api.score.stream.ConstraintStream, typing.Generic[_UniConstraintStream__A]):
    def distinct(self) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    def filter(self, predicate: typing.Union[java.util.function.Predicate[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], bool]]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    _flattenLast__ResultA_ = typing.TypeVar('_flattenLast__ResultA_')  # <ResultA_>
    def flattenLast(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.lang.Iterable[_flattenLast__ResultA_], typing.Sequence[_flattenLast__ResultA_], typing.Set[_flattenLast__ResultA_]]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.lang.Iterable[_flattenLast__ResultA_], typing.Sequence[_flattenLast__ResultA_], typing.Set[_flattenLast__ResultA_]]]]) -> 'UniConstraintStream'[_flattenLast__ResultA_]: ...
    _groupBy_0__GroupKeyA_ = typing.TypeVar('_groupBy_0__GroupKeyA_')  # <GroupKeyA_>
    _groupBy_0__GroupKeyB_ = typing.TypeVar('_groupBy_0__GroupKeyB_')  # <GroupKeyB_>
    _groupBy_1__GroupKey_ = typing.TypeVar('_groupBy_1__GroupKey_')  # <GroupKey_>
    _groupBy_1__ResultContainer_ = typing.TypeVar('_groupBy_1__ResultContainer_')  # <ResultContainer_>
    _groupBy_1__Result_ = typing.TypeVar('_groupBy_1__Result_')  # <Result_>
    _groupBy_2__ResultContainerA_ = typing.TypeVar('_groupBy_2__ResultContainerA_')  # <ResultContainerA_>
    _groupBy_2__ResultA_ = typing.TypeVar('_groupBy_2__ResultA_')  # <ResultA_>
    _groupBy_2__ResultContainerB_ = typing.TypeVar('_groupBy_2__ResultContainerB_')  # <ResultContainerB_>
    _groupBy_2__ResultB_ = typing.TypeVar('_groupBy_2__ResultB_')  # <ResultB_>
    _groupBy_3__GroupKeyA_ = typing.TypeVar('_groupBy_3__GroupKeyA_')  # <GroupKeyA_>
    _groupBy_3__GroupKeyB_ = typing.TypeVar('_groupBy_3__GroupKeyB_')  # <GroupKeyB_>
    _groupBy_3__GroupKeyC_ = typing.TypeVar('_groupBy_3__GroupKeyC_')  # <GroupKeyC_>
    _groupBy_3__GroupKeyD_ = typing.TypeVar('_groupBy_3__GroupKeyD_')  # <GroupKeyD_>
    _groupBy_4__GroupKeyA_ = typing.TypeVar('_groupBy_4__GroupKeyA_')  # <GroupKeyA_>
    _groupBy_4__GroupKeyB_ = typing.TypeVar('_groupBy_4__GroupKeyB_')  # <GroupKeyB_>
    _groupBy_4__GroupKeyC_ = typing.TypeVar('_groupBy_4__GroupKeyC_')  # <GroupKeyC_>
    _groupBy_4__ResultContainerD_ = typing.TypeVar('_groupBy_4__ResultContainerD_')  # <ResultContainerD_>
    _groupBy_4__ResultD_ = typing.TypeVar('_groupBy_4__ResultD_')  # <ResultD_>
    _groupBy_5__GroupKeyA_ = typing.TypeVar('_groupBy_5__GroupKeyA_')  # <GroupKeyA_>
    _groupBy_5__GroupKeyB_ = typing.TypeVar('_groupBy_5__GroupKeyB_')  # <GroupKeyB_>
    _groupBy_5__ResultContainerC_ = typing.TypeVar('_groupBy_5__ResultContainerC_')  # <ResultContainerC_>
    _groupBy_5__ResultC_ = typing.TypeVar('_groupBy_5__ResultC_')  # <ResultC_>
    _groupBy_5__ResultContainerD_ = typing.TypeVar('_groupBy_5__ResultContainerD_')  # <ResultContainerD_>
    _groupBy_5__ResultD_ = typing.TypeVar('_groupBy_5__ResultD_')  # <ResultD_>
    _groupBy_6__GroupKey_ = typing.TypeVar('_groupBy_6__GroupKey_')  # <GroupKey_>
    _groupBy_6__ResultContainerB_ = typing.TypeVar('_groupBy_6__ResultContainerB_')  # <ResultContainerB_>
    _groupBy_6__ResultB_ = typing.TypeVar('_groupBy_6__ResultB_')  # <ResultB_>
    _groupBy_6__ResultContainerC_ = typing.TypeVar('_groupBy_6__ResultContainerC_')  # <ResultContainerC_>
    _groupBy_6__ResultC_ = typing.TypeVar('_groupBy_6__ResultC_')  # <ResultC_>
    _groupBy_6__ResultContainerD_ = typing.TypeVar('_groupBy_6__ResultContainerD_')  # <ResultContainerD_>
    _groupBy_6__ResultD_ = typing.TypeVar('_groupBy_6__ResultD_')  # <ResultD_>
    _groupBy_7__ResultContainerA_ = typing.TypeVar('_groupBy_7__ResultContainerA_')  # <ResultContainerA_>
    _groupBy_7__ResultA_ = typing.TypeVar('_groupBy_7__ResultA_')  # <ResultA_>
    _groupBy_7__ResultContainerB_ = typing.TypeVar('_groupBy_7__ResultContainerB_')  # <ResultContainerB_>
    _groupBy_7__ResultB_ = typing.TypeVar('_groupBy_7__ResultB_')  # <ResultB_>
    _groupBy_7__ResultContainerC_ = typing.TypeVar('_groupBy_7__ResultContainerC_')  # <ResultContainerC_>
    _groupBy_7__ResultC_ = typing.TypeVar('_groupBy_7__ResultC_')  # <ResultC_>
    _groupBy_7__ResultContainerD_ = typing.TypeVar('_groupBy_7__ResultContainerD_')  # <ResultContainerD_>
    _groupBy_7__ResultD_ = typing.TypeVar('_groupBy_7__ResultD_')  # <ResultD_>
    _groupBy_8__GroupKeyA_ = typing.TypeVar('_groupBy_8__GroupKeyA_')  # <GroupKeyA_>
    _groupBy_8__GroupKeyB_ = typing.TypeVar('_groupBy_8__GroupKeyB_')  # <GroupKeyB_>
    _groupBy_8__GroupKeyC_ = typing.TypeVar('_groupBy_8__GroupKeyC_')  # <GroupKeyC_>
    _groupBy_9__GroupKeyA_ = typing.TypeVar('_groupBy_9__GroupKeyA_')  # <GroupKeyA_>
    _groupBy_9__GroupKeyB_ = typing.TypeVar('_groupBy_9__GroupKeyB_')  # <GroupKeyB_>
    _groupBy_9__ResultContainer_ = typing.TypeVar('_groupBy_9__ResultContainer_')  # <ResultContainer_>
    _groupBy_9__Result_ = typing.TypeVar('_groupBy_9__Result_')  # <Result_>
    _groupBy_10__GroupKey_ = typing.TypeVar('_groupBy_10__GroupKey_')  # <GroupKey_>
    _groupBy_10__ResultContainerB_ = typing.TypeVar('_groupBy_10__ResultContainerB_')  # <ResultContainerB_>
    _groupBy_10__ResultB_ = typing.TypeVar('_groupBy_10__ResultB_')  # <ResultB_>
    _groupBy_10__ResultContainerC_ = typing.TypeVar('_groupBy_10__ResultContainerC_')  # <ResultContainerC_>
    _groupBy_10__ResultC_ = typing.TypeVar('_groupBy_10__ResultC_')  # <ResultC_>
    _groupBy_11__ResultContainerA_ = typing.TypeVar('_groupBy_11__ResultContainerA_')  # <ResultContainerA_>
    _groupBy_11__ResultA_ = typing.TypeVar('_groupBy_11__ResultA_')  # <ResultA_>
    _groupBy_11__ResultContainerB_ = typing.TypeVar('_groupBy_11__ResultContainerB_')  # <ResultContainerB_>
    _groupBy_11__ResultB_ = typing.TypeVar('_groupBy_11__ResultB_')  # <ResultB_>
    _groupBy_11__ResultContainerC_ = typing.TypeVar('_groupBy_11__ResultContainerC_')  # <ResultContainerC_>
    _groupBy_11__ResultC_ = typing.TypeVar('_groupBy_11__ResultC_')  # <ResultC_>
    _groupBy_12__GroupKey_ = typing.TypeVar('_groupBy_12__GroupKey_')  # <GroupKey_>
    _groupBy_13__ResultContainer_ = typing.TypeVar('_groupBy_13__ResultContainer_')  # <ResultContainer_>
    _groupBy_13__Result_ = typing.TypeVar('_groupBy_13__Result_')  # <Result_>
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_0__GroupKeyA_], typing.Callable[[_UniConstraintStream__A], _groupBy_0__GroupKeyA_]], function2: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_0__GroupKeyB_], typing.Callable[[_UniConstraintStream__A], _groupBy_0__GroupKeyB_]]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_groupBy_0__GroupKeyA_, _groupBy_0__GroupKeyB_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_1__GroupKey_], typing.Callable[[_UniConstraintStream__A], _groupBy_1__GroupKey_]], uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_1__ResultContainer_, _groupBy_1__Result_]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_groupBy_1__GroupKey_, _groupBy_1__Result_]: ...
    @typing.overload
    def groupBy(self, uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_2__ResultContainerA_, _groupBy_2__ResultA_], uniConstraintCollector2: UniConstraintCollector[_UniConstraintStream__A, _groupBy_2__ResultContainerB_, _groupBy_2__ResultB_]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_groupBy_2__ResultA_, _groupBy_2__ResultB_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_3__GroupKeyA_], typing.Callable[[_UniConstraintStream__A], _groupBy_3__GroupKeyA_]], function2: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_3__GroupKeyB_], typing.Callable[[_UniConstraintStream__A], _groupBy_3__GroupKeyB_]], function3: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_3__GroupKeyC_], typing.Callable[[_UniConstraintStream__A], _groupBy_3__GroupKeyC_]], function4: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_3__GroupKeyD_], typing.Callable[[_UniConstraintStream__A], _groupBy_3__GroupKeyD_]]) -> org.optaplanner.core.api.score.stream.quad.QuadConstraintStream[_groupBy_3__GroupKeyA_, _groupBy_3__GroupKeyB_, _groupBy_3__GroupKeyC_, _groupBy_3__GroupKeyD_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_4__GroupKeyA_], typing.Callable[[_UniConstraintStream__A], _groupBy_4__GroupKeyA_]], function2: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_4__GroupKeyB_], typing.Callable[[_UniConstraintStream__A], _groupBy_4__GroupKeyB_]], function3: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_4__GroupKeyC_], typing.Callable[[_UniConstraintStream__A], _groupBy_4__GroupKeyC_]], uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_4__ResultContainerD_, _groupBy_4__ResultD_]) -> org.optaplanner.core.api.score.stream.quad.QuadConstraintStream[_groupBy_4__GroupKeyA_, _groupBy_4__GroupKeyB_, _groupBy_4__GroupKeyC_, _groupBy_4__ResultD_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_5__GroupKeyA_], typing.Callable[[_UniConstraintStream__A], _groupBy_5__GroupKeyA_]], function2: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_5__GroupKeyB_], typing.Callable[[_UniConstraintStream__A], _groupBy_5__GroupKeyB_]], uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_5__ResultContainerC_, _groupBy_5__ResultC_], uniConstraintCollector2: UniConstraintCollector[_UniConstraintStream__A, _groupBy_5__ResultContainerD_, _groupBy_5__ResultD_]) -> org.optaplanner.core.api.score.stream.quad.QuadConstraintStream[_groupBy_5__GroupKeyA_, _groupBy_5__GroupKeyB_, _groupBy_5__ResultC_, _groupBy_5__ResultD_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_6__GroupKey_], typing.Callable[[_UniConstraintStream__A], _groupBy_6__GroupKey_]], uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_6__ResultContainerB_, _groupBy_6__ResultB_], uniConstraintCollector2: UniConstraintCollector[_UniConstraintStream__A, _groupBy_6__ResultContainerC_, _groupBy_6__ResultC_], uniConstraintCollector3: UniConstraintCollector[_UniConstraintStream__A, _groupBy_6__ResultContainerD_, _groupBy_6__ResultD_]) -> org.optaplanner.core.api.score.stream.quad.QuadConstraintStream[_groupBy_6__GroupKey_, _groupBy_6__ResultB_, _groupBy_6__ResultC_, _groupBy_6__ResultD_]: ...
    @typing.overload
    def groupBy(self, uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_7__ResultContainerA_, _groupBy_7__ResultA_], uniConstraintCollector2: UniConstraintCollector[_UniConstraintStream__A, _groupBy_7__ResultContainerB_, _groupBy_7__ResultB_], uniConstraintCollector3: UniConstraintCollector[_UniConstraintStream__A, _groupBy_7__ResultContainerC_, _groupBy_7__ResultC_], uniConstraintCollector4: UniConstraintCollector[_UniConstraintStream__A, _groupBy_7__ResultContainerD_, _groupBy_7__ResultD_]) -> org.optaplanner.core.api.score.stream.quad.QuadConstraintStream[_groupBy_7__ResultA_, _groupBy_7__ResultB_, _groupBy_7__ResultC_, _groupBy_7__ResultD_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_8__GroupKeyA_], typing.Callable[[_UniConstraintStream__A], _groupBy_8__GroupKeyA_]], function2: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_8__GroupKeyB_], typing.Callable[[_UniConstraintStream__A], _groupBy_8__GroupKeyB_]], function3: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_8__GroupKeyC_], typing.Callable[[_UniConstraintStream__A], _groupBy_8__GroupKeyC_]]) -> org.optaplanner.core.api.score.stream.tri.TriConstraintStream[_groupBy_8__GroupKeyA_, _groupBy_8__GroupKeyB_, _groupBy_8__GroupKeyC_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_9__GroupKeyA_], typing.Callable[[_UniConstraintStream__A], _groupBy_9__GroupKeyA_]], function2: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_9__GroupKeyB_], typing.Callable[[_UniConstraintStream__A], _groupBy_9__GroupKeyB_]], uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_9__ResultContainer_, _groupBy_9__Result_]) -> org.optaplanner.core.api.score.stream.tri.TriConstraintStream[_groupBy_9__GroupKeyA_, _groupBy_9__GroupKeyB_, _groupBy_9__Result_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_10__GroupKey_], typing.Callable[[_UniConstraintStream__A], _groupBy_10__GroupKey_]], uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_10__ResultContainerB_, _groupBy_10__ResultB_], uniConstraintCollector2: UniConstraintCollector[_UniConstraintStream__A, _groupBy_10__ResultContainerC_, _groupBy_10__ResultC_]) -> org.optaplanner.core.api.score.stream.tri.TriConstraintStream[_groupBy_10__GroupKey_, _groupBy_10__ResultB_, _groupBy_10__ResultC_]: ...
    @typing.overload
    def groupBy(self, uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_11__ResultContainerA_, _groupBy_11__ResultA_], uniConstraintCollector2: UniConstraintCollector[_UniConstraintStream__A, _groupBy_11__ResultContainerB_, _groupBy_11__ResultB_], uniConstraintCollector3: UniConstraintCollector[_UniConstraintStream__A, _groupBy_11__ResultContainerC_, _groupBy_11__ResultC_]) -> org.optaplanner.core.api.score.stream.tri.TriConstraintStream[_groupBy_11__ResultA_, _groupBy_11__ResultB_, _groupBy_11__ResultC_]: ...
    @typing.overload
    def groupBy(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _groupBy_12__GroupKey_], typing.Callable[[_UniConstraintStream__A], _groupBy_12__GroupKey_]]) -> 'UniConstraintStream'[_groupBy_12__GroupKey_]: ...
    @typing.overload
    def groupBy(self, uniConstraintCollector: UniConstraintCollector[_UniConstraintStream__A, _groupBy_13__ResultContainer_, _groupBy_13__Result_]) -> 'UniConstraintStream'[_groupBy_13__Result_]: ...
    _ifExists_0__B = typing.TypeVar('_ifExists_0__B')  # <B>
    _ifExists_1__B = typing.TypeVar('_ifExists_1__B')  # <B>
    _ifExists_2__B = typing.TypeVar('_ifExists_2__B')  # <B>
    _ifExists_3__B = typing.TypeVar('_ifExists_3__B')  # <B>
    _ifExists_4__B = typing.TypeVar('_ifExists_4__B')  # <B>
    @typing.overload
    def ifExists(self, class_: typing.Type[_ifExists_0__B], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_0__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExists(self, class_: typing.Type[_ifExists_1__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_1__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExists(self, class_: typing.Type[_ifExists_2__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_2__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_2__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExists(self, class_: typing.Type[_ifExists_3__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_3__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_3__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_3__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExists(self, class_: typing.Type[_ifExists_4__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_4__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_4__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_4__B], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExists_4__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    _ifExistsIncludingNullVars_0__B = typing.TypeVar('_ifExistsIncludingNullVars_0__B')  # <B>
    _ifExistsIncludingNullVars_1__B = typing.TypeVar('_ifExistsIncludingNullVars_1__B')  # <B>
    _ifExistsIncludingNullVars_2__B = typing.TypeVar('_ifExistsIncludingNullVars_2__B')  # <B>
    _ifExistsIncludingNullVars_3__B = typing.TypeVar('_ifExistsIncludingNullVars_3__B')  # <B>
    _ifExistsIncludingNullVars_4__B = typing.TypeVar('_ifExistsIncludingNullVars_4__B')  # <B>
    @typing.overload
    def ifExistsIncludingNullVars(self, class_: typing.Type[_ifExistsIncludingNullVars_0__B], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_0__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsIncludingNullVars(self, class_: typing.Type[_ifExistsIncludingNullVars_1__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_1__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsIncludingNullVars(self, class_: typing.Type[_ifExistsIncludingNullVars_2__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_2__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_2__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsIncludingNullVars(self, class_: typing.Type[_ifExistsIncludingNullVars_3__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_3__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_3__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_3__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsIncludingNullVars(self, class_: typing.Type[_ifExistsIncludingNullVars_4__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_4__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_4__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_4__B], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifExistsIncludingNullVars_4__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOther(self, class_: typing.Type[_UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOther(self, class_: typing.Type[_UniConstraintStream__A], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    _ifNotExists_0__B = typing.TypeVar('_ifNotExists_0__B')  # <B>
    _ifNotExists_1__B = typing.TypeVar('_ifNotExists_1__B')  # <B>
    _ifNotExists_2__B = typing.TypeVar('_ifNotExists_2__B')  # <B>
    _ifNotExists_3__B = typing.TypeVar('_ifNotExists_3__B')  # <B>
    _ifNotExists_4__B = typing.TypeVar('_ifNotExists_4__B')  # <B>
    @typing.overload
    def ifNotExists(self, class_: typing.Type[_ifNotExists_0__B], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_0__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExists(self, class_: typing.Type[_ifNotExists_1__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_1__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExists(self, class_: typing.Type[_ifNotExists_2__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_2__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_2__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExists(self, class_: typing.Type[_ifNotExists_3__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_3__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_3__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_3__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExists(self, class_: typing.Type[_ifNotExists_4__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_4__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_4__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_4__B], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExists_4__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    _ifNotExistsIncludingNullVars_0__B = typing.TypeVar('_ifNotExistsIncludingNullVars_0__B')  # <B>
    _ifNotExistsIncludingNullVars_1__B = typing.TypeVar('_ifNotExistsIncludingNullVars_1__B')  # <B>
    _ifNotExistsIncludingNullVars_2__B = typing.TypeVar('_ifNotExistsIncludingNullVars_2__B')  # <B>
    _ifNotExistsIncludingNullVars_3__B = typing.TypeVar('_ifNotExistsIncludingNullVars_3__B')  # <B>
    _ifNotExistsIncludingNullVars_4__B = typing.TypeVar('_ifNotExistsIncludingNullVars_4__B')  # <B>
    @typing.overload
    def ifNotExistsIncludingNullVars(self, class_: typing.Type[_ifNotExistsIncludingNullVars_0__B], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_0__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsIncludingNullVars(self, class_: typing.Type[_ifNotExistsIncludingNullVars_1__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_1__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsIncludingNullVars(self, class_: typing.Type[_ifNotExistsIncludingNullVars_2__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_2__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_2__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsIncludingNullVars(self, class_: typing.Type[_ifNotExistsIncludingNullVars_3__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_3__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_3__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_3__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsIncludingNullVars(self, class_: typing.Type[_ifNotExistsIncludingNullVars_4__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_4__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_4__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_4__B], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _ifNotExistsIncludingNullVars_4__B]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOther(self, class_: typing.Type[_UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOther(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOther(self, class_: typing.Type[_UniConstraintStream__A], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    @typing.overload
    def ifNotExistsOtherIncludingNullVars(self, class_: typing.Type[_UniConstraintStream__A], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _UniConstraintStream__A]) -> 'UniConstraintStream'[_UniConstraintStream__A]: ...
    _impact_2__Score_ = typing.TypeVar('_impact_2__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    _impact_5__Score_ = typing.TypeVar('_impact_5__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def impact(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impact(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impact(self, score_: _impact_2__Score_, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, _impact_2__Score_]: ...
    @typing.overload
    def impact(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impact(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impact(self, score_: _impact_5__Score_) -> UniConstraintBuilder[_UniConstraintStream__A, _impact_5__Score_]: ...
    _impactBigDecimal_0__Score_ = typing.TypeVar('_impactBigDecimal_0__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def impactBigDecimal(self, score_: _impactBigDecimal_0__Score_, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> UniConstraintBuilder[_UniConstraintStream__A, _impactBigDecimal_0__Score_]: ...
    @typing.overload
    def impactBigDecimal(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactBigDecimal(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactConfigurable(self, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def impactConfigurable(self, string: str, string2: str, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactConfigurable(self, string: str, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactConfigurable(self) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def impactConfigurableBigDecimal(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def impactConfigurableBigDecimal(self, string: str, string2: str, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactConfigurableBigDecimal(self, string: str, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactConfigurableLong(self, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def impactConfigurableLong(self, string: str, string2: str, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactConfigurableLong(self, string: str, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    _impactLong_0__Score_ = typing.TypeVar('_impactLong_0__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def impactLong(self, score_: _impactLong_0__Score_, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, _impactLong_0__Score_]: ...
    @typing.overload
    def impactLong(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def impactLong(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    _join_0__B = typing.TypeVar('_join_0__B')  # <B>
    _join_1__B = typing.TypeVar('_join_1__B')  # <B>
    _join_2__B = typing.TypeVar('_join_2__B')  # <B>
    _join_3__B = typing.TypeVar('_join_3__B')  # <B>
    _join_4__B = typing.TypeVar('_join_4__B')  # <B>
    _join_5__B = typing.TypeVar('_join_5__B')  # <B>
    _join_6__B = typing.TypeVar('_join_6__B')  # <B>
    _join_7__B = typing.TypeVar('_join_7__B')  # <B>
    _join_8__B = typing.TypeVar('_join_8__B')  # <B>
    _join_9__B = typing.TypeVar('_join_9__B')  # <B>
    _join_10__B = typing.TypeVar('_join_10__B')  # <B>
    _join_11__B = typing.TypeVar('_join_11__B')  # <B>
    @typing.overload
    def join(self, class_: typing.Type[_join_0__B], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_0__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_0__B]: ...
    @typing.overload
    def join(self, uniConstraintStream: 'UniConstraintStream'[_join_1__B], *biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_1__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_1__B]: ...
    @typing.overload
    def join(self, class_: typing.Type[_join_2__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_2__B]: ...
    @typing.overload
    def join(self, class_: typing.Type[_join_3__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_3__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_3__B]: ...
    @typing.overload
    def join(self, class_: typing.Type[_join_4__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_4__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_4__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_4__B]: ...
    @typing.overload
    def join(self, class_: typing.Type[_join_5__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_5__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_5__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_5__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_5__B]: ...
    @typing.overload
    def join(self, class_: typing.Type[_join_6__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_6__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_6__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_6__B], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_6__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_6__B]: ...
    @typing.overload
    def join(self, uniConstraintStream: 'UniConstraintStream'[_join_7__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_7__B]: ...
    @typing.overload
    def join(self, uniConstraintStream: 'UniConstraintStream'[_join_8__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_8__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_8__B]: ...
    @typing.overload
    def join(self, uniConstraintStream: 'UniConstraintStream'[_join_9__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_9__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_9__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_9__B]: ...
    @typing.overload
    def join(self, uniConstraintStream: 'UniConstraintStream'[_join_10__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_10__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_10__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_10__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_10__B]: ...
    @typing.overload
    def join(self, uniConstraintStream: 'UniConstraintStream'[_join_11__B], biJoiner: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_11__B], biJoiner2: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_11__B], biJoiner3: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_11__B], biJoiner4: org.optaplanner.core.api.score.stream.bi.BiJoiner[_UniConstraintStream__A, _join_11__B]) -> org.optaplanner.core.api.score.stream.bi.BiConstraintStream[_UniConstraintStream__A, _join_11__B]: ...
    _map__ResultA_ = typing.TypeVar('_map__ResultA_')  # <ResultA_>
    def map(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, _map__ResultA_], typing.Callable[[_UniConstraintStream__A], _map__ResultA_]]) -> 'UniConstraintStream'[_map__ResultA_]: ...
    _penalize_2__Score_ = typing.TypeVar('_penalize_2__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    _penalize_5__Score_ = typing.TypeVar('_penalize_5__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def penalize(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalize(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalize(self, score_: _penalize_2__Score_, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, _penalize_2__Score_]: ...
    @typing.overload
    def penalize(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalize(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalize(self, score_: _penalize_5__Score_) -> UniConstraintBuilder[_UniConstraintStream__A, _penalize_5__Score_]: ...
    _penalizeBigDecimal_0__Score_ = typing.TypeVar('_penalizeBigDecimal_0__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def penalizeBigDecimal(self, score_: _penalizeBigDecimal_0__Score_, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> UniConstraintBuilder[_UniConstraintStream__A, _penalizeBigDecimal_0__Score_]: ...
    @typing.overload
    def penalizeBigDecimal(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeBigDecimal(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurable(self, string: str) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurable(self, string: str, string2: str) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurable(self, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def penalizeConfigurable(self, string: str, string2: str, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurable(self, string: str, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurable(self) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def penalizeConfigurableBigDecimal(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def penalizeConfigurableBigDecimal(self, string: str, string2: str, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurableBigDecimal(self, string: str, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurableLong(self, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def penalizeConfigurableLong(self, string: str, string2: str, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeConfigurableLong(self, string: str, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    _penalizeLong_0__Score_ = typing.TypeVar('_penalizeLong_0__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def penalizeLong(self, score_: _penalizeLong_0__Score_, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, _penalizeLong_0__Score_]: ...
    @typing.overload
    def penalizeLong(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def penalizeLong(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    _reward_2__Score_ = typing.TypeVar('_reward_2__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    _reward_5__Score_ = typing.TypeVar('_reward_5__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def reward(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def reward(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def reward(self, score_: _reward_2__Score_, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, _reward_2__Score_]: ...
    @typing.overload
    def reward(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def reward(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def reward(self, score_: _reward_5__Score_) -> UniConstraintBuilder[_UniConstraintStream__A, _reward_5__Score_]: ...
    _rewardBigDecimal_0__Score_ = typing.TypeVar('_rewardBigDecimal_0__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def rewardBigDecimal(self, score_: _rewardBigDecimal_0__Score_, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> UniConstraintBuilder[_UniConstraintStream__A, _rewardBigDecimal_0__Score_]: ...
    @typing.overload
    def rewardBigDecimal(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardBigDecimal(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurable(self, string: str) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurable(self, string: str, string2: str) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurable(self, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def rewardConfigurable(self, string: str, string2: str, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurable(self, string: str, toIntFunction: typing.Union[java.util.function.ToIntFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurable(self) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def rewardConfigurableBigDecimal(self, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def rewardConfigurableBigDecimal(self, string: str, string2: str, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurableBigDecimal(self, string: str, function: typing.Union[java.util.function.Function[_UniConstraintStream__A, typing.Union[java.math.BigDecimal, decimal.Decimal]], typing.Callable[[_UniConstraintStream__A], typing.Union[java.math.BigDecimal, decimal.Decimal]]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurableLong(self, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, typing.Any]: ...
    @typing.overload
    def rewardConfigurableLong(self, string: str, string2: str, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardConfigurableLong(self, string: str, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    _rewardLong_0__Score_ = typing.TypeVar('_rewardLong_0__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
    @typing.overload
    def rewardLong(self, score_: _rewardLong_0__Score_, toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> UniConstraintBuilder[_UniConstraintStream__A, _rewardLong_0__Score_]: ...
    @typing.overload
    def rewardLong(self, string: str, string2: str, score: org.optaplanner.core.api.score.Score[typing.Any], toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...
    @typing.overload
    def rewardLong(self, string: str, score: org.optaplanner.core.api.score.Score[typing.Any], toLongFunction: typing.Union[java.util.function.ToLongFunction[_UniConstraintStream__A], typing.Callable[[_UniConstraintStream__A], int]]) -> org.optaplanner.core.api.score.stream.Constraint: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.stream.uni")``.

    UniConstraintBuilder: typing.Type[UniConstraintBuilder]
    UniConstraintCollector: typing.Type[UniConstraintCollector]
    UniConstraintStream: typing.Type[UniConstraintStream]
