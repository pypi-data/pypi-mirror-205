
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import org.kie.api.runtime.rule
import org.optaplanner.core.api.score
import org.optaplanner.core.api.score.holder
import typing



class BendableScore(org.optaplanner.core.api.score.IBendableScore['BendableScore']):
    def abs(self) -> 'BendableScore': ...
    def add(self, bendableScore: 'BendableScore') -> 'BendableScore': ...
    def compareTo(self, bendableScore: 'BendableScore') -> int: ...
    def divide(self, double: float) -> 'BendableScore': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHardOrSoftScore(self, int: int) -> int: ...
    def getHardScore(self, int: int) -> int: ...
    def getHardScores(self) -> typing.MutableSequence[int]: ...
    def getSoftScore(self, int: int) -> int: ...
    def getSoftScores(self) -> typing.MutableSequence[int]: ...
    def hardLevelsSize(self) -> int: ...
    def hardOrSoftScore(self, int: int) -> int: ...
    def hardScore(self, int: int) -> int: ...
    def hardScores(self) -> typing.MutableSequence[int]: ...
    def hashCode(self) -> int: ...
    def initScore(self) -> int: ...
    def isFeasible(self) -> bool: ...
    def multiply(self, double: float) -> 'BendableScore': ...
    def negate(self) -> 'BendableScore': ...
    @staticmethod
    def of(intArray: typing.Union[typing.List[int], jpype.JArray], intArray2: typing.Union[typing.List[int], jpype.JArray]) -> 'BendableScore': ...
    @staticmethod
    def ofHard(int: int, int2: int, int3: int, int4: int) -> 'BendableScore': ...
    @staticmethod
    def ofSoft(int: int, int2: int, int3: int, int4: int) -> 'BendableScore': ...
    @staticmethod
    def ofUninitialized(int: int, intArray: typing.Union[typing.List[int], jpype.JArray], intArray2: typing.Union[typing.List[int], jpype.JArray]) -> 'BendableScore': ...
    @staticmethod
    def parseScore(string: str) -> 'BendableScore': ...
    def power(self, double: float) -> 'BendableScore': ...
    def softLevelsSize(self) -> int: ...
    def softScore(self, int: int) -> int: ...
    def softScores(self) -> typing.MutableSequence[int]: ...
    def subtract(self, bendableScore: 'BendableScore') -> 'BendableScore': ...
    def toLevelNumbers(self) -> typing.MutableSequence[java.lang.Number]: ...
    def toShortString(self) -> str: ...
    def toString(self) -> str: ...
    def validateCompatible(self, bendableScore: 'BendableScore') -> None: ...
    def withInitScore(self, int: int) -> 'BendableScore': ...
    @typing.overload
    def zero(self) -> 'BendableScore': ...
    @typing.overload
    @staticmethod
    def zero(int: int, int2: int) -> 'BendableScore': ...

class BendableScoreHolder(org.optaplanner.core.api.score.holder.ScoreHolder[BendableScore]):
    def addHardConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int, int2: int) -> None: ...
    def addMultiConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, intArray: typing.Union[typing.List[int], jpype.JArray], intArray2: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def addSoftConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int, int2: int) -> None: ...
    def getHardLevelsSize(self) -> int: ...
    def getSoftLevelsSize(self) -> int: ...
    def impactScore(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext, intArray: typing.Union[typing.List[int], jpype.JArray], intArray2: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext, intArray: typing.Union[typing.List[int], jpype.JArray], intArray2: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.buildin.bendable")``.

    BendableScore: typing.Type[BendableScore]
    BendableScoreHolder: typing.Type[BendableScoreHolder]
