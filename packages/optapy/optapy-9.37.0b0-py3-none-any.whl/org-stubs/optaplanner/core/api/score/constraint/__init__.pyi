
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import org.optaplanner.core.api.score
import org.optaplanner.core.api.score.stream
import typing



_ConstraintMatch__Score_ = typing.TypeVar('_ConstraintMatch__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class ConstraintMatch(java.lang.Comparable['ConstraintMatch'[_ConstraintMatch__Score_]], typing.Generic[_ConstraintMatch__Score_]):
    @typing.overload
    def __init__(self, string: str, string2: str, list: java.util.List[typing.Any], score_: _ConstraintMatch__Score_): ...
    @typing.overload
    def __init__(self, string: str, string2: str, constraintJustification: org.optaplanner.core.api.score.stream.ConstraintJustification, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any], typing.Set[typing.Any]], score_: _ConstraintMatch__Score_): ...
    def compareTo(self, constraintMatch: 'ConstraintMatch'[_ConstraintMatch__Score_]) -> int: ...
    def getConstraintId(self) -> str: ...
    def getConstraintName(self) -> str: ...
    def getConstraintPackage(self) -> str: ...
    def getIdentificationString(self) -> str: ...
    def getIndictedObjectList(self) -> java.util.List[typing.Any]: ...
    _getJustification__Justification_ = typing.TypeVar('_getJustification__Justification_', bound=org.optaplanner.core.api.score.stream.ConstraintJustification)  # <Justification_>
    def getJustification(self) -> _getJustification__Justification_: ...
    def getJustificationList(self) -> java.util.List[typing.Any]: ...
    def getScore(self) -> _ConstraintMatch__Score_: ...
    def toString(self) -> str: ...

_ConstraintMatchTotal__Score_ = typing.TypeVar('_ConstraintMatchTotal__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class ConstraintMatchTotal(typing.Generic[_ConstraintMatchTotal__Score_]):
    @staticmethod
    def composeConstraintId(string: str, string2: str) -> str: ...
    def getConstraintId(self) -> str: ...
    def getConstraintMatchCount(self) -> int: ...
    def getConstraintMatchSet(self) -> java.util.Set[ConstraintMatch[_ConstraintMatchTotal__Score_]]: ...
    def getConstraintName(self) -> str: ...
    def getConstraintPackage(self) -> str: ...
    def getConstraintWeight(self) -> _ConstraintMatchTotal__Score_: ...
    def getScore(self) -> _ConstraintMatchTotal__Score_: ...

_Indictment__Score_ = typing.TypeVar('_Indictment__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class Indictment(typing.Generic[_Indictment__Score_]):
    def getConstraintMatchCount(self) -> int: ...
    def getConstraintMatchSet(self) -> java.util.Set[ConstraintMatch[_Indictment__Score_]]: ...
    _getIndictedObject__IndictedObject_ = typing.TypeVar('_getIndictedObject__IndictedObject_')  # <IndictedObject_>
    def getIndictedObject(self) -> _getIndictedObject__IndictedObject_: ...
    def getJustification(self) -> typing.Any: ...
    _getJustificationList_1__ConstraintJustification_ = typing.TypeVar('_getJustificationList_1__ConstraintJustification_', bound=org.optaplanner.core.api.score.stream.ConstraintJustification)  # <ConstraintJustification_>
    @typing.overload
    def getJustificationList(self) -> java.util.List[org.optaplanner.core.api.score.stream.ConstraintJustification]: ...
    @typing.overload
    def getJustificationList(self, class_: typing.Type[_getJustificationList_1__ConstraintJustification_]) -> java.util.List[_getJustificationList_1__ConstraintJustification_]: ...
    def getScore(self) -> _Indictment__Score_: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.constraint")``.

    ConstraintMatch: typing.Type[ConstraintMatch]
    ConstraintMatchTotal: typing.Type[ConstraintMatchTotal]
    Indictment: typing.Type[Indictment]
