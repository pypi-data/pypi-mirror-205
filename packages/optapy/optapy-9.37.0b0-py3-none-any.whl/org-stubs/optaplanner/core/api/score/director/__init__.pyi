
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import typing



_ScoreDirector__Solution_ = typing.TypeVar('_ScoreDirector__Solution_')  # <Solution_>
class ScoreDirector(typing.Generic[_ScoreDirector__Solution_]):
    def afterEntityAdded(self, object: typing.Any) -> None: ...
    def afterEntityRemoved(self, object: typing.Any) -> None: ...
    def afterListVariableChanged(self, object: typing.Any, string: str, int: int, int2: int) -> None: ...
    def afterListVariableElementAssigned(self, object: typing.Any, string: str, object2: typing.Any) -> None: ...
    def afterListVariableElementUnassigned(self, object: typing.Any, string: str, object2: typing.Any) -> None: ...
    def afterProblemFactAdded(self, object: typing.Any) -> None: ...
    def afterProblemFactRemoved(self, object: typing.Any) -> None: ...
    def afterProblemPropertyChanged(self, object: typing.Any) -> None: ...
    def afterVariableChanged(self, object: typing.Any, string: str) -> None: ...
    def beforeEntityAdded(self, object: typing.Any) -> None: ...
    def beforeEntityRemoved(self, object: typing.Any) -> None: ...
    def beforeListVariableChanged(self, object: typing.Any, string: str, int: int, int2: int) -> None: ...
    def beforeListVariableElementAssigned(self, object: typing.Any, string: str, object2: typing.Any) -> None: ...
    def beforeListVariableElementUnassigned(self, object: typing.Any, string: str, object2: typing.Any) -> None: ...
    def beforeProblemFactAdded(self, object: typing.Any) -> None: ...
    def beforeProblemFactRemoved(self, object: typing.Any) -> None: ...
    def beforeProblemPropertyChanged(self, object: typing.Any) -> None: ...
    def beforeVariableChanged(self, object: typing.Any, string: str) -> None: ...
    def getWorkingSolution(self) -> _ScoreDirector__Solution_: ...
    _lookUpWorkingObject__E = typing.TypeVar('_lookUpWorkingObject__E')  # <E>
    def lookUpWorkingObject(self, e: _lookUpWorkingObject__E) -> _lookUpWorkingObject__E: ...
    _lookUpWorkingObjectOrReturnNull__E = typing.TypeVar('_lookUpWorkingObjectOrReturnNull__E')  # <E>
    def lookUpWorkingObjectOrReturnNull(self, e: _lookUpWorkingObjectOrReturnNull__E) -> _lookUpWorkingObjectOrReturnNull__E: ...
    def triggerVariableListeners(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.director")``.

    ScoreDirector: typing.Type[ScoreDirector]
