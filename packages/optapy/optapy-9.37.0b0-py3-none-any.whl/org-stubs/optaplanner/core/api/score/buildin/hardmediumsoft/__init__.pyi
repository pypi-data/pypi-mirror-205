
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import org.kie.api.runtime.rule
import org.optaplanner.core.api.score
import org.optaplanner.core.api.score.holder
import typing



class HardMediumSoftScore(org.optaplanner.core.api.score.Score['HardMediumSoftScore']):
    ZERO: typing.ClassVar['HardMediumSoftScore'] = ...
    ONE_HARD: typing.ClassVar['HardMediumSoftScore'] = ...
    ONE_MEDIUM: typing.ClassVar['HardMediumSoftScore'] = ...
    ONE_SOFT: typing.ClassVar['HardMediumSoftScore'] = ...
    def abs(self) -> 'HardMediumSoftScore': ...
    def add(self, hardMediumSoftScore: 'HardMediumSoftScore') -> 'HardMediumSoftScore': ...
    def compareTo(self, hardMediumSoftScore: 'HardMediumSoftScore') -> int: ...
    def divide(self, double: float) -> 'HardMediumSoftScore': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHardScore(self) -> int: ...
    def getMediumScore(self) -> int: ...
    def getSoftScore(self) -> int: ...
    def hardScore(self) -> int: ...
    def hashCode(self) -> int: ...
    def initScore(self) -> int: ...
    def isFeasible(self) -> bool: ...
    def mediumScore(self) -> int: ...
    def multiply(self, double: float) -> 'HardMediumSoftScore': ...
    @staticmethod
    def of(int: int, int2: int, int3: int) -> 'HardMediumSoftScore': ...
    @staticmethod
    def ofHard(int: int) -> 'HardMediumSoftScore': ...
    @staticmethod
    def ofMedium(int: int) -> 'HardMediumSoftScore': ...
    @staticmethod
    def ofSoft(int: int) -> 'HardMediumSoftScore': ...
    @staticmethod
    def ofUninitialized(int: int, int2: int, int3: int, int4: int) -> 'HardMediumSoftScore': ...
    @staticmethod
    def parseScore(string: str) -> 'HardMediumSoftScore': ...
    def power(self, double: float) -> 'HardMediumSoftScore': ...
    def softScore(self) -> int: ...
    def subtract(self, hardMediumSoftScore: 'HardMediumSoftScore') -> 'HardMediumSoftScore': ...
    def toLevelNumbers(self) -> typing.MutableSequence[java.lang.Number]: ...
    def toShortString(self) -> str: ...
    def toString(self) -> str: ...
    def withInitScore(self, int: int) -> 'HardMediumSoftScore': ...
    def zero(self) -> 'HardMediumSoftScore': ...

class HardMediumSoftScoreHolder(org.optaplanner.core.api.score.holder.ScoreHolder[HardMediumSoftScore]):
    def addHardConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    def addMediumConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    def addMultiConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int, int2: int, int3: int) -> None: ...
    def addSoftConstraintMatch(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    def impactScore(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int, int2: int, int3: int) -> None: ...
    @typing.overload
    def penalize(self, ruleContext: org.kie.api.runtime.rule.RuleContext) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext, int: int, int2: int, int3: int) -> None: ...
    @typing.overload
    def reward(self, ruleContext: org.kie.api.runtime.rule.RuleContext) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.buildin.hardmediumsoft")``.

    HardMediumSoftScore: typing.Type[HardMediumSoftScore]
    HardMediumSoftScoreHolder: typing.Type[HardMediumSoftScoreHolder]
