
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import org.optaplanner.core.api.score
import org.optaplanner.core.api.score.constraint
import typing



_EasyScoreCalculator__Solution_ = typing.TypeVar('_EasyScoreCalculator__Solution_')  # <Solution_>
_EasyScoreCalculator__Score_ = typing.TypeVar('_EasyScoreCalculator__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class EasyScoreCalculator(typing.Generic[_EasyScoreCalculator__Solution_, _EasyScoreCalculator__Score_]):
    def calculateScore(self, solution_: _EasyScoreCalculator__Solution_) -> _EasyScoreCalculator__Score_: ...

_IncrementalScoreCalculator__Solution_ = typing.TypeVar('_IncrementalScoreCalculator__Solution_')  # <Solution_>
_IncrementalScoreCalculator__Score_ = typing.TypeVar('_IncrementalScoreCalculator__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class IncrementalScoreCalculator(typing.Generic[_IncrementalScoreCalculator__Solution_, _IncrementalScoreCalculator__Score_]):
    def afterEntityAdded(self, object: typing.Any) -> None: ...
    def afterEntityRemoved(self, object: typing.Any) -> None: ...
    def afterListVariableChanged(self, object: typing.Any, string: str, int: int, int2: int) -> None: ...
    def afterListVariableElementAssigned(self, string: str, object: typing.Any) -> None: ...
    def afterListVariableElementUnassigned(self, string: str, object: typing.Any) -> None: ...
    def afterVariableChanged(self, object: typing.Any, string: str) -> None: ...
    def beforeEntityAdded(self, object: typing.Any) -> None: ...
    def beforeEntityRemoved(self, object: typing.Any) -> None: ...
    def beforeListVariableChanged(self, object: typing.Any, string: str, int: int, int2: int) -> None: ...
    def beforeListVariableElementAssigned(self, string: str, object: typing.Any) -> None: ...
    def beforeListVariableElementUnassigned(self, string: str, object: typing.Any) -> None: ...
    def beforeVariableChanged(self, object: typing.Any, string: str) -> None: ...
    def calculateScore(self) -> _IncrementalScoreCalculator__Score_: ...
    def resetWorkingSolution(self, solution_: _IncrementalScoreCalculator__Solution_) -> None: ...

_ConstraintMatchAwareIncrementalScoreCalculator__Solution_ = typing.TypeVar('_ConstraintMatchAwareIncrementalScoreCalculator__Solution_')  # <Solution_>
_ConstraintMatchAwareIncrementalScoreCalculator__Score_ = typing.TypeVar('_ConstraintMatchAwareIncrementalScoreCalculator__Score_', bound=org.optaplanner.core.api.score.Score)  # <Score_>
class ConstraintMatchAwareIncrementalScoreCalculator(IncrementalScoreCalculator[_ConstraintMatchAwareIncrementalScoreCalculator__Solution_, _ConstraintMatchAwareIncrementalScoreCalculator__Score_], typing.Generic[_ConstraintMatchAwareIncrementalScoreCalculator__Solution_, _ConstraintMatchAwareIncrementalScoreCalculator__Score_]):
    def getConstraintMatchTotals(self) -> java.util.Collection[org.optaplanner.core.api.score.constraint.ConstraintMatchTotal[_ConstraintMatchAwareIncrementalScoreCalculator__Score_]]: ...
    def getIndictmentMap(self) -> java.util.Map[typing.Any, org.optaplanner.core.api.score.constraint.Indictment[_ConstraintMatchAwareIncrementalScoreCalculator__Score_]]: ...
    @typing.overload
    def resetWorkingSolution(self, solution_: _ConstraintMatchAwareIncrementalScoreCalculator__Solution_, boolean: bool) -> None: ...
    @typing.overload
    def resetWorkingSolution(self, solution_: _ConstraintMatchAwareIncrementalScoreCalculator__Solution_) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.api.score.calculator")``.

    ConstraintMatchAwareIncrementalScoreCalculator: typing.Type[ConstraintMatchAwareIncrementalScoreCalculator]
    EasyScoreCalculator: typing.Type[EasyScoreCalculator]
    IncrementalScoreCalculator: typing.Type[IncrementalScoreCalculator]
