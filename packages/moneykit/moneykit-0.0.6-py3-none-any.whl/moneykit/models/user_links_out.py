# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Dict

from pydantic import BaseModel, Field

from moneykit.models.link_out_common import LinkOutCommon


class UserLinksOut(BaseModel):
    """
    UserLinksOut
    """

    links: Dict[str, LinkOutCommon] = Field(
        ..., description="The set of links belonging to this user, as a dictionary         of `{link_id:link}`."
    )
    __properties = ["links"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserLinksOut:
        """Create an instance of UserLinksOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key in self.links:
                if self.links[_key]:
                    _field_dict[_key] = self.links[_key].to_dict()
            _dict["links"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserLinksOut:
        """Create an instance of UserLinksOut from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UserLinksOut.parse_obj(obj)

        _obj = UserLinksOut.parse_obj(
            {
                "links": {_k: LinkOutCommon.from_dict(_v) for _k, _v in obj.get("links").items()}
                if obj.get("links") is not None
                else None
            }
        )
        return _obj
