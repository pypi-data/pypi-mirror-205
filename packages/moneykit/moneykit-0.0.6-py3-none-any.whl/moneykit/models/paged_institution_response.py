# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, conlist

from moneykit.models.cursors import Cursors
from moneykit.models.institution_out import InstitutionOut


class PagedInstitutionResponse(BaseModel):
    """
    PagedInstitutionResponse
    """

    institutions: conlist(InstitutionOut) = Field(..., description="The list of institutions for this page.")
    cursors: Cursors = ...
    __properties = ["institutions", "cursors"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PagedInstitutionResponse:
        """Create an instance of PagedInstitutionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in institutions (list)
        _items = []
        if self.institutions:
            for _item in self.institutions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["institutions"] = _items
        # override the default output from pydantic by calling `to_dict()` of cursors
        if self.cursors:
            _dict["cursors"] = self.cursors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PagedInstitutionResponse:
        """Create an instance of PagedInstitutionResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PagedInstitutionResponse.parse_obj(obj)

        _obj = PagedInstitutionResponse.parse_obj(
            {
                "institutions": [InstitutionOut.from_dict(_item) for _item in obj.get("institutions")]
                if obj.get("institutions") is not None
                else None,
                "cursors": Cursors.from_dict(obj.get("cursors")) if obj.get("cursors") is not None else None,
            }
        )
        return _obj
