# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist, constr

from moneykit.models.customer_user import CustomerUser
from moneykit.models.moneylink_features import MoneylinkFeatures
from moneykit.models.settings import Settings


class CreateLinkSessionBody(BaseModel):
    """
    CreateLinkSessionBody
    """

    settings: Optional[Settings] = None
    customer_user: CustomerUser = ...
    existing_link_id: Optional[StrictStr] = Field(
        None, description="Supply the existing `link_id` if you are asking the user to reconnect this link."
    )
    redirect_uri: Optional[constr(strict=True, max_length=65536, min_length=1)] = Field(
        None,
        description="For Oauth linking, a URI indicating the destination, in your application, where the user should         be sent after authenticating with the institution.  The `redirect_uri` should not contain any query parameters,         and it must be pre-approved by MoneyKit during the customer setup process.",
    )
    webhook: Optional[constr(strict=True, max_length=65536, min_length=1)] = Field(
        None, description="The destination URL to which any webhooks should be sent."
    )
    link_tags: Optional[conlist(StrictStr)] = Field(
        None, description="You can supply one or more arbitrary strings as tags to describe this link."
    )
    moneylink_features: Optional[MoneylinkFeatures] = None
    __properties = [
        "settings",
        "customer_user",
        "existing_link_id",
        "redirect_uri",
        "webhook",
        "link_tags",
        "moneylink_features",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateLinkSessionBody:
        """Create an instance of CreateLinkSessionBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict["settings"] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_user
        if self.customer_user:
            _dict["customer_user"] = self.customer_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of moneylink_features
        if self.moneylink_features:
            _dict["moneylink_features"] = self.moneylink_features.to_dict()
        # set to None if settings (nullable) is None
        # and __fields_set__ contains the field
        if self.settings is None and "settings" in self.__fields_set__:
            _dict["settings"] = None

        # set to None if existing_link_id (nullable) is None
        # and __fields_set__ contains the field
        if self.existing_link_id is None and "existing_link_id" in self.__fields_set__:
            _dict["existing_link_id"] = None

        # set to None if redirect_uri (nullable) is None
        # and __fields_set__ contains the field
        if self.redirect_uri is None and "redirect_uri" in self.__fields_set__:
            _dict["redirect_uri"] = None

        # set to None if webhook (nullable) is None
        # and __fields_set__ contains the field
        if self.webhook is None and "webhook" in self.__fields_set__:
            _dict["webhook"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateLinkSessionBody:
        """Create an instance of CreateLinkSessionBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateLinkSessionBody.parse_obj(obj)

        _obj = CreateLinkSessionBody.parse_obj(
            {
                "settings": Settings.from_dict(obj.get("settings")) if obj.get("settings") is not None else None,
                "customer_user": CustomerUser.from_dict(obj.get("customer_user"))
                if obj.get("customer_user") is not None
                else None,
                "existing_link_id": obj.get("existing_link_id"),
                "redirect_uri": obj.get("redirect_uri"),
                "webhook": obj.get("webhook"),
                "link_tags": obj.get("link_tags"),
                "moneylink_features": MoneylinkFeatures.from_dict(obj.get("moneylink_features"))
                if obj.get("moneylink_features") is not None
                else None,
            }
        )
        return _obj
