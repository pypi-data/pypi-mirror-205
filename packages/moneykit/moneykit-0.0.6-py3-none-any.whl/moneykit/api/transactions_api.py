# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Any, Dict, Optional

from pydantic import Field, StrictStr, conint, conlist, constr, validate_arguments
from typing_extensions import Annotated

from moneykit.api_client import ApiClient
from moneykit.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from moneykit.models.get_transactions_response import GetTransactionsResponse
from moneykit.models.transaction_sync_response import TransactionSyncResponse
from moneykit.models.transaction_type_filter import TransactionTypeFilter
from moneykit.models.user_transactions_paged_response import UserTransactionsPagedResponse


class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_transactions(
        self,
        id: Annotated[StrictStr, Field(..., description="The unique ID for this link.")],
        account_ids: Annotated[
            Optional[conlist(StrictStr)], Field(description="An optional list of account IDs to filter the results.")
        ] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        start_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`."
            ),
        ] = None,
        end_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today."
            ),
        ] = None,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ) -> GetTransactionsResponse:  # noqa: E501
        """/links/{id}/transactions  # noqa: E501

        Fetches transactions for the accounts associated with a <a href=#tag/Links>link</a>.  Results are paginated,     and returned in reverse chronological order.     <p>MoneyKit checks for updated account data, including transactions, periodically throughout the day, but the     update frequency can vary, depending on the downstream data provider and the institution.  To force a check     for updated transactions, you can use the <a href=#operation/products>/products</a> endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions(id, account_ids, page, size, start_date, end_date, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this link. (required)
        :type id: str
        :param account_ids: An optional list of account IDs to filter the results.
        :type account_ids: List[str]
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param start_date: The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`.
        :type start_date: str
        :param end_date: The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today.
        :type end_date: str
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetTransactionsResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_transactions_with_http_info(
            id, account_ids, page, size, start_date, end_date, moneykit_version, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_transactions_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The unique ID for this link.")],
        account_ids: Annotated[
            Optional[conlist(StrictStr)], Field(description="An optional list of account IDs to filter the results.")
        ] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        start_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`."
            ),
        ] = None,
        end_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today."
            ),
        ] = None,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ):  # noqa: E501
        """/links/{id}/transactions  # noqa: E501

        Fetches transactions for the accounts associated with a <a href=#tag/Links>link</a>.  Results are paginated,     and returned in reverse chronological order.     <p>MoneyKit checks for updated account data, including transactions, periodically throughout the day, but the     update frequency can vary, depending on the downstream data provider and the institution.  To force a check     for updated transactions, you can use the <a href=#operation/products>/products</a> endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_with_http_info(id, account_ids, page, size, start_date, end_date, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this link. (required)
        :type id: str
        :param account_ids: An optional list of account IDs to filter the results.
        :type account_ids: List[str]
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param start_date: The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`.
        :type start_date: str
        :param end_date: The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today.
        :type end_date: str
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetTransactionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "account_ids", "page", "size", "start_date", "end_date", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_transactions" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        if _params.get("account_ids") is not None:  # noqa: E501
            _query_params.append(("account_ids", _params["account_ids"]))
            _collection_formats["account_ids"] = "multi"

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        if _params.get("start_date") is not None:  # noqa: E501
            _query_params.append(("start_date", _params["start_date"]))

        if _params.get("end_date") is not None:  # noqa: E501
            _query_params.append(("end_date", _params["end_date"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "GetTransactionsResponse",
            "401": "Response401GetTransactionsLinksIdTransactionsGet",
            "429": "APIErrorRateLimitExceededResponse",
            "404": "LinkErrorNotFoundResponse",
            "403": "LinkErrorForbiddenActionResponse",
            "410": "LinkErrorDeletedResponse",
            "422": "LinkErrorBadStateResponse",
        }

        return self.api_client.call_api(
            "/links/{id}/transactions",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_transactions_diff(
        self,
        id: Annotated[StrictStr, Field(..., description="The unique ID for this link.")],
        cursor: Optional[StrictStr] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ) -> TransactionSyncResponse:  # noqa: E501
        """/links/{id}/transactions/sync  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_diff(id, cursor, size, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this link. (required)
        :type id: str
        :param cursor:
        :type cursor: str
        :param size:
        :type size: int
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransactionSyncResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_transactions_diff_with_http_info(id, cursor, size, moneykit_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_transactions_diff_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The unique ID for this link.")],
        cursor: Optional[StrictStr] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ):  # noqa: E501
        """/links/{id}/transactions/sync  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_diff_with_http_info(id, cursor, size, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this link. (required)
        :type id: str
        :param cursor:
        :type cursor: str
        :param size:
        :type size: int
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransactionSyncResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "cursor", "size", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_transactions_diff" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        if _params.get("cursor") is not None:  # noqa: E501
            _query_params.append(("cursor", _params["cursor"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "TransactionSyncResponse",
            "401": "Response401GetTransactionsDiffLinksIdTransactionsSyncGet",
            "429": "APIErrorRateLimitExceededResponse",
            "404": "LinkErrorNotFoundResponse",
            "403": "LinkErrorForbiddenActionResponse",
            "410": "LinkErrorDeletedResponse",
            "422": "LinkErrorBadStateResponse",
        }

        return self.api_client.call_api(
            "/links/{id}/transactions/sync",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_user_transactions(
        self,
        id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The unique ID for this user.  This is the same ID provided         in the call to <a href=#operation/create_link_session>/link-session</a> to create any link for this user.",
            ),
        ],
        transaction_type: Optional[conlist(TransactionTypeFilter)] = None,
        category: Optional[conlist(StrictStr)] = None,
        account_id: Annotated[
            Optional[conlist(constr(strict=True, min_length=1))],
            Field(description="If present, filters results to transactions in accounts matching the given IDs."),
        ] = None,
        institution_id: Annotated[
            Optional[conlist(constr(strict=True, min_length=1))],
            Field(description="If present, filters results to transactions at institutions matching the given IDs."),
        ] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        start_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`."
            ),
        ] = None,
        end_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today."
            ),
        ] = None,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ) -> UserTransactionsPagedResponse:  # noqa: E501
        """/users/{id}/transactions  # noqa: E501

        Fetches transactions for a <a href=#operation/get_user_accounts>user</a>.     <p>This endpoint fetches all transactions for a user across all of their links.  You can use it to retrieve     transactions from any or all accounts at once, regardless of which institution they belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_transactions(id, transaction_type, category, account_id, institution_id, page, size, start_date, end_date, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this user.  This is the same ID provided         in the call to <a href=#operation/create_link_session>/link-session</a> to create any link for this user. (required)
        :type id: str
        :param transaction_type:
        :type transaction_type: List[TransactionTypeFilter]
        :param category:
        :type category: List[str]
        :param account_id: If present, filters results to transactions in accounts matching the given IDs.
        :type account_id: List[str]
        :param institution_id: If present, filters results to transactions at institutions matching the given IDs.
        :type institution_id: List[str]
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param start_date: The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`.
        :type start_date: str
        :param end_date: The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today.
        :type end_date: str
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserTransactionsPagedResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_user_transactions_with_http_info(
            id,
            transaction_type,
            category,
            account_id,
            institution_id,
            page,
            size,
            start_date,
            end_date,
            moneykit_version,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_user_transactions_with_http_info(
        self,
        id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The unique ID for this user.  This is the same ID provided         in the call to <a href=#operation/create_link_session>/link-session</a> to create any link for this user.",
            ),
        ],
        transaction_type: Optional[conlist(TransactionTypeFilter)] = None,
        category: Optional[conlist(StrictStr)] = None,
        account_id: Annotated[
            Optional[conlist(constr(strict=True, min_length=1))],
            Field(description="If present, filters results to transactions in accounts matching the given IDs."),
        ] = None,
        institution_id: Annotated[
            Optional[conlist(constr(strict=True, min_length=1))],
            Field(description="If present, filters results to transactions at institutions matching the given IDs."),
        ] = None,
        page: Optional[conint(strict=True, ge=1)] = None,
        size: Optional[conint(strict=True, le=100, ge=1)] = None,
        start_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`."
            ),
        ] = None,
        end_date: Annotated[
            Optional[StrictStr],
            Field(
                description="The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today."
            ),
        ] = None,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ):  # noqa: E501
        """/users/{id}/transactions  # noqa: E501

        Fetches transactions for a <a href=#operation/get_user_accounts>user</a>.     <p>This endpoint fetches all transactions for a user across all of their links.  You can use it to retrieve     transactions from any or all accounts at once, regardless of which institution they belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_transactions_with_http_info(id, transaction_type, category, account_id, institution_id, page, size, start_date, end_date, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this user.  This is the same ID provided         in the call to <a href=#operation/create_link_session>/link-session</a> to create any link for this user. (required)
        :type id: str
        :param transaction_type:
        :type transaction_type: List[TransactionTypeFilter]
        :param category:
        :type category: List[str]
        :param account_id: If present, filters results to transactions in accounts matching the given IDs.
        :type account_id: List[str]
        :param institution_id: If present, filters results to transactions at institutions matching the given IDs.
        :type institution_id: List[str]
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param start_date: The earliest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to 90 days before the `end_date`.             <p>If you want to retrieve **all** transactions, use `1900-01-01`.
        :type start_date: str
        :param end_date: The latest date for which data should be returned, formatted as YYYY-MM-DD.             Defaults to today.
        :type end_date: str
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserTransactionsPagedResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "id",
            "transaction_type",
            "category",
            "account_id",
            "institution_id",
            "page",
            "size",
            "start_date",
            "end_date",
            "moneykit_version",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_user_transactions" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        if _params.get("transaction_type") is not None:  # noqa: E501
            _query_params.append(("transaction_type", _params["transaction_type"]))
            _collection_formats["transaction_type"] = "multi"

        if _params.get("category") is not None:  # noqa: E501
            _query_params.append(("category", _params["category"]))
            _collection_formats["category"] = "multi"

        if _params.get("account_id") is not None:  # noqa: E501
            _query_params.append(("account_id", _params["account_id"]))
            _collection_formats["account_id"] = "multi"

        if _params.get("institution_id") is not None:  # noqa: E501
            _query_params.append(("institution_id", _params["institution_id"]))
            _collection_formats["institution_id"] = "multi"

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        if _params.get("start_date") is not None:  # noqa: E501
            _query_params.append(("start_date", _params["start_date"]))

        if _params.get("end_date") is not None:  # noqa: E501
            _query_params.append(("end_date", _params["end_date"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "UserTransactionsPagedResponse",
            "401": "Response401GetUserTransactionsUsersIdTransactionsGet",
        }

        return self.api_client.call_api(
            "/users/{id}/transactions",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
