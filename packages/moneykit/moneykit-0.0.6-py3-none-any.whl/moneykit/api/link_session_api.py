# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Any, Dict, Optional

from pydantic import validate_arguments

from moneykit.api_client import ApiClient
from moneykit.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from moneykit.models.create_link_session_body import CreateLinkSessionBody
from moneykit.models.create_link_session_response import CreateLinkSessionResponse
from moneykit.models.exchange_token_body import ExchangeTokenBody
from moneykit.models.exchange_token_response import ExchangeTokenResponse


class LinkSessionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_link_session(
        self,
        create_link_session_body: CreateLinkSessionBody,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ) -> CreateLinkSessionResponse:  # noqa: E501
        """/link-session  # noqa: E501

        This endpoint is to be called by your back end, to establish a new link session         for creating a link to your end user's institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_link_session(create_link_session_body, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param create_link_session_body: (required)
        :type create_link_session_body: CreateLinkSessionBody
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateLinkSessionResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.create_link_session_with_http_info(
            create_link_session_body, moneykit_version, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_link_session_with_http_info(
        self,
        create_link_session_body: CreateLinkSessionBody,
        moneykit_version: Optional[Dict[str, Any]] = None,
        **kwargs,
    ):  # noqa: E501
        """/link-session  # noqa: E501

        This endpoint is to be called by your back end, to establish a new link session         for creating a link to your end user's institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_link_session_with_http_info(create_link_session_body, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param create_link_session_body: (required)
        :type create_link_session_body: CreateLinkSessionBody
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateLinkSessionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_link_session_body", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_link_session" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_link_session_body"]:
            _body_params = _params["create_link_session_body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "201": "CreateLinkSessionResponse",
            "401": "AnyOfAPIErrorAuthExpiredAccessTokenResponseAPIErrorAuthUnauthorizedResponse",
            "403": "LinkSessionErrorForbiddenConfigResponse",
        }

        return self.api_client.call_api(
            "/link-session",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def exchange_token(
        self, exchange_token_body: ExchangeTokenBody, moneykit_version: Optional[Dict[str, Any]] = None, **kwargs
    ) -> ExchangeTokenResponse:  # noqa: E501
        """/link-session/exchange-token  # noqa: E501

        After the end user has successfully completed the linking process, your back end     calls this endpoint to exchange the token received by your front end for a`link_id` that can be used to access     the link's data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_token(exchange_token_body, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param exchange_token_body: (required)
        :type exchange_token_body: ExchangeTokenBody
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExchangeTokenResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.exchange_token_with_http_info(exchange_token_body, moneykit_version, **kwargs)  # noqa: E501

    @validate_arguments
    def exchange_token_with_http_info(
        self, exchange_token_body: ExchangeTokenBody, moneykit_version: Optional[Dict[str, Any]] = None, **kwargs
    ):  # noqa: E501
        """/link-session/exchange-token  # noqa: E501

        After the end user has successfully completed the linking process, your back end     calls this endpoint to exchange the token received by your front end for a`link_id` that can be used to access     the link's data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_token_with_http_info(exchange_token_body, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param exchange_token_body: (required)
        :type exchange_token_body: ExchangeTokenBody
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExchangeTokenResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["exchange_token_body", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method exchange_token" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["exchange_token_body"]:
            _body_params = _params["exchange_token_body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "201": "ExchangeTokenResponse",
            "401": "Response401ExchangeTokenLinkSessionExchangeTokenPost",
            "400": "LinkSessionErrorInvalidTokenExchange",
        }

        return self.api_client.call_api(
            "/link-session/exchange-token",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
