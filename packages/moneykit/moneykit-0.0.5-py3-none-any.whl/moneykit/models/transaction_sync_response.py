# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictBool

from moneykit.models.cursor import Cursor
from moneykit.models.link3 import Link3
from moneykit.models.transactions1 import Transactions1


class TransactionSyncResponse(BaseModel):
    """
    TransactionSyncResponse
    """

    transactions: Transactions1 = ...
    cursor: Cursor = ...
    has_more: StrictBool = Field(
        ...,
        description="This condition indicates the presence of transaction updates exceeding the requested count.         If true, additional updates can be retrieved by making an additional request with cursor set to next_cursor.",
    )
    link: Link3 = ...
    __properties = ["transactions", "cursor", "has_more", "link"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransactionSyncResponse:
        """Create an instance of TransactionSyncResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of transactions
        if self.transactions:
            _dict["transactions"] = self.transactions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cursor
        if self.cursor:
            _dict["cursor"] = self.cursor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict["link"] = self.link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionSyncResponse:
        """Create an instance of TransactionSyncResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TransactionSyncResponse.parse_obj(obj)

        _obj = TransactionSyncResponse.parse_obj(
            {
                "transactions": Transactions1.from_dict(obj.get("transactions"))
                if obj.get("transactions") is not None
                else None,
                "cursor": Cursor.from_dict(obj.get("cursor")) if obj.get("cursor") is not None else None,
                "has_more": obj.get("has_more"),
                "link": Link3.from_dict(obj.get("link")) if obj.get("link") is not None else None,
            }
        )
        return _obj
