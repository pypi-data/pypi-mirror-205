# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, constr, validator


class Email1(BaseModel):
    """
    The user's email address.  This field is optional, but either email or phone must be provided         to enable improved link conversion via the MoneyID system.
    """

    address: constr(strict=True, max_length=254, min_length=4) = Field(..., description="The user's email address.")
    customer_verified_at: Optional[datetime] = Field(
        None,
        description="Optional timestamp that marks when you last verified this email (such as when the user most         recently clicked a verification url sent to this address).         Only include this field if you verified the address.  You may supply zeros if the time (but not the date)         is unknown.",
    )
    __properties = ["address", "customer_verified_at"]

    @validator("address")
    def address_validate_regular_expression(cls, v):
        if not re.match(r"[^@]+@[^@]+\.[^@]+", v):
            raise ValueError(r"must validate the regular expression /[^@]+@[^@]+\.[^@]+/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Email1:
        """Create an instance of Email1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if customer_verified_at (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_verified_at is None and "customer_verified_at" in self.__fields_set__:
            _dict["customer_verified_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Email1:
        """Create an instance of Email1 from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Email1.parse_obj(obj)

        _obj = Email1.parse_obj(
            {"address": obj.get("address"), "customer_verified_at": obj.get("customer_verified_at")}
        )
        return _obj
