# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, constr, validator

from moneykit.models.email1 import Email1
from moneykit.models.phone import Phone


class LinkSessionCustomerUser(BaseModel):
    """
    LinkSessionCustomerUser
    """

    id: constr(strict=True, max_length=150, min_length=4) = Field(
        ...,
        description="Your own unique ID for this user.  Typically this will be a UUID or primary key         from your application.",
    )
    email: Optional[Email1] = None
    phone: Optional[Phone] = None
    __properties = ["id", "email", "phone"]

    @validator("id")
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^[a-zA-Z0-9-_]+$", v):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-_]+$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LinkSessionCustomerUser:
        """Create an instance of LinkSessionCustomerUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict["email"] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict["phone"] = self.phone.to_dict()
        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict["email"] = None

        # set to None if phone (nullable) is None
        # and __fields_set__ contains the field
        if self.phone is None and "phone" in self.__fields_set__:
            _dict["phone"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LinkSessionCustomerUser:
        """Create an instance of LinkSessionCustomerUser from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return LinkSessionCustomerUser.parse_obj(obj)

        _obj = LinkSessionCustomerUser.parse_obj(
            {
                "id": obj.get("id"),
                "email": Email1.from_dict(obj.get("email")) if obj.get("email") is not None else None,
                "phone": Phone.from_dict(obj.get("phone")) if obj.get("phone") is not None else None,
            }
        )
        return _obj
