# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist, constr


class UpdateLinkBody(BaseModel):
    """
    UpdateLinkBody
    """

    webhook: Optional[constr(strict=True, max_length=65536, min_length=1)] = Field(
        None,
        description="Sets the webhook URL for this link.         To remove a webhook for this link, set to `null`.",
    )
    tags: Optional[conlist(StrictStr)] = Field(None, description="Arbitrary strings used to describe this link.")
    __properties = ["webhook", "tags"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateLinkBody:
        """Create an instance of UpdateLinkBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if webhook (nullable) is None
        # and __fields_set__ contains the field
        if self.webhook is None and "webhook" in self.__fields_set__:
            _dict["webhook"] = None

        # set to None if tags (nullable) is None
        # and __fields_set__ contains the field
        if self.tags is None and "tags" in self.__fields_set__:
            _dict["tags"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateLinkBody:
        """Create an instance of UpdateLinkBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateLinkBody.parse_obj(obj)

        _obj = UpdateLinkBody.parse_obj({"webhook": obj.get("webhook"), "tags": obj.get("tags")})
        return _obj
