# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr


class Address(BaseModel):
    """
    Address
    """

    city: Optional[StrictStr] = Field(None, description="The city of the address.")
    country: Optional[StrictStr] = Field(None, description="The country of the address.")
    postal_code: Optional[StrictStr] = Field(None, description="The postal or zip code of the address.")
    region: Optional[StrictStr] = Field(None, description="The region or state of the address.")
    street: Optional[StrictStr] = Field(None, description="The street of the address.")
    primary: Optional[StrictBool] = Field(
        False, description="Indicates if this is the primary address for the account owner."
    )
    __properties = ["city", "country", "postal_code", "region", "street", "primary"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Address:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if city (nullable) is None
        # and __fields_set__ contains the field
        if self.city is None and "city" in self.__fields_set__:
            _dict["city"] = None

        # set to None if country (nullable) is None
        # and __fields_set__ contains the field
        if self.country is None and "country" in self.__fields_set__:
            _dict["country"] = None

        # set to None if postal_code (nullable) is None
        # and __fields_set__ contains the field
        if self.postal_code is None and "postal_code" in self.__fields_set__:
            _dict["postal_code"] = None

        # set to None if region (nullable) is None
        # and __fields_set__ contains the field
        if self.region is None and "region" in self.__fields_set__:
            _dict["region"] = None

        # set to None if street (nullable) is None
        # and __fields_set__ contains the field
        if self.street is None and "street" in self.__fields_set__:
            _dict["street"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Address:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Address.parse_obj(obj)

        _obj = Address.parse_obj(
            {
                "city": obj.get("city"),
                "country": obj.get("country"),
                "postal_code": obj.get("postal_code"),
                "region": obj.get("region"),
                "street": obj.get("street"),
                "primary": obj.get("primary") if obj.get("primary") is not None else False,
            }
        )
        return _obj
