# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Any, Optional

from pydantic import Field, StrictStr, conlist, validate_arguments
from typing_extensions import Annotated

from moneykit.api_client import ApiClient
from moneykit.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from moneykit.models.identity_response import IdentityResponse


class IdentityApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_identities(
        self,
        id: Annotated[StrictStr, Field(..., description="The unique ID for this link.")],
        account_ids: Annotated[
            Optional[conlist(StrictStr)], Field(description="An optional list of account IDs to filter the results.")
        ] = None,
        moneykit_version: Optional[Any] = None,
        **kwargs,
    ) -> IdentityResponse:  # noqa: E501
        """/links/{id}/identity  # noqa: E501

        Returns account owner information from the institution, including names, emails, phone     numbers, and addresses, for all permissioned accounts associated with a <a href=#tag/Links>link</a>.     <p>Some fields may be empty, if not provided by the institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_identities(id, account_ids, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this link. (required)
        :type id: str
        :param account_ids: An optional list of account IDs to filter the results.
        :type account_ids: List[str]
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IdentityResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_identities_with_http_info(id, account_ids, moneykit_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_identities_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The unique ID for this link.")],
        account_ids: Annotated[
            Optional[conlist(StrictStr)], Field(description="An optional list of account IDs to filter the results.")
        ] = None,
        moneykit_version: Optional[Any] = None,
        **kwargs,
    ):  # noqa: E501
        """/links/{id}/identity  # noqa: E501

        Returns account owner information from the institution, including names, emails, phone     numbers, and addresses, for all permissioned accounts associated with a <a href=#tag/Links>link</a>.     <p>Some fields may be empty, if not provided by the institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_identities_with_http_info(id, account_ids, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique ID for this link. (required)
        :type id: str
        :param account_ids: An optional list of account IDs to filter the results.
        :type account_ids: List[str]
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IdentityResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "account_ids", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_identities" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        if _params.get("account_ids") is not None:  # noqa: E501
            _query_params.append(("account_ids", _params["account_ids"]))
            _collection_formats["account_ids"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "IdentityResponse",
            "401": "Response401GetIdentitiesLinksIdIdentityGet",
            "429": "APIErrorRateLimitExceededResponse",
            "404": "LinkErrorNotFoundResponse",
            "403": "LinkErrorForbiddenActionResponse",
            "410": "LinkErrorDeletedResponse",
            "422": "LinkErrorBadStateResponse",
        }

        return self.api_client.call_api(
            "/links/{id}/identity",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
