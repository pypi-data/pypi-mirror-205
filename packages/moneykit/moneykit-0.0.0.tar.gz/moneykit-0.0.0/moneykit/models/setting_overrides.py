# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, conlist

from moneykit.models.country import Country
from moneykit.models.link_permissions import LinkPermissions
from moneykit.models.products1 import Products1
from moneykit.models.provider import Provider


class SettingOverrides(BaseModel):
    """
    SettingOverrides
    """

    providers: Optional[conlist(Provider, unique_items=True)] = Field(
        None,
        description="If provided, restricts the available institutions to those supported             by **any** of these providers.",
    )
    link_permissions: Optional[LinkPermissions] = None
    products: Optional[Products1] = None
    countries: Optional[conlist(Country, unique_items=True)] = Field(
        None, description="Restricts the available institutions to those in **any** of these countries."
    )
    __properties = ["providers", "link_permissions", "products", "countries"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingOverrides:
        """Create an instance of SettingOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of link_permissions
        if self.link_permissions:
            _dict["link_permissions"] = self.link_permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of products
        if self.products:
            _dict["products"] = self.products.to_dict()
        # set to None if providers (nullable) is None
        # and __fields_set__ contains the field
        if self.providers is None and "providers" in self.__fields_set__:
            _dict["providers"] = None

        # set to None if link_permissions (nullable) is None
        # and __fields_set__ contains the field
        if self.link_permissions is None and "link_permissions" in self.__fields_set__:
            _dict["link_permissions"] = None

        # set to None if products (nullable) is None
        # and __fields_set__ contains the field
        if self.products is None and "products" in self.__fields_set__:
            _dict["products"] = None

        # set to None if countries (nullable) is None
        # and __fields_set__ contains the field
        if self.countries is None and "countries" in self.__fields_set__:
            _dict["countries"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingOverrides:
        """Create an instance of SettingOverrides from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SettingOverrides.parse_obj(obj)

        _obj = SettingOverrides.parse_obj(
            {
                "providers": obj.get("providers"),
                "link_permissions": LinkPermissions.from_dict(obj.get("link_permissions"))
                if obj.get("link_permissions") is not None
                else None,
                "products": Products1.from_dict(obj.get("products")) if obj.get("products") is not None else None,
                "countries": obj.get("countries"),
            }
        )
        return _obj
