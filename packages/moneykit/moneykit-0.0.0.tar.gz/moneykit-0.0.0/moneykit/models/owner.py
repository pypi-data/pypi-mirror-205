# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictStr, conlist

from moneykit.models.address import Address
from moneykit.models.email import Email
from moneykit.models.phone_number import PhoneNumber


class Owner(BaseModel):
    """
    Owner
    """

    names: conlist(StrictStr) = Field(..., description="A list of names for the account owner.")
    addresses: conlist(Address) = Field(
        ..., description="A list of addresses for the account owner. Some addresses can appear as incomplete."
    )
    phone_numbers: conlist(PhoneNumber) = Field(..., description="A list of phone numbers for the account owner.")
    emails: conlist(Email) = Field(..., description="A list of email addresses for the account owner.")
    __properties = ["names", "addresses", "phone_numbers", "emails"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Owner:
        """Create an instance of Owner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict["addresses"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item in self.phone_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict["phone_numbers"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item in self.emails:
                if _item:
                    _items.append(_item.to_dict())
            _dict["emails"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Owner:
        """Create an instance of Owner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Owner.parse_obj(obj)

        _obj = Owner.parse_obj(
            {
                "names": obj.get("names"),
                "addresses": [Address.from_dict(_item) for _item in obj.get("addresses")]
                if obj.get("addresses") is not None
                else None,
                "phone_numbers": [PhoneNumber.from_dict(_item) for _item in obj.get("phone_numbers")]
                if obj.get("phone_numbers") is not None
                else None,
                "emails": [Email.from_dict(_item) for _item in obj.get("emails")]
                if obj.get("emails") is not None
                else None,
            }
        )
        return _obj
