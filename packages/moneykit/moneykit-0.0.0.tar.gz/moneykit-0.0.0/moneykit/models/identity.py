# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool


class Identity(BaseModel):
    """
    Identity
    """

    required: Optional[StrictBool] = Field(
        False, description="If true, only institutions supporting this product will be available."
    )
    prefetch: Optional[StrictBool] = Field(
        False,
        description="If true, MoneyKit will begin preparing this data to make it available as soon as possible after linking even if `required` is false. If false, MoneyKit will prepare the data after the first manual data refresh.",
    )
    __properties = ["required", "prefetch"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Identity:
        """Create an instance of Identity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Identity:
        """Create an instance of Identity from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Identity.parse_obj(obj)

        _obj = Identity.parse_obj(
            {
                "required": obj.get("required") if obj.get("required") is not None else False,
                "prefetch": obj.get("prefetch") if obj.get("prefetch") is not None else False,
            }
        )
        return _obj
