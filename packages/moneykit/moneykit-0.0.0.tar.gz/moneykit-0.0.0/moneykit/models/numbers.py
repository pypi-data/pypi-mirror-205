# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, conlist

from moneykit.models.ach_number import AchNumber
from moneykit.models.bacs_number import BacsNumber
from moneykit.models.eft_number import EftNumber
from moneykit.models.international_number import InternationalNumber


class Numbers(BaseModel):
    """
    The various types of account numbers.
    """

    ach: conlist(AchNumber) = Field(..., description="List of ACH account numbers.")
    bacs: conlist(BacsNumber) = Field(..., description="List of BACS account numbers.")
    eft: conlist(EftNumber) = Field(..., description="List of EFT account numbers.")
    international: conlist(InternationalNumber) = Field(..., description="List of international account numbers.")
    __properties = ["ach", "bacs", "eft", "international"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Numbers:
        """Create an instance of Numbers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ach (list)
        _items = []
        if self.ach:
            for _item in self.ach:
                if _item:
                    _items.append(_item.to_dict())
            _dict["ach"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bacs (list)
        _items = []
        if self.bacs:
            for _item in self.bacs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["bacs"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in eft (list)
        _items = []
        if self.eft:
            for _item in self.eft:
                if _item:
                    _items.append(_item.to_dict())
            _dict["eft"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in international (list)
        _items = []
        if self.international:
            for _item in self.international:
                if _item:
                    _items.append(_item.to_dict())
            _dict["international"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Numbers:
        """Create an instance of Numbers from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Numbers.parse_obj(obj)

        _obj = Numbers.parse_obj(
            {
                "ach": [AchNumber.from_dict(_item) for _item in obj.get("ach")] if obj.get("ach") is not None else None,
                "bacs": [BacsNumber.from_dict(_item) for _item in obj.get("bacs")]
                if obj.get("bacs") is not None
                else None,
                "eft": [EftNumber.from_dict(_item) for _item in obj.get("eft")] if obj.get("eft") is not None else None,
                "international": [InternationalNumber.from_dict(_item) for _item in obj.get("international")]
                if obj.get("international") is not None
                else None,
            }
        )
        return _obj
