# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictFloat

from moneykit.models.currency import Currency


class AccountBalances(BaseModel):
    """
    AccountBalances
    """

    currency: Currency = ...
    available: Optional[StrictFloat] = Field(
        None,
        description="The amount of funds available for use.  Not all institutions report the available balance.             <p>Note that the available balance typically does not include overdraft limits.",
    )
    current: Optional[StrictFloat] = Field(
        None,
        description="The total amount of funds in the account.             <p>For credit or loan accounts, a positive number indicates the amount owed by the account holder.             If the balance is negative (this is rare), this indicates an amount owed **to** the account holder.             <p>For depository or investment accounts, a positive number is the asset value of the account.             If the balance is negative (this is rare), this indicates an overdraft or margin condition.",
    )
    limit: Optional[StrictFloat] = Field(
        None,
        description="The credit limit on the account.  Typically this exists only for credit-type accounts.             <p>In some cases, this may represent the overdraft limit for depository accounts.",
    )
    __properties = ["currency", "available", "current", "limit"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountBalances:
        """Create an instance of AccountBalances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if available (nullable) is None
        # and __fields_set__ contains the field
        if self.available is None and "available" in self.__fields_set__:
            _dict["available"] = None

        # set to None if current (nullable) is None
        # and __fields_set__ contains the field
        if self.current is None and "current" in self.__fields_set__:
            _dict["current"] = None

        # set to None if limit (nullable) is None
        # and __fields_set__ contains the field
        if self.limit is None and "limit" in self.__fields_set__:
            _dict["limit"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountBalances:
        """Create an instance of AccountBalances from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AccountBalances.parse_obj(obj)

        _obj = AccountBalances.parse_obj(
            {
                "currency": obj.get("currency"),
                "available": obj.get("available"),
                "current": obj.get("current"),
                "limit": obj.get("limit"),
            }
        )
        return _obj
