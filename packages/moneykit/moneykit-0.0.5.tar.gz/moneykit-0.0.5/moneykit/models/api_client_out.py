# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictStr

from moneykit.models.app import App


class APIClientOut(BaseModel):
    """
    MoneyKit API client for an application.
    """

    client_id: StrictStr = Field(..., description="Your application's MoneyKit client ID.")
    client_name: StrictStr = Field(..., description="Friendly API client name for identification.")
    scope: StrictStr = Field(..., description="Actions allowed by the client.")
    app: App = ...
    disabled_at: Optional[datetime] = Field(None, description="Set to timestamp if the client has been disabled.")
    __properties = ["client_id", "client_name", "scope", "app", "disabled_at"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> APIClientOut:
        """Create an instance of APIClientOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict["app"] = self.app.to_dict()
        # set to None if disabled_at (nullable) is None
        # and __fields_set__ contains the field
        if self.disabled_at is None and "disabled_at" in self.__fields_set__:
            _dict["disabled_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> APIClientOut:
        """Create an instance of APIClientOut from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return APIClientOut.parse_obj(obj)

        _obj = APIClientOut.parse_obj(
            {
                "client_id": obj.get("client_id"),
                "client_name": obj.get("client_name"),
                "scope": obj.get("scope"),
                "app": App.from_dict(obj.get("app")) if obj.get("app") is not None else None,
                "disabled_at": obj.get("disabled_at"),
            }
        )
        return _obj
