# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist

from moneykit.models.link_error import LinkError
from moneykit.models.link_state import LinkState
from moneykit.models.products import Products


class Link(BaseModel):
    """
    Link that the account is associated with.
    """

    link_id: StrictStr = Field(..., description="The unique ID for this link.")
    institution_id: StrictStr = Field(..., description="The unique ID for the institution this link is connected to.")
    state: LinkState = ...
    error_code: Optional[LinkError] = None
    last_synced_at: Optional[datetime] = Field(
        None, description="An ISO-8601 timestamp indicating the last time that the account was updated."
    )
    tags: Optional[conlist(StrictStr)] = Field(None, description="Arbitrary strings used to describe this link.")
    products: Products = ...
    __properties = ["link_id", "institution_id", "state", "error_code", "last_synced_at", "tags", "products"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Link:
        """Create an instance of Link from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of products
        if self.products:
            _dict["products"] = self.products.to_dict()
        # set to None if error_code (nullable) is None
        # and __fields_set__ contains the field
        if self.error_code is None and "error_code" in self.__fields_set__:
            _dict["error_code"] = None

        # set to None if last_synced_at (nullable) is None
        # and __fields_set__ contains the field
        if self.last_synced_at is None and "last_synced_at" in self.__fields_set__:
            _dict["last_synced_at"] = None

        # set to None if tags (nullable) is None
        # and __fields_set__ contains the field
        if self.tags is None and "tags" in self.__fields_set__:
            _dict["tags"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Link:
        """Create an instance of Link from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Link.parse_obj(obj)

        _obj = Link.parse_obj(
            {
                "link_id": obj.get("link_id"),
                "institution_id": obj.get("institution_id"),
                "state": obj.get("state"),
                "error_code": obj.get("error_code"),
                "last_synced_at": obj.get("last_synced_at"),
                "tags": obj.get("tags"),
                "products": Products.from_dict(obj.get("products")) if obj.get("products") is not None else None,
            }
        )
        return _obj
