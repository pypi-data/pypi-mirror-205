# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist, validator

from moneykit.models.validation_error import ValidationError


class HTTPValidationError(BaseModel):
    """
    HTTPValidationError
    """

    error_code: Optional[StrictStr] = "api_error.request.validation_failed"
    error_message: Optional[StrictStr] = Field("Request validation error", description="Error message")
    documentation_url: Optional[StrictStr] = None
    validation_errors: conlist(ValidationError) = ...
    __properties = ["error_code", "error_message", "documentation_url", "validation_errors"]

    @validator("error_code")
    def error_code_validate_enum(cls, v):
        if v is None:
            return v
        if v not in ("api_error.request.validation_failed"):
            raise ValueError("must be one of enum values ('api_error.request.validation_failed')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HTTPValidationError:
        """Create an instance of HTTPValidationError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in validation_errors (list)
        _items = []
        if self.validation_errors:
            for _item in self.validation_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict["validation_errors"] = _items
        # set to None if documentation_url (nullable) is None
        # and __fields_set__ contains the field
        if self.documentation_url is None and "documentation_url" in self.__fields_set__:
            _dict["documentation_url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HTTPValidationError:
        """Create an instance of HTTPValidationError from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return HTTPValidationError.parse_obj(obj)

        _obj = HTTPValidationError.parse_obj(
            {
                "error_code": obj.get("error_code")
                if obj.get("error_code") is not None
                else "api_error.request.validation_failed",
                "error_message": obj.get("error_message")
                if obj.get("error_message") is not None
                else "Request validation error",
                "documentation_url": obj.get("documentation_url"),
                "validation_errors": [ValidationError.from_dict(_item) for _item in obj.get("validation_errors")]
                if obj.get("validation_errors") is not None
                else None,
            }
        )
        return _obj
