# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr

from moneykit.models.transaction_type import TransactionType


class Transaction(BaseModel):
    """
    Transaction
    """

    transaction_id: StrictStr = Field(..., description="The unique ID for this transaction.")
    account_id: StrictStr = Field(..., description="The ID of the account in which this transaction occurred.")
    amount: StrictStr = Field(
        ...,
        description="The amount of this transaction, denominated in account currency.  This amount is always         non-negative.  The `type` field indicates whether it is entering or leaving the account.",
    )
    type: TransactionType = ...
    currency: StrictStr = Field(..., description="The ISO-4217 currency code of the transaction.")
    var_date: date = Field(
        ...,
        alias="date",
        description="The effective (posted) date the transaction, in ISO-8601 format.  For pending transactions,             this date is when the transaction was initiated.",
    )
    description: Optional[StrictStr] = Field(
        None,
        description="A normalized, cleaned transaction description suitable for presentation to the end user.             Commonly this will be the merchant or counterparty name.",
    )
    raw_description: Optional[StrictStr] = Field(
        None, description="The raw transaction description as provided by the institution, where available."
    )
    pending: StrictBool = Field(
        ...,
        description="If true, this transaction is pending or unsettled and has not yet affected the account.         Commonly these are credit card transactions, particularly approvals (holds) such as for hotel or restaurant         reservations placed in advance where the final amount is still to be determined.",
    )
    category: Optional[StrictStr] = Field(
        None,
        description="The category for this transaction, given as a dotted string indicating a hierarchical         categorization.  See <a href=/pages/categories>Transaction Categories</a> for the list of possible transaction types.",
    )
    __properties = [
        "transaction_id",
        "account_id",
        "amount",
        "type",
        "currency",
        "date",
        "description",
        "raw_description",
        "pending",
        "category",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transaction:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        # set to None if raw_description (nullable) is None
        # and __fields_set__ contains the field
        if self.raw_description is None and "raw_description" in self.__fields_set__:
            _dict["raw_description"] = None

        # set to None if category (nullable) is None
        # and __fields_set__ contains the field
        if self.category is None and "category" in self.__fields_set__:
            _dict["category"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transaction:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Transaction.parse_obj(obj)

        _obj = Transaction.parse_obj(
            {
                "transaction_id": obj.get("transaction_id"),
                "account_id": obj.get("account_id"),
                "amount": obj.get("amount"),
                "type": obj.get("type"),
                "currency": obj.get("currency"),
                "var_date": obj.get("date"),
                "description": obj.get("description"),
                "raw_description": obj.get("raw_description"),
                "pending": obj.get("pending"),
                "category": obj.get("category"),
            }
        )
        return _obj
