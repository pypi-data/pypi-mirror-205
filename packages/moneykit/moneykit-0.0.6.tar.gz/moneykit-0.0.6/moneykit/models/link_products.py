# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from pydantic import BaseModel


class LinkProducts(BaseModel):
    """
    LinkProducts
    """

    accounts: Optional[Dict[str, Any]] = None
    account_numbers: Optional[Dict[str, Any]] = None
    identity: Optional[Dict[str, Any]] = None
    transactions: Optional[Dict[str, Any]] = None
    __properties = ["accounts", "account_numbers", "identity", "transactions"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LinkProducts:
        """Create an instance of LinkProducts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of accounts
        if self.accounts:
            _dict["accounts"] = self.accounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_numbers
        if self.account_numbers:
            _dict["account_numbers"] = self.account_numbers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict["identity"] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transactions
        if self.transactions:
            _dict["transactions"] = self.transactions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LinkProducts:
        """Create an instance of LinkProducts from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return LinkProducts.parse_obj(obj)

        _obj = LinkProducts.parse_obj(
            {
                "accounts": AccountsLinkProduct.from_dict(obj.get("accounts"))
                if obj.get("accounts") is not None
                else None,
                "account_numbers": AccountNumbersLinkProduct.from_dict(obj.get("account_numbers"))
                if obj.get("account_numbers") is not None
                else None,
                "identity": IdentityLinkProduct.from_dict(obj.get("identity"))
                if obj.get("identity") is not None
                else None,
                "transactions": TransactionsLinkProduct.from_dict(obj.get("transactions"))
                if obj.get("transactions") is not None
                else None,
            }
        )
        return _obj
