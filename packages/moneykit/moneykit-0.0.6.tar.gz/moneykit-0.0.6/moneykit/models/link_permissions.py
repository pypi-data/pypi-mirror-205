# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, conlist

from moneykit.models.requested_link_permission import RequestedLinkPermission


class LinkPermissions(BaseModel):
    """
    A set of permissions that the user will be prompted to grant. **Required** permissions will             restrict the available institutions list to those which support that type of data.  The data you             will be able to fetch from the link is limited to the granted permissions set.
    """

    requested: conlist(RequestedLinkPermission) = ...
    __properties = ["requested"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LinkPermissions:
        """Create an instance of LinkPermissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in requested (list)
        _items = []
        if self.requested:
            for _item in self.requested:
                if _item:
                    _items.append(_item.to_dict())
            _dict["requested"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LinkPermissions:
        """Create an instance of LinkPermissions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return LinkPermissions.parse_obj(obj)

        _obj = LinkPermissions.parse_obj(
            {
                "requested": [RequestedLinkPermission.from_dict(_item) for _item in obj.get("requested")]
                if obj.get("requested") is not None
                else None
            }
        )
        return _obj
