# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictBool, StrictStr

from moneykit.models.link_permission_scope import LinkPermissionScope


class RequestedLinkPermission(BaseModel):
    """
    RequestedLinkPermission
    """

    scope: LinkPermissionScope = ...
    reason: StrictStr = Field(..., description="The reason your app uses this data that will be displayed to the user.")
    required: StrictBool = Field(
        ...,
        description="If true, only institutions that support this data type will be available,         and the user **must** grant this permission or the link will not be created.  If false, then the available         institutions list may include those that do not support this data type, and even if the user declines to         grant this permission, the link will still be created (so long as at least one permission is granted).",
    )
    __properties = ["scope", "reason", "required"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestedLinkPermission:
        """Create an instance of RequestedLinkPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestedLinkPermission:
        """Create an instance of RequestedLinkPermission from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RequestedLinkPermission.parse_obj(obj)

        _obj = RequestedLinkPermission.parse_obj(
            {"scope": obj.get("scope"), "reason": obj.get("reason"), "required": obj.get("required")}
        )
        return _obj
