# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist

from moneykit.models.account_type import AccountType
from moneykit.models.balances import Balances
from moneykit.models.owner import Owner


class AccountIdentity(BaseModel):
    """
    AccountIdentity
    """

    account_id: StrictStr = Field(
        ...,
        description="MoneyKit's unique ID for the account.         <p>The `account_id` is distinct from the institution's account number.  For accounts that may change account         numbers from time to time, such as credit cards, MoneyKit attempts to keep the `account_id` constant.         However, if MoneyKit can't reconcile the new account data with the old data, the `account_id` may change.",
    )
    account_type: AccountType = ...
    name: StrictStr = Field(
        ...,
        description="The account name, according to the institution.  Note that some institutions allow         the end user to nickname the account; in such cases this field may be the name assigned by the user",
    )
    account_mask: Optional[StrictStr] = Field(
        None,
        description="The last four characters (usually digits) of the account number.         Note that this mask may be non-unique between accounts.",
    )
    balances: Balances = ...
    owners: conlist(Owner) = Field(..., description="A list of owners associated with the account.")
    __properties = ["account_id", "account_type", "name", "account_mask", "balances", "owners"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountIdentity:
        """Create an instance of AccountIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of balances
        if self.balances:
            _dict["balances"] = self.balances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item in self.owners:
                if _item:
                    _items.append(_item.to_dict())
            _dict["owners"] = _items
        # set to None if account_mask (nullable) is None
        # and __fields_set__ contains the field
        if self.account_mask is None and "account_mask" in self.__fields_set__:
            _dict["account_mask"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountIdentity:
        """Create an instance of AccountIdentity from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AccountIdentity.parse_obj(obj)

        _obj = AccountIdentity.parse_obj(
            {
                "account_id": obj.get("account_id"),
                "account_type": obj.get("account_type"),
                "name": obj.get("name"),
                "account_mask": obj.get("account_mask"),
                "balances": Balances.from_dict(obj.get("balances")) if obj.get("balances") is not None else None,
                "owners": [Owner.from_dict(_item) for _item in obj.get("owners")]
                if obj.get("owners") is not None
                else None,
            }
        )
        return _obj
