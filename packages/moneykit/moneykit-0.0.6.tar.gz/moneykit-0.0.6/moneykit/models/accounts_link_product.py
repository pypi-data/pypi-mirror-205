# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field


class AccountsLinkProduct(BaseModel):
    """
    AccountsLinkProduct
    """

    refreshed_at: Optional[datetime] = Field(
        None, description="An ISO-8601 timestamp indicating the last time that the product was updated."
    )
    last_attempted_at: Optional[datetime] = Field(
        None, description="An ISO-8601 timestamp indicating the last time that the product was attempted."
    )
    __properties = ["refreshed_at", "last_attempted_at"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountsLinkProduct:
        """Create an instance of AccountsLinkProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if refreshed_at (nullable) is None
        # and __fields_set__ contains the field
        if self.refreshed_at is None and "refreshed_at" in self.__fields_set__:
            _dict["refreshed_at"] = None

        # set to None if last_attempted_at (nullable) is None
        # and __fields_set__ contains the field
        if self.last_attempted_at is None and "last_attempted_at" in self.__fields_set__:
            _dict["last_attempted_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountsLinkProduct:
        """Create an instance of AccountsLinkProduct from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AccountsLinkProduct.parse_obj(obj)

        _obj = AccountsLinkProduct.parse_obj(
            {"refreshed_at": obj.get("refreshed_at"), "last_attempted_at": obj.get("last_attempted_at")}
        )
        return _obj
