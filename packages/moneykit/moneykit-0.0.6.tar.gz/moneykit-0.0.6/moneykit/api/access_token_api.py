# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Any, Dict, Optional

from pydantic import Field, StrictStr, constr, validate_arguments
from typing_extensions import Annotated

from moneykit.api_client import ApiClient
from moneykit.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from moneykit.models.api_client_out import APIClientOut
from moneykit.models.jwk_set import JWKSet
from moneykit.models.token import Token


class AccessTokenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def generate_access_token(
        self,
        moneykit_version: Optional[Dict[str, Any]] = None,
        grant_type: Annotated[
            Optional[constr(strict=True)], Field(description="Token grant type. Only `client_credentials` supported.")
        ] = None,
        scope: Annotated[
            Optional[StrictStr],
            Field(
                description="Actions to be allowed for this token, given as one or more strings separated by spaces.             If omitted, all actions allowed for your application will be granted to this token."
            ),
        ] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Your application's MoneyKit client ID.")] = None,
        client_secret: Annotated[
            Optional[StrictStr], Field(description="Your application's MoneyKit client secret.")
        ] = None,
        **kwargs,
    ) -> Token:  # noqa: E501
        """/auth/token  # noqa: E501

        Create a new short-lived access token by validating your `client_id` and `client_secret`.  The `access_token` is to be forwarded with all subsequent requests as `Authorization: Bearer {access_token}` HTTP header.  When the token expires you must regenerate your `access_token`.  The `client_id` and `client_secret` can be supplied as POST body parameters, or as a HTTP basic auth header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_access_token(moneykit_version, grant_type, scope, client_id, client_secret, async_req=True)
        >>> result = thread.get()

        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param grant_type: Token grant type. Only `client_credentials` supported.
        :type grant_type: str
        :param scope: Actions to be allowed for this token, given as one or more strings separated by spaces.             If omitted, all actions allowed for your application will be granted to this token.
        :type scope: str
        :param client_id: Your application's MoneyKit client ID.
        :type client_id: str
        :param client_secret: Your application's MoneyKit client secret.
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Token
        """
        kwargs["_return_http_data_only"] = True
        return self.generate_access_token_with_http_info(
            moneykit_version, grant_type, scope, client_id, client_secret, **kwargs
        )  # noqa: E501

    @validate_arguments
    def generate_access_token_with_http_info(
        self,
        moneykit_version: Optional[Dict[str, Any]] = None,
        grant_type: Annotated[
            Optional[constr(strict=True)], Field(description="Token grant type. Only `client_credentials` supported.")
        ] = None,
        scope: Annotated[
            Optional[StrictStr],
            Field(
                description="Actions to be allowed for this token, given as one or more strings separated by spaces.             If omitted, all actions allowed for your application will be granted to this token."
            ),
        ] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Your application's MoneyKit client ID.")] = None,
        client_secret: Annotated[
            Optional[StrictStr], Field(description="Your application's MoneyKit client secret.")
        ] = None,
        **kwargs,
    ):  # noqa: E501
        """/auth/token  # noqa: E501

        Create a new short-lived access token by validating your `client_id` and `client_secret`.  The `access_token` is to be forwarded with all subsequent requests as `Authorization: Bearer {access_token}` HTTP header.  When the token expires you must regenerate your `access_token`.  The `client_id` and `client_secret` can be supplied as POST body parameters, or as a HTTP basic auth header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_access_token_with_http_info(moneykit_version, grant_type, scope, client_id, client_secret, async_req=True)
        >>> result = thread.get()

        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param grant_type: Token grant type. Only `client_credentials` supported.
        :type grant_type: str
        :param scope: Actions to be allowed for this token, given as one or more strings separated by spaces.             If omitted, all actions allowed for your application will be granted to this token.
        :type scope: str
        :param client_id: Your application's MoneyKit client ID.
        :type client_id: str
        :param client_secret: Your application's MoneyKit client secret.
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Token, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["moneykit_version", "grant_type", "scope", "client_id", "client_secret"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method generate_access_token" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        if _params["grant_type"]:
            _form_params.append(("grant_type", _params["grant_type"]))

        if _params["scope"]:
            _form_params.append(("scope", _params["scope"]))

        if _params["client_id"]:
            _form_params.append(("client_id", _params["client_id"]))

        if _params["client_secret"]:
            _form_params.append(("client_secret", _params["client_secret"]))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/x-www-form-urlencoded"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["HTTPBasic"]  # noqa: E501

        _response_types_map = {
            "201": "Token",
            "400": "APIErrorAuthUnauthorizedResponse",
            "401": "APIErrorAuthUnauthorizedResponse",
        }

        return self.api_client.call_api(
            "/auth/token",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_well_known_jwks(self, moneykit_version: Optional[Dict[str, Any]] = None, **kwargs) -> JWKSet:  # noqa: E501
        """JSON Web Key Set  # noqa: E501

        The JSON Web Key Set (JWKS) is a set of keys containing the public keys used to verify webhook JSON Web Tokens (JWT) issued by MoneyKit webhooks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_well_known_jwks(moneykit_version, async_req=True)
        >>> result = thread.get()

        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JWKSet
        """
        kwargs["_return_http_data_only"] = True
        return self.get_well_known_jwks_with_http_info(moneykit_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_well_known_jwks_with_http_info(
        self, moneykit_version: Optional[Dict[str, Any]] = None, **kwargs
    ):  # noqa: E501
        """JSON Web Key Set  # noqa: E501

        The JSON Web Key Set (JWKS) is a set of keys containing the public keys used to verify webhook JSON Web Tokens (JWT) issued by MoneyKit webhooks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_well_known_jwks_with_http_info(moneykit_version, async_req=True)
        >>> result = thread.get()

        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JWKSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_well_known_jwks" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "JWKSet",
            "401": "Response401GetWellKnownJwksWellKnownJwksJsonGet",
        }

        return self.api_client.call_api(
            "/.well-known/jwks.json",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def instrospect_client(
        self, moneykit_version: Optional[Dict[str, Any]] = None, **kwargs
    ) -> APIClientOut:  # noqa: E501
        """/auth/introspect  # noqa: E501

        Get details about the client and application associated with your `access_token`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.instrospect_client(moneykit_version, async_req=True)
        >>> result = thread.get()

        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: APIClientOut
        """
        kwargs["_return_http_data_only"] = True
        return self.instrospect_client_with_http_info(moneykit_version, **kwargs)  # noqa: E501

    @validate_arguments
    def instrospect_client_with_http_info(
        self, moneykit_version: Optional[Dict[str, Any]] = None, **kwargs
    ):  # noqa: E501
        """/auth/introspect  # noqa: E501

        Get details about the client and application associated with your `access_token`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.instrospect_client_with_http_info(moneykit_version, async_req=True)
        >>> result = thread.get()

        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(APIClientOut, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method instrospect_client" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "APIClientOut",
            "401": "Response401InstrospectClientAuthIntrospectGet",
        }

        return self.api_client.call_api(
            "/auth/introspect",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
