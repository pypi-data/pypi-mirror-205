# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
from typing import Any, Optional

from pydantic import Field, StrictBool, StrictStr, conint, validate_arguments
from typing_extensions import Annotated

from moneykit.api_client import ApiClient
from moneykit.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from moneykit.models.institution_out import InstitutionOut
from moneykit.models.paged_institution_response import PagedInstitutionResponse


class InstitutionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_institution(
        self,
        institution_id: Annotated[StrictStr, Field(..., description="The institution ID to fetch.")],
        moneykit_version: Optional[Any] = None,
        **kwargs,
    ) -> InstitutionOut:  # noqa: E501
        """/institutions/{institution_id}  # noqa: E501

        Fetches details about a single institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institution(institution_id, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param institution_id: The institution ID to fetch. (required)
        :type institution_id: str
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstitutionOut
        """
        kwargs["_return_http_data_only"] = True
        return self.get_institution_with_http_info(institution_id, moneykit_version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_institution_with_http_info(
        self,
        institution_id: Annotated[StrictStr, Field(..., description="The institution ID to fetch.")],
        moneykit_version: Optional[Any] = None,
        **kwargs,
    ):  # noqa: E501
        """/institutions/{institution_id}  # noqa: E501

        Fetches details about a single institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institution_with_http_info(institution_id, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param institution_id: The institution ID to fetch. (required)
        :type institution_id: str
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstitutionOut, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["institution_id", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_institution" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["institution_id"]:
            _path_params["institution_id"] = _params["institution_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "InstitutionOut",
            "401": "Response401GetInstitutionInstitutionsInstitutionIdGet",
            "429": "APIErrorRateLimitExceededResponse",
            "404": "InstitutionErrorNotFoundResponse",
        }

        return self.api_client.call_api(
            "/institutions/{institution_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_institutions(
        self,
        name: Annotated[
            Optional[StrictStr],
            Field(description="If provided, returns only institutions containing this name (wholly or as a prefix)."),
        ] = None,
        featured: Annotated[
            Optional[StrictBool], Field(description="If true, returns only featured institutions.")
        ] = None,
        cursor: Annotated[
            Optional[StrictStr],
            Field(
                description="Cursor to fetch the next set of institutions. (You get this value from the previous call to `/institutions`.)"
            ),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=100, ge=1)],
            Field(description="A limit on the number of institutions to be returned."),
        ] = None,
        moneykit_version: Optional[Any] = None,
        **kwargs,
    ) -> PagedInstitutionResponse:  # noqa: E501
        """/institutions  # noqa: E501

        Fetches a list of institutions, optionally filtered by name.  Results are paginated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institutions(name, featured, cursor, limit, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param name: If provided, returns only institutions containing this name (wholly or as a prefix).
        :type name: str
        :param featured: If true, returns only featured institutions.
        :type featured: bool
        :param cursor: Cursor to fetch the next set of institutions. (You get this value from the previous call to `/institutions`.)
        :type cursor: str
        :param limit: A limit on the number of institutions to be returned.
        :type limit: int
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedInstitutionResponse
        """
        kwargs["_return_http_data_only"] = True
        return self.get_institutions_with_http_info(
            name, featured, cursor, limit, moneykit_version, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_institutions_with_http_info(
        self,
        name: Annotated[
            Optional[StrictStr],
            Field(description="If provided, returns only institutions containing this name (wholly or as a prefix)."),
        ] = None,
        featured: Annotated[
            Optional[StrictBool], Field(description="If true, returns only featured institutions.")
        ] = None,
        cursor: Annotated[
            Optional[StrictStr],
            Field(
                description="Cursor to fetch the next set of institutions. (You get this value from the previous call to `/institutions`.)"
            ),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=100, ge=1)],
            Field(description="A limit on the number of institutions to be returned."),
        ] = None,
        moneykit_version: Optional[Any] = None,
        **kwargs,
    ):  # noqa: E501
        """/institutions  # noqa: E501

        Fetches a list of institutions, optionally filtered by name.  Results are paginated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institutions_with_http_info(name, featured, cursor, limit, moneykit_version, async_req=True)
        >>> result = thread.get()

        :param name: If provided, returns only institutions containing this name (wholly or as a prefix).
        :type name: str
        :param featured: If true, returns only featured institutions.
        :type featured: bool
        :param cursor: Cursor to fetch the next set of institutions. (You get this value from the previous call to `/institutions`.)
        :type cursor: str
        :param limit: A limit on the number of institutions to be returned.
        :type limit: int
        :param moneykit_version:
        :type moneykit_version: SupportedVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PagedInstitutionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["name", "featured", "cursor", "limit", "moneykit_version"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_institutions" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("featured") is not None:  # noqa: E501
            _query_params.append(("featured", _params["featured"]))

        if _params.get("cursor") is not None:  # noqa: E501
            _query_params.append(("cursor", _params["cursor"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["moneykit_version"]:
            _header_params["moneykit-version"] = _params["moneykit_version"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["clientId", "OAuth2ClientCredentials", "clientSecret"]  # noqa: E501

        _response_types_map = {
            "200": "PagedInstitutionResponse",
            "401": "Response401GetInstitutionsInstitutionsGet",
            "429": "APIErrorRateLimitExceededResponse",
        }

        return self.api_client.call_api(
            "/institutions",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
