# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictInt, conlist

from moneykit.models.app_api_public_accounts_account_out import AppApiPublicAccountsAccountOut
from moneykit.models.link2 import Link2
from moneykit.models.transaction import Transaction


class GetTransactionsResponse(BaseModel):
    """
    GetTransactionsResponse
    """

    total: StrictInt = Field(..., description="The total number of results for this query.")
    page: StrictInt = Field(..., description="The page number corresponding to this batch of results.")
    size: StrictInt = Field(..., description="The number of results in this batch.")
    transactions: conlist(Transaction) = Field(..., description="A list of transactions.")
    accounts: conlist(AppApiPublicAccountsAccountOut) = Field(
        ..., description="A list of accounts for which transactions are being returned."
    )
    link: Link2 = ...
    __properties = ["total", "page", "size", "transactions", "accounts", "link"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetTransactionsResponse:
        """Create an instance of GetTransactionsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item in self.transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["transactions"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["accounts"] = _items
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict["link"] = self.link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetTransactionsResponse:
        """Create an instance of GetTransactionsResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetTransactionsResponse.parse_obj(obj)

        _obj = GetTransactionsResponse.parse_obj(
            {
                "total": obj.get("total"),
                "page": obj.get("page"),
                "size": obj.get("size"),
                "transactions": [Transaction.from_dict(_item) for _item in obj.get("transactions")]
                if obj.get("transactions") is not None
                else None,
                "accounts": [AppApiPublicAccountsAccountOut.from_dict(_item) for _item in obj.get("accounts")]
                if obj.get("accounts") is not None
                else None,
                "link": Link2.from_dict(obj.get("link")) if obj.get("link") is not None else None,
            }
        )
        return _obj
