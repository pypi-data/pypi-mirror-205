# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator

from moneykit.models.link_error import LinkError
from moneykit.models.link_state import LinkState


class LinkStateChangedWebhook(BaseModel):
    """
    LinkStateChangedWebhook
    """

    webhook_event: Optional[StrictStr] = "link.state_changed"
    webhook_major_version: Optional[StrictInt] = 1
    webhook_minor_version: Optional[StrictInt] = 0
    webhook_idempotency_key: StrictStr = ...
    webhook_timestamp: datetime = ...
    link_id: StrictStr = ...
    link_tags: conlist(StrictStr) = ...
    state: LinkState = ...
    error: Optional[LinkError] = None
    error_message: Optional[StrictStr] = None
    __properties = [
        "webhook_event",
        "webhook_major_version",
        "webhook_minor_version",
        "webhook_idempotency_key",
        "webhook_timestamp",
        "link_id",
        "link_tags",
        "state",
        "error",
        "error_message",
    ]

    @validator("webhook_event")
    def webhook_event_validate_enum(cls, v):
        if v is None:
            return v
        if v not in ("link.state_changed"):
            raise ValueError("must be one of enum values ('link.state_changed')")
        return v

    @validator("webhook_major_version")
    def webhook_major_version_validate_enum(cls, v):
        if v is None:
            return v
        if v not in (1):
            raise ValueError("must be one of enum values (1)")
        return v

    @validator("webhook_minor_version")
    def webhook_minor_version_validate_enum(cls, v):
        if v is None:
            return v
        if v not in (0):
            raise ValueError("must be one of enum values (0)")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LinkStateChangedWebhook:
        """Create an instance of LinkStateChangedWebhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if error_message (nullable) is None
        # and __fields_set__ contains the field
        if self.error_message is None and "error_message" in self.__fields_set__:
            _dict["error_message"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LinkStateChangedWebhook:
        """Create an instance of LinkStateChangedWebhook from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return LinkStateChangedWebhook.parse_obj(obj)

        _obj = LinkStateChangedWebhook.parse_obj(
            {
                "webhook_event": obj.get("webhook_event")
                if obj.get("webhook_event") is not None
                else "link.state_changed",
                "webhook_major_version": obj.get("webhook_major_version")
                if obj.get("webhook_major_version") is not None
                else 1,
                "webhook_minor_version": obj.get("webhook_minor_version")
                if obj.get("webhook_minor_version") is not None
                else 0,
                "webhook_idempotency_key": obj.get("webhook_idempotency_key"),
                "webhook_timestamp": obj.get("webhook_timestamp"),
                "link_id": obj.get("link_id"),
                "link_tags": obj.get("link_tags"),
                "state": obj.get("state"),
                "error": obj.get("error"),
                "error_message": obj.get("error_message"),
            }
        )
        return _obj
