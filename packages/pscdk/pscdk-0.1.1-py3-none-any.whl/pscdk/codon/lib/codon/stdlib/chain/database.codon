from .structs import Float128

# int32_t db_store_i64(uint64_t scope, capi_name table, capi_name payer, uint64_t id,  const void* data, uint32_t len);
from C import db_store_i64(u64, u64, u64, u64, Ptr[byte], u32) -> i32
# void db_update_i64(int32_t iterator, capi_name payer, const void* data, uint32_t len);
from C import db_update_i64(i32, u64, Ptr[byte], u32)
# void db_remove_i64(int32_t iterator);
from C import db_remove_i64(i32)
# int32_t db_get_i64(int32_t iterator, const void* data, uint32_t len);
from C import db_get_i64(i32, Ptr[byte], u32) -> u32
# int32_t db_next_i64(int32_t iterator, uint64_t* primary);
from C import db_next_i64(i32, Ptr[u64]) -> i32
# int32_t db_previous_i64(int32_t iterator, uint64_t* primary);
from C import db_previous_i64(i32, Ptr[u64]) -> i32
# int32_t db_find_i64(capi_name code, uint64_t scope, capi_name table, uint64_t id);
from C import db_find_i64(u64, u64, u64, u64) -> i32
# int32_t db_lowerbound_i64(capi_name code, uint64_t scope, capi_name table, uint64_t id);
from C import db_lowerbound_i64(u64, u64, u64, u64) -> i32
# int32_t db_upperbound_i64(capi_name code, uint64_t scope, capi_name table, uint64_t id);
from C import db_upperbound_i64(u64, u64, u64, u64) -> i32
# int32_t db_end_i64(capi_name code, uint64_t scope, capi_name table);
from C import db_end_i64(u64, u64, u64) -> i32

# int32_t db_idx64_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint64_t* secondary);
from C import db_idx64_store(u64, u64, u64, u64, Ptr[u64]) -> i32
# void db_idx64_update(int32_t iterator, capi_name payer, const uint64_t* secondary);
from C import db_idx64_update(i32, u64, Ptr[u64]);
# void db_idx64_remove(int32_t iterator);
from C import db_idx64_remove(i32);
# int32_t db_idx64_next(int32_t iterator, uint64_t* primary);
from C import db_idx64_next(i32, Ptr[u64]) -> i32
# int32_t db_idx64_previous(int32_t iterator, uint64_t* primary);
from C import db_idx64_previous(i32, Ptr[u64]) -> i32
# int32_t db_idx64_find_primary(capi_name code, uint64_t scope, capi_name table, uint64_t* secondary, uint64_t primary);
from C import db_idx64_find_primary(u64, u64, u64, Ptr[u64], u64) -> i32
# int32_t db_idx64_find_secondary(capi_name code, uint64_t scope, capi_name table, const uint64_t* secondary, uint64_t* primary);
from C import db_idx64_find_secondary(u64, u64, u64, Ptr[u64], Ptr[u64]) -> i32
# int32_t db_idx64_lowerbound(capi_name code, uint64_t scope, capi_name table, uint64_t* secondary, uint64_t* primary);
from C import db_idx64_lowerbound(u64, u64, u64, Ptr[u64], Ptr[u64]) -> i32
# int32_t db_idx64_upperbound(capi_name code, uint64_t scope, capi_name table, uint64_t* secondary, uint64_t* primary);
from C import db_idx64_upperbound(u64, u64, u64, Ptr[u64], Ptr[u64]) -> i32
# int32_t db_idx64_end(capi_name code, uint64_t scope, capi_name table);
from C import db_idx64_end(u64, u64, u64) -> i32

# int32_t db_idx128_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint128_t* secondary);
from C import db_idx128_store(u64, u64, u64, u64, Ptr[u128]) -> i32
# void db_idx128_update(int32_t iterator, capi_name payer, const uint128_t* secondary);
from C import db_idx128_update(i32, u64, Ptr[u128]);
# void db_idx128_remove(int32_t iterator);
from C import db_idx128_remove(i32);
# int32_t db_idx128_next(int32_t iterator, uint64_t* primary);
from C import db_idx128_next(i32, Ptr[u64]) -> i32
# int32_t db_idx128_previous(int32_t iterator, uint64_t* primary);
from C import db_idx128_previous(i32, Ptr[u64]) -> i32
# int32_t db_idx128_find_primary(capi_name code, uint64_t scope, capi_name table, uint128_t* secondary, uint64_t primary);
from C import db_idx128_find_primary(u64, u64, u64, Ptr[u128], u64) -> i32
# int32_t db_idx128_find_secondary(capi_name code, uint64_t scope, capi_name table, const uint128_t* secondary, uint64_t* primary);
from C import db_idx128_find_secondary(u64, u64, u64, Ptr[u128], Ptr[u64]) -> i32
# int32_t db_idx128_lowerbound(capi_name code, uint64_t scope, capi_name table, uint128_t* secondary, uint64_t* primary);
from C import db_idx128_lowerbound(u64, u64, u64, Ptr[u128], Ptr[u64]) -> i32
# int32_t db_idx128_upperbound(capi_name code, uint64_t scope, capi_name table, uint128_t* secondary, uint64_t* primary);
from C import db_idx128_upperbound(u64, u64, u64, Ptr[u128], Ptr[u64]) -> i32
# int32_t db_idx128_end(capi_name code, uint64_t scope, capi_name table);
from C import db_idx128_end(u64, u64, u64,) -> i32

# int32_t db_idx256_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint128_t* data, uint32_t data_len );
from C import db_idx256_store(u64, u64, u64, u64, Ptr[u256], u32) -> i32
# void db_idx256_update(int32_t iterator, capi_name payer, const uint128_t* data, uint32_t data_len);
from C import db_idx256_update(i32, u64, Ptr[u256], u32)
# void db_idx256_remove(int32_t iterator);
from C import db_idx256_remove(i32)
# int32_t db_idx256_next(int32_t iterator, uint64_t* primary);
from C import db_idx256_next(i32, Ptr[u64]) -> i32
# int32_t db_idx256_previous(int32_t iterator, uint64_t* primary);
from C import db_idx256_previous(i32, Ptr[u64]) -> i32
# int32_t db_idx256_find_primary(capi_name code, uint64_t scope, capi_name table, uint128_t* data, uint32_t data_len, uint64_t primary);
from C import db_idx256_find_primary(u64, u64, u64, Ptr[u256], u32, u64) -> i32
# int32_t db_idx256_find_secondary(capi_name code, uint64_t scope, capi_name table, const uint128_t* data, uint32_t data_len, uint64_t* primary);
from C import db_idx256_find_secondary(u64, u64, u64, Ptr[u256], u32, Ptr[u64]) -> i32
# int32_t db_idx256_lowerbound(capi_name code, uint64_t scope, capi_name table, uint128_t* data, uint32_t data_len, uint64_t* primary);
from C import db_idx256_lowerbound(u64, u64, u64, Ptr[u256], u32, Ptr[u64]) -> i32
# int32_t db_idx256_upperbound(capi_name code, uint64_t scope, capi_name table, uint128_t* data, uint32_t data_len, uint64_t* primary);
from C import db_idx256_upperbound(u64, u64, u64, Ptr[u256], u32, Ptr[u64]) -> i32
# int32_t db_idx256_end(capi_name code, uint64_t scope, capi_name table);
from C import db_idx256_end(u64, u64, u64) -> i32

# int32_t db_idx_double_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const double* secondary);
from C import db_idx_double_store(u64, u64, u64, u64, Ptr[float]) -> i32
# void db_idx_double_update(int32_t iterator, capi_name payer, const double* secondary);
from C import db_idx_double_update(i32, u64, Ptr[float])
# void db_idx_double_remove(int32_t iterator);
from C import db_idx_double_remove(i32)
# int32_t db_idx_double_next(int32_t iterator, uint64_t* primary);
from C import db_idx_double_next(i32, Ptr[u64]) -> i32
# int32_t db_idx_double_previous(int32_t iterator, uint64_t* primary);
from C import db_idx_double_previous(i32, Ptr[u64]) -> i32
# int32_t db_idx_double_find_primary(capi_name code, uint64_t scope, capi_name table, double* secondary, uint64_t primary);
from C import db_idx_double_find_primary(u64, u64, u64, Ptr[float], u64) -> i32
# int32_t db_idx_double_find_secondary(capi_name code, uint64_t scope, capi_name table, const double* secondary, uint64_t* primary);
from C import db_idx_double_find_secondary(u64, u64, u64, Ptr[float], Ptr[u64]) -> i32
# int32_t db_idx_double_lowerbound(capi_name code, uint64_t scope, capi_name table, double* secondary, uint64_t* primary);
from C import db_idx_double_lowerbound(u64, u64, u64, Ptr[float], Ptr[u64]) -> i32
# int32_t db_idx_double_upperbound(capi_name code, uint64_t scope, capi_name table, double* secondary, uint64_t* primary);
from C import db_idx_double_upperbound(u64, u64, u64, Ptr[float], Ptr[u64]) -> i32
# int32_t db_idx_double_end(capi_name code, uint64_t scope, capi_name table);
from C import db_idx_double_end(u64, u64, u64) -> i32

# int32_t db_idx_long_double_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const long double* secondary);
from C import db_idx_long_double_store(u64, u64, u64, u64, Ptr[Float128]) -> i32
# void db_idx_long_double_update(int32_t iterator, capi_name payer, const long double* secondary);
from C import db_idx_long_double_update(i32, u64, Ptr[Float128])
# void db_idx_long_double_remove(int32_t iterator);
from C import db_idx_long_double_remove(i32);
# int32_t db_idx_long_double_next(int32_t iterator, uint64_t* primary);
from C import db_idx_long_double_next(i32, Ptr[u64]) -> i32
# int32_t db_idx_long_double_previous(int32_t iterator, uint64_t* primary);
from C import db_idx_long_double_previous(i32, Ptr[u64]) -> i32
# int32_t db_idx_long_double_find_primary(capi_name code, uint64_t scope, capi_name table, long double* secondary, uint64_t primary);
from C import db_idx_long_double_find_primary(u64, u64, u64, Ptr[Float128], u64) -> i32
# int32_t db_idx_long_double_find_secondary(capi_name code, uint64_t scope, capi_name table, const long double* secondary, uint64_t* primary);
from C import db_idx_long_double_find_secondary(u64, u64, u64, Ptr[Float128], Ptr[u64]) -> i32
# int32_t db_idx_long_double_lowerbound(capi_name code, uint64_t scope, capi_name table, long double* secondary, uint64_t* primary);
from C import db_idx_long_double_lowerbound(u64, u64, u64, Ptr[Float128], Ptr[u64]) -> i32
# int32_t db_idx_long_double_upperbound(capi_name code, uint64_t scope, capi_name table, long double* secondary, uint64_t* primary);
from C import db_idx_long_double_upperbound(u64, u64, u64, Ptr[Float128], Ptr[u64]) -> i32
# int32_t db_idx_long_double_end(capi_name code, uint64_t scope, capi_name table);
from C import db_idx_long_double_end(u64, u64, u64) -> i32

from .name import Name
from packer import pack, _write, Encoder, Decoder

class PrimaryTable[T](object):
    code: Name
    scope: Name
    table: Name
    
    def __init__(self, code: Name, scope: Name, table: Name):
        self.code = code
        self.scope = scope
        self.table = table

class Iterator[T](object):
    i: i32
    primary: Optional[u64]
    table: PrimaryTable[T]

    def __init__(self, i: i32, table: PrimaryTable[T]):
        self.i = i
        self.table = table
        self.primary = None

    def set_primary(self, primary: u64):
        assert not self.primary
        self.primary = primary

    def get_primary(self) -> u64:
        if self.primary:
            return self.primary
        ret = self.table.get_by_iterator(self)
        self.primary = ret.get_primary()
        return self.primary

    def get_value(self) -> Optional[T]:
        ret = self.table.get_by_iterator(self)
        if self.primary:
            assert self.primary == ret.get_primary()
        return ret

    def is_ok(self) -> bool:
        return self.i >= 0i32

    def is_valid(self) -> bool:
        return self.i != -1i32

    def is_end(self) -> bool:
        return self.i <= -2i32

IDX_64 = 0
IDX_128 = 1
IDX_256 = 2
IDX_DOUBLE = 3
IDX_LONG_DOUBLE = 4

class primary[T](object):
    value: T
    def __init__(self, value: T):
        self.value = value

    def get_primary(self) -> u64:
        if isinstance(self.value, u64):
            return self.value
        return self.value.get_primary()

    def __pack__(self, enc: Encoder):
        self.value.__pack__(enc)

    def __unpack__(dec: Decoder) -> primary[T]:
        return primary[T](T.__unpack__(dec))

    def __call__(self) -> T:
        return self.value

    def __size__(self) -> int:
        return self.value.__size__()

class secondary[T](object):
    value: T

    def __init__(self, value: T):
        self.value = value

    def __pack__(self, enc: Encoder):
        self.value.__pack__(enc)

    def __unpack__(dec: Decoder) -> secondary[T]:
        return secondary[T](T.__unpack__(dec))

    def __call__(self) -> T:
        return self.value

    def __size__(self) -> int:
        return self.value.__size__()

@extend
class PrimaryTable:
    def store(self, item: T, payer: Name) -> Iterator[T]:
        id = item.get_primary()
        data = pack(item)
        i = db_store_i64(self.scope.value, self.table.value, payer.value, id, data.ptr.as_byte(), u32(data.len))
        ret = Iterator[T](i, self)
        ret.set_primary(id)
        return ret

    def update(self, it: Iterator[T], item: T, payer: Name):
        assert it.get_primary() == item.get_primary()
        data = pack(item)
        db_update_i64(it.i, payer.value, data.ptr.as_byte(), u32(data.len))

    def remove(self, it: Iterator[T]):
        db_remove_i64(it.i)

    def find(self, id: u64) -> Iterator[T]:
        i = db_find_i64(self.code.value, self.scope.value, self.table.value, id)
        ret = Iterator[T](i, self)
        if i >= 0i32:
            ret.set_primary(id)
        return ret

    def get(self, id: u64) -> Optional[T]:
        it = self.find(id)
        if not it.is_ok():
            return None
        return self.get_by_iterator(it)

    def set(self, item: T, payer: Name):
        it = self.find(item.get_primary())
        if not it.is_ok():
            self.store(item, payer)
        else:
            self.update(it, item, payer)

    def get_by_iterator(self, it: Iterator[T]) -> Optional[T]:
        if not it.is_ok():
            return None
        size = db_get_i64(it.i, Ptr[byte](0), 0u32)
        data = Ptr[byte](int(size))
        db_get_i64(it.i, data, size)
        dec = Decoder(data, int(size))
        return dec.unpack(T)

    def next(self, it: Iterator[T]) -> Iterator[T]:
        ptr = Ptr[u64](1)
        i = db_next_i64(it.i, ptr)
        return Iterator[T](i, self)

    def previous(self, it: Iterator[T]) -> Iterator[T]:
        ptr = Ptr[u64](1)
        i = db_previous_i64(it.i, ptr)
        return Iterator[T](i, self)

    def lowerbound(self, id: u64):
        i = db_lowerbound_i64(self.code.value, self.scope.value, self.table.value, id)
        return Iterator[T](i, self)

    def upperbound(self, id: u64):
        i = db_upperbound_i64(self.code.value, self.scope.value, self.table.value, id)
        return Iterator[T](i, self)

    def end(self) -> Iterator[T]:
        i = db_end_i64(self.code.value, self.scope.value, self.table.value)
        return Iterator[T](i, self)

class SecondaryIterator(object):
    i: i32
    primary: u64
    table_index: int

    def __init__(self, i: i32, primary: u64, table_index: int):
        self.i = i
        self.primary = primary
        self.table_index = table_index

    def is_ok(self) -> bool:
        return self.i >= 0i32

    def is_valid(self) -> bool:
        return self.i != -1i32

    def is_end(self) -> bool:
        return self.i <= -2i32

@llvm
def _get_data_ptr(o: Ptr[byte], T: type) -> Ptr[T]:
    ret ptr %o

def get_data_ptr(o: Array[byte], T: type) -> Ptr[T]:
    # assert o.len == sizeof(T)
    return _get_data_ptr(o.ptr, T)

class SecondaryValue(object):
    secondary_type: int
    value: Array[byte]

    def __init__(self, value: u64):
        self.secondary_type = IDX_64
        self.value = Array[byte](value.__size__())
        str.memcpy(self.value.ptr.as_byte(), __ptr__(value).as_byte(), value.__size__())

    def __init__(self, value: u128):
        self.secondary_type = IDX_128
        self.value = Array[byte](value.__size__())
        str.memcpy(self.value.ptr.as_byte(), __ptr__(value).as_byte(), value.__size__())

    def __init__(self, value: u256):
        self.secondary_type = IDX_256
        self.value = Array[byte](value.__size__())
        str.memcpy(self.value.ptr.as_byte(), __ptr__(value).as_byte(), value.__size__())

    def __init__(self, value: float):
        self.secondary_type = IDX_DOUBLE
        self.value = Array[byte](value.__size__())
        str.memcpy(self.value.ptr.as_byte(), __ptr__(value).as_byte(), value.__size__())

    def __init__(self, value: Float128):
        self.secondary_type = IDX_LONG_DOUBLE
        self.value = Array[byte](value.__size__())
        str.memcpy(self.value.ptr.as_byte(), __ptr__(value).as_byte(), value.__size__())

    def __eq__(self, other: SecondaryValue):
        if not self.secondary_type == other.secondary_type:
            return False
        return self.value == other.value

    def get_value_u64(self) -> u64:
        assert self.secondary_type == IDX_64
        return get_data_ptr(self.value, T=u64)[0]

    def get_value_u128(self) -> u128:
        assert self.secondary_type == IDX_128
        return get_data_ptr(self.value, T=u128)[0]

    def get_value_u256(self) -> u256:
        assert self.secondary_type == IDX_256
        return get_data_ptr(self.value, T=u256)[0]

    def get_value_double(self) -> float:
        assert self.secondary_type == IDX_DOUBLE
        return get_data_ptr(self.value, T=float)[0]

    def get_value_long_double(self) -> Float128:
        assert self.secondary_type == IDX_LONG_DOUBLE
        return get_data_ptr(self.value, T=Float128)[0]

def to_secondary[T](value: T) -> secondary[T]:
    return secondary[T](value)

class IdxTable(object):
    table_index: int
    code: Name
    scope: Name
    table: Name
    
    def __init__(self, table_index: int, code: Name, scope: Name, table: Name):
        self.table_index = table_index
        self.code = code
        self.scope = scope
        self.table = table

    def get_table_index(self) -> int:
        return self.table_index

    def store(self, id: u64, secondary: SecondaryValue, payer: Name) -> SecondaryIterator:
        raise NotImplementedError()

    # void db_idx64_update(int32_t iterator, capi_name payer, const uint64_t* secondary);
    def update(self, it: SecondaryIterator, secondary: SecondaryValue, payer: Name):
        raise NotImplementedError()

    def remove(self, it: SecondaryIterator):
        raise NotImplementedError()

    def next(self, it: SecondaryIterator) -> SecondaryIterator:
        raise NotImplementedError()

    def previous(self, it: SecondaryIterator) -> SecondaryIterator:
        raise NotImplementedError()

    def find_by_primary(self, primary: u64) -> Tuple[SecondaryIterator, SecondaryValue]:
        raise NotImplementedError()

    def find_by_secondary(self, secondary: SecondaryValue) -> SecondaryIterator:
        raise NotImplementedError()

    def find(self, secondary: SecondaryValue) -> SecondaryIterator:
        raise NotImplementedError()

    def lowerbound(self, secondary: SecondaryValue) -> Tuple[SecondaryIterator, SecondaryValue]:
        raise NotImplementedError()

    def upperbound(self, secondary: SecondaryValue) -> Tuple[SecondaryIterator, SecondaryValue]:
        raise NotImplementedError()

    def end(self) -> SecondaryIterator:
        raise NotImplementedError()

class IdxTable64(object):
    table_index: int
    code: Name
    scope: Name
    table: Name
    
    def __init__(self, table_index: int, code: Name, scope: Name, table: Name):
        self.table_index = table_index
        self.code = code
        self.scope = scope
        self.table = table

    # int32_t db_idx64_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint64_t* secondary);
    def store(self, id: u64, secondary: u64, payer: Name)-> SecondaryIterator:
        # print('+++++++=idx64 store', id, secondary)
        _secondary = secondary
        i = db_idx64_store(self.scope.value, self.table.value, payer.value, id, __ptr__(_secondary))
        if i >= 0i32:
            return SecondaryIterator(i, id, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    # void db_idx64_update(int32_t iterator, capi_name payer, const uint64_t* secondary);
    def update(self, it: SecondaryIterator, secondary: u64, payer: Name):
        db_idx64_update(it.i, payer.value, __ptr__(secondary))

    # void db_idx64_remove(int32_t iterator);
    def remove(self, it: SecondaryIterator):
        db_idx64_remove(it.i)

    # int32_t db_idx64_next(int32_t iterator, uint64_t* primary);
    def next(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx64_next(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx64_previous(int32_t iterator, uint64_t* primary);
    def previous(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx64_previous(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx64_find_primary(capi_name code, uint64_t scope, capi_name table, uint64_t* secondary, uint64_t primary);
    def find_by_primary(self, primary: u64) -> Tuple[SecondaryIterator, u64]:
        secondary: u64 = 0u64
        i = db_idx64_find_primary(self.code.value, self.scope.value, self.table.value, __ptr__(secondary), primary)
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), secondary)

    # int32_t db_idx64_find_secondary(capi_name code, uint64_t scope, capi_name table, const uint64_t* secondary, uint64_t* primary);
    def find_by_secondary(self, secondary: u64) -> SecondaryIterator:
        primary = 0u64
        _secondary = secondary
        i = db_idx64_find_secondary(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return SecondaryIterator(i, primary, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    def find(self, secondary: u64) -> SecondaryIterator:
        return self.find_by_secondary(secondary)

    # int32_t db_idx64_lowerbound(capi_name code, uint64_t scope, capi_name table, uint64_t* secondary, uint64_t* primary);
    def lowerbound(self, secondary: u64) -> Tuple[SecondaryIterator, u64]:
        primary = 0u64
        _secondary: u64 = secondary
        i = db_idx64_lowerbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, -1), 0u64)

    # int32_t db_idx64_upperbound(capi_name code, uint64_t scope, capi_name table, uint64_t* secondary, uint64_t* primary);
    def upperbound(self, secondary: u64) -> Tuple[SecondaryIterator, u64]:
        primary = 0u64
        _secondary: u64 = secondary
        i = db_idx64_upperbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u64)

    # int32_t db_idx64_end(capi_name code, uint64_t scope, capi_name table);
    def end(self) -> SecondaryIterator:
        i = db_idx64_end(self.code.value, self.scope.value, self.table.value)
        return SecondaryIterator(i, 0u64, self.table_index)

class IdxTable128(object):
    table_index: int
    code: Name
    scope: Name
    table: Name
    
    def __init__(self, table_index: int, code: Name, scope: Name, table: Name):
        self.table_index = table_index
        self.code = code
        self.scope = scope
        self.table = table

    # int32_t db_idx128_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint128_t* secondary);
    def store(self, id: u64, secondary: u128, payer: Name) -> SecondaryIterator:
        _secondary: u128 = secondary
        i = db_idx128_store(self.scope.value, self.table.value, payer.value, id, __ptr__(_secondary))
        if i >= 0i32:
            return SecondaryIterator(i, id, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    # void db_idx128_update(int32_t iterator, capi_name payer, const uint128_t* secondary);
    def update(self, it: SecondaryIterator, secondary: u128, payer: Name):
        _secondary: u128 = secondary
        db_idx128_update(it.i, payer.value, __ptr__(_secondary))

    # void db_idx128_remove(int32_t iterator);
    def remove(self, it: SecondaryIterator):
        db_idx128_remove(it.i)

    # int32_t db_idx128_next(int32_t iterator, uint64_t* primary);
    def next(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx128_next(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx128_previous(int32_t iterator, uint64_t* primary);
    def previous(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx128_previous(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx128_find_primary(capi_name code, uint64_t scope, capi_name table, uint128_t* secondary, uint64_t primary);
    def find_by_primary(self, primary: u64) -> Tuple[SecondaryIterator, u128]:
        secondary: u128 = 0u128
        i = db_idx128_find_primary(self.code.value, self.scope.value, self.table.value, __ptr__(secondary), primary)
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u128)

    # int32_t db_idx128_find_secondary(capi_name code, uint64_t scope, capi_name table, const uint128_t* secondary, uint64_t* primary);
    def find_by_secondary(self, secondary: u128) -> SecondaryIterator:
        primary = 0u64
        _secondary: u128 = secondary
        i = db_idx128_find_secondary(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return SecondaryIterator(i, primary, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    def find(self, secondary: u128) -> SecondaryIterator:
        return self.find_by_secondary(secondary)

    # int32_t db_idx128_lowerbound(capi_name code, uint64_t scope, capi_name table, uint128_t* secondary, uint64_t* primary);
    def lowerbound(self, secondary: u128) -> Tuple[SecondaryIterator, u128]:
        primary = 0u64
        _secondary: u128 = secondary
        i = db_idx128_lowerbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u128)

    # int32_t db_idx128_upperbound(capi_name code, uint64_t scope, capi_name table, uint128_t* secondary, uint64_t* primary);
    def upperbound(self, secondary: u128) -> Tuple[SecondaryIterator, u128]:
        primary = 0u64
        _secondary: u128 = secondary
        i = db_idx128_upperbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u128)

    # int32_t db_idx128_end(capi_name code, uint64_t scope, capi_name table);
    def end(self) -> SecondaryIterator:
        i = db_idx128_end(self.code.value, self.scope.value, self.table.value)
        return SecondaryIterator(i, 0u64, self.table_index)

class IdxTable256(object):
    table_index: int
    code: Name
    scope: Name
    table: Name
    
    def __init__(self, table_index: int, code: Name, scope: Name, table: Name):
        self.table_index = table_index
        self.code = code
        self.scope = scope
        self.table = table

    # int32_t db_idx256_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint128_t* data, uint32_t data_len );
    def store(self, id: u64, secondary: u256, payer: Name) -> SecondaryIterator:
        _secondary: u256 = secondary
        i = db_idx256_store(self.scope.value, self.table.value, payer.value, id, __ptr__(_secondary), 2u32)
        if i >= 0i32:
            return SecondaryIterator(i, id, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    # void db_idx256_update(int32_t iterator, capi_name payer, const uint128_t* data, uint32_t data_len);
    def update(self, it: SecondaryIterator, secondary: u256, payer: Name):
        _secondary: u256 = secondary
        db_idx256_update(it.i, payer.value, __ptr__(_secondary), 2u32)

    # void db_idx256_remove(int32_t iterator);
    def remove(self, it: SecondaryIterator):
        db_idx256_remove(it.i)

    # int32_t db_idx256_next(int32_t iterator, uint64_t* primary);
    def next(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx256_next(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx256_previous(int32_t iterator, uint64_t* primary);
    def previous(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx256_previous(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx256_find_primary(capi_name code, uint64_t scope, capi_name table, uint128_t* data, uint32_t data_len, uint64_t primary);
    def find_by_primary(self, primary: u64) -> Tuple[SecondaryIterator, u256]:
        secondary: u256 = 0u256
        i = db_idx256_find_primary(self.code.value, self.scope.value, self.table.value, __ptr__(secondary), 2u32, primary)
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u256)

    # int32_t db_idx256_find_secondary(capi_name code, uint64_t scope, capi_name table, const uint128_t* data, uint32_t data_len, uint64_t* primary);
    def find_by_secondary(self, secondary: u256) -> SecondaryIterator:
        primary = 0u64
        _secondary: u256 = secondary
        i = db_idx256_find_secondary(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), 2u32, __ptr__(primary))
        if i >= 0i32:
            return SecondaryIterator(i, primary, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    def find(self, secondary: u256) -> SecondaryIterator:
        return self.find_by_secondary(secondary)

    # int32_t db_idx256_lowerbound(capi_name code, uint64_t scope, capi_name table, uint128_t* data, uint32_t data_len, uint64_t* primary);
    def lowerbound(self, secondary: u256) -> Tuple[SecondaryIterator, u256]:
        primary = 0u64
        _secondary: u256 = secondary
        i = db_idx256_lowerbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), 2u32, __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u256)

    # int32_t db_idx256_upperbound(capi_name code, uint64_t scope, capi_name table, uint128_t* data, uint32_t data_len, uint64_t* primary);
    def upperbound(self, secondary: u256) -> Tuple[SecondaryIterator, u256]:
        primary = 0u64
        _secondary: u256 = secondary
        i = db_idx256_upperbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), 2u32, __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0u256)

    # int32_t db_idx256_end(capi_name code, uint64_t scope, capi_name table);
    def end(self) -> SecondaryIterator:
        i = db_idx256_end(self.code.value, self.scope.value, self.table.value)
        return SecondaryIterator(i, 0u64, self.table_index)

class IdxTableDouble(object):
    table_index: int
    code: Name
    scope: Name
    table: Name
    
    def __init__(self, table_index: int, code: Name, scope: Name, table: Name):
        self.table_index = table_index
        self.code = code
        self.scope = scope
        self.table = table

    # int32_t db_idx_double_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const double* secondary);
    def store(self, id: u64, secondary: float, payer: Name) -> SecondaryIterator:
        _secondary: float = secondary
        i = db_idx_double_store(self.scope.value, self.table.value, payer.value, id, __ptr__(_secondary))
        if i >= 0i32:
            return SecondaryIterator(i, id, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    # void db_idx_double_update(int32_t iterator, capi_name payer, const double* secondary);
    def update(self, it: SecondaryIterator, secondary: float, payer: Name):
        _secondary: float = secondary
        db_idx_double_update(it.i, payer.value, __ptr__(_secondary))

    # void db_idx_double_remove(int32_t iterator);
    def remove(self, it: SecondaryIterator):
        db_idx_double_remove(it.i)

    # int32_t db_idx_double_next(int32_t iterator, uint64_t* primary);
    def next(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx_double_next(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx_double_previous(int32_t iterator, uint64_t* primary);
    def previous(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx_double_previous(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx_double_find_primary(capi_name code, uint64_t scope, capi_name table, double* secondary, uint64_t primary);
    def find_by_primary(self, primary: u64) -> Tuple[SecondaryIterator, float]:
        secondary: float = 0.0
        i = db_idx_double_find_primary(self.code.value, self.scope.value, self.table.value, __ptr__(secondary), primary)
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0.0)

    # int32_t db_idx_double_find_secondary(capi_name code, uint64_t scope, capi_name table, const double* secondary, uint64_t* primary);
    def find_by_secondary(self, secondary: float) -> SecondaryIterator:
        primary = 0u64
        _secondary: float = secondary
        i = db_idx_double_find_secondary(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return SecondaryIterator(i, primary, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    def find(self, secondary: float) -> SecondaryIterator:
        return self.find_by_secondary(secondary)

    # int32_t db_idx_double_lowerbound(capi_name code, uint64_t scope, capi_name table, double* secondary, uint64_t* primary);
    def lowerbound(self, secondary: float) -> Tuple[SecondaryIterator, float]:
        primary = 0u64
        _secondary: float = secondary
        i = db_idx_double_lowerbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0.0)

    # int32_t db_idx_double_upperbound(capi_name code, uint64_t scope, capi_name table, double* secondary, uint64_t* primary);
    def upperbound(self, secondary: float) -> Tuple[SecondaryIterator, float]:
        primary = 0u64
        _secondary: float = secondary
        i = db_idx_double_upperbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), _secondary)
        return (SecondaryIterator(i, 0u64, self.table_index), 0.0)

    # int32_t db_idx_double_end(capi_name code, uint64_t scope, capi_name table);
    def end(self) -> SecondaryIterator:
        i = db_idx_double_end(self.code.value, self.scope.value, self.table.value)
        return SecondaryIterator(i, 0u64, self.table_index)

class IdxTableLongDouble(object):
    # int32_t db_idx_long_double_store(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const long double* secondary);
    def store(self, id: u64, secondary: SecondaryValue, payer: Name) -> SecondaryIterator:
        _secondary: Float128 = secondary.get_value_long_double()
        i = db_idx_long_double_store(self.scope.value, self.table.value, payer.value, id, __ptr__(_secondary))
        if i >= 0i32:
            return SecondaryIterator(i, id, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    # void db_idx_long_double_update(int32_t iterator, capi_name payer, const long double* secondary);
    def update(self, it: SecondaryIterator, secondary: SecondaryValue, payer: Name):
        _secondary: Float128 = secondary.get_value_long_double()
        db_idx_long_double_update(it.i, payer.value, __ptr__(_secondary))

    # void db_idx_long_double_remove(int32_t iterator);
    def remove(self, it: SecondaryIterator):
        db_idx_long_double_remove(it.i)

    # int32_t db_idx_long_double_next(int32_t iterator, uint64_t* primary);
    def next(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx_long_double_next(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx_long_double_previous(int32_t iterator, uint64_t* primary);
    def previous(self, it: SecondaryIterator) -> SecondaryIterator:
        primary: u64 = 0u64
        i = db_idx_long_double_previous(it.i, __ptr__(primary))
        return SecondaryIterator(i, primary, self.table_index)

    # int32_t db_idx_long_double_find_primary(capi_name code, uint64_t scope, capi_name table, long double* secondary, uint64_t primary);
    def find_by_primary(self, primary: u64) -> Tuple[SecondaryIterator, SecondaryValue]:
        secondary: Float128 = Float128()
        i = db_idx_long_double_find_primary(self.code.value, self.scope.value, self.table.value, __ptr__(secondary), primary)
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), SecondaryValue(secondary))
        return (SecondaryIterator(i, 0u64, self.table_index), SecondaryValue(Float128()))

    # int32_t db_idx_long_double_find_secondary(capi_name code, uint64_t scope, capi_name table, const long double* secondary, uint64_t* primary);
    def find_by_secondary(self, secondary: SecondaryValue) -> SecondaryIterator:
        primary = 0u64
        _secondary: Float128 = secondary.get_value_long_double()
        i = db_idx_long_double_find_secondary(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return SecondaryIterator(i, primary, self.table_index)
        return SecondaryIterator(i, 0u64, self.table_index)

    def find(self, secondary: SecondaryValue) -> SecondaryIterator:
        return self.find_by_secondary(secondary)

    # int32_t db_idx_long_double_lowerbound(capi_name code, uint64_t scope, capi_name table, long double* secondary, uint64_t* primary);
    def lowerbound(self, secondary: SecondaryValue) -> Tuple[SecondaryIterator, SecondaryValue]:
        primary = 0u64
        _secondary: Float128 = secondary.get_value_long_double()
        i = db_idx_long_double_lowerbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), SecondaryValue(_secondary))
        return (SecondaryIterator(i, 0u64, self.table_index), SecondaryValue(Float128()))

    # int32_t db_idx_long_double_upperbound(capi_name code, uint64_t scope, capi_name table, long double* secondary, uint64_t* primary);
    def upperbound(self, secondary: SecondaryValue) -> Tuple[SecondaryIterator, SecondaryValue]:
        primary = 0u64
        _secondary: Float128 = secondary.get_value_long_double()
        i = db_idx_long_double_upperbound(self.code.value, self.scope.value, self.table.value, __ptr__(_secondary), __ptr__(primary))
        if i >= 0i32:
            return (SecondaryIterator(i, primary, self.table_index), SecondaryValue(_secondary))
        return (SecondaryIterator(i, 0u64, self.table_index), SecondaryValue(0.0))

    # int32_t db_idx_long_double_end(capi_name code, uint64_t scope, capi_name table);
    def end(self) -> SecondaryIterator:
        i = db_idx_long_double_end(self.code.value, self.scope.value, self.table.value)
        return SecondaryIterator(i, 0u64, self.table_index)
