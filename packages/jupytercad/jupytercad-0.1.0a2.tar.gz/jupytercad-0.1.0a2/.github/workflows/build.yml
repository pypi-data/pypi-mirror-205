name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Use mamba instead due to freecad
    #- name: Base Setup
    #  uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
    #- name: Install dependencies
    #  run: python -m pip install -U jupyterlab>=0.4.0b0

    - name: Install Conda environment with Micromamba
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-name: cad
        environment-file: false
        channels: conda-forge/label/jupyterlab_beta,conda-forge
        extra-specs: |
          python=3.9
          nodejs=18
          yarn
          "jupyterlab>=4.0.0b0"
          freecad

    - name: Lint the extension
      shell: bash -l {0}
      run: |
        set -eux
        jlpm
        jlpm run lint:check

    # We don't have tests
    #- name: Test the extension
    #  shell: bash -l {0}
    #  run: |
    #    set -eux
    #    jlpm run test

    - name: Build the extension
      shell: bash -l {0}
      run: |
        set -eux
        python -m pip install .

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "jupytercad.*OK"
        python -m jupyterlab.browser_check

    - name: Package the extension
      shell: bash -l {0}
      run: |
        set -eux
        pip install build
        python -m build
        pip uninstall -y "jupytercad" jupyterlab

    - name: Upload extension packages
      uses: actions/upload-artifact@v3
      with:
        name: extension-artifacts
        path: dist/jupytercad*
        if-no-files-found: error

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        architecture: 'x64'

    - uses: actions/download-artifact@v3
      with:
        name: extension-artifacts

    - name: Install and Test
    # TODO Update JupyterLab version
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)
        pip install "jupyterlab>=4.0.0b0" jupytercad*.whl

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "jupytercad.*OK"
        # jupyterlab.browser_check will fail due to the core extension jupyterlab_pygments.
        # It does not support lab v4.0.0
        #python -m jupyterlab.browser_check --no-chrome-test

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Use mamba instead due to freecad
    #- name: Base Setup
    #  uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
    #- name: Install dependencies
    #  run: python -m pip install -U jupyterlab>=0.4.0b0

    - name: Install Conda environment with Micromamba
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-name: cad
        environment-file: false
        channels: conda-forge/label/jupyterlab_beta,conda-forge
        extra-specs: |
          python=3.9
          nodejs=18
          yarn
          "jupyterlab>=4.0.0b0"
          freecad

    - name: Download extension package
      uses: actions/download-artifact@v3
      with:
        name: extension-artifacts

    - name: Install the extension
      shell: bash -l {0}
      run: |
        set -eux
        python -m pip install jupytercad*.whl

    - name: Install dependencies
      shell: bash -l {0}
      working-directory: ui-tests
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      run: jlpm install

    - name: Set up browser cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/pw-browsers
        key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

    - name: Install browser
      shell: bash -l {0}
      run: npx playwright install chromium
      working-directory: ui-tests

    - name: Execute integration tests
      shell: bash -l {0}
      working-directory: ui-tests
      run: |
        npx playwright test

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: jupytercad-playwright-tests
        path: |
          ui-tests/test-results
          ui-tests/playwright-report

  check_links:
    name: Check Links
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1

  build_opencascade:
    name: Build Opencascade
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Conda environment with Micromamba
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-name: cad
        environment-file: false
        channels: conda-forge/label/jupyterlab_beta,conda-forge
        extra-specs: |
          python=3.9
          nodejs=18
          yarn
          "jupyterlab>=4.0.0b0"
          freecad

    - name: Setup pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-3.9-${{ hashFiles('package.json') }}
        restore-keys: |
          pip-3.9-
          pip-

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          yarn-

    - name: Setup OpenCascade build cache
      uses: actions/cache@v2
      with:
        path: |
          jupytercad-opencascade/lib/jupytercad.opencascade.js
          jupytercad-opencascade/lib/jupytercad.opencascade.wasm
          jupytercad-opencascade/lib/jupytercad.opencascade.d.ts
          jupytercad-opencascade/lib/jupytercad.opencascade.version
        key: ${{ hashFiles('jupytercad-opencascade/build.yml') }}

    - name: Build jupytercad-opencascade
      shell: bash -l {0}
      run: |
        jlpm
        jlpm run build
      working-directory: jupytercad-opencascade

    - name: Build the extension
      shell: bash -l {0}
      run: |
        jlpm link jupytercad-opencascade

        set -eux
        jlpm
        jlpm run eslint:check
        python -m pip install . -vvv

        jupyter labextension list 2>&1 | grep -ie "jupytercad.*OK"

        # TODO Enable browser check when upstream is fixed
        # python -m jupyterlab.browser_check

        pip install build
        python -m build --wheel
        cp dist/*.whl .
        pip uninstall -y "jupytercad" jupyterlab
        rm -rf myextension
