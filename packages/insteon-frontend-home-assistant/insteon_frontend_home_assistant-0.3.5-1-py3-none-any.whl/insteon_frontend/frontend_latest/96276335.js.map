{"version":3,"file":"96276335.js","mappings":";;;;;;;;AAiBA;;ACgBA;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAMA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AAIA;;;;;;;;;;;;;;;;;AA0CA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-input-helper-text.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-number.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { NumberSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-input-helper-text\";\nimport \"../ha-slider\";\nimport \"../ha-textfield\";\n\n@customElement(\"ha-selector-number\")\nexport class HaNumberSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: NumberSelector;\n\n  @property() public value?: number;\n\n  @property() public placeholder?: number;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    const isBox = this.selector.number?.mode === \"box\";\n\n    return html`\n      <div class=\"input\">\n        ${!isBox\n          ? html`\n              ${this.label\n                ? html`${this.label}${this.required ? \" *\" : \"\"}`\n                : \"\"}\n              <ha-slider\n                .min=${this.selector.number?.min}\n                .max=${this.selector.number?.max}\n                .value=${this.value ?? \"\"}\n                .step=${this.selector.number?.step ?? 1}\n                .disabled=${this.disabled}\n                .required=${this.required}\n                pin\n                ignore-bar-touch\n                @change=${this._handleSliderChange}\n              >\n              </ha-slider>\n            `\n          : \"\"}\n        <ha-textfield\n          .inputMode=${(this.selector.number?.step || 1) % 1 !== 0\n            ? \"decimal\"\n            : \"numeric\"}\n          .label=${this.selector.number?.mode !== \"box\"\n            ? undefined\n            : this.label}\n          .placeholder=${this.placeholder}\n          class=${classMap({ single: this.selector.number?.mode === \"box\" })}\n          .min=${this.selector.number?.min}\n          .max=${this.selector.number?.max}\n          .value=${this.value ?? \"\"}\n          .step=${this.selector.number?.step ?? 1}\n          helperPersistent\n          .helper=${isBox ? this.helper : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .suffix=${this.selector.number?.unit_of_measurement}\n          type=\"number\"\n          autoValidate\n          ?no-spinner=${this.selector.number?.mode !== \"box\"}\n          @input=${this._handleInputChange}\n        >\n        </ha-textfield>\n      </div>\n      ${!isBox && this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _handleInputChange(ev) {\n    ev.stopPropagation();\n    const value =\n      ev.target.value === \"\" || isNaN(ev.target.value)\n        ? undefined\n        : Number(ev.target.value);\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleSliderChange(ev) {\n    ev.stopPropagation();\n    const value = Number(ev.target.value);\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .input {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        direction: ltr;\n      }\n      ha-slider {\n        flex: 1;\n      }\n      ha-textfield {\n        --ha-textfield-input-width: 40px;\n      }\n      .single {\n        --ha-textfield-input-width: unset;\n        flex: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-number\": HaNumberSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}