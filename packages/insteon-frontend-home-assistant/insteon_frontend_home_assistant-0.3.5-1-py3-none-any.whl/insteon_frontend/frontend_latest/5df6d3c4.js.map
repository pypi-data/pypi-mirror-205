{"version":3,"file":"5df6d3c4.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;;ACxDA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;AArBA;;;;;;;;;;AAqMA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://insteon-panel-frontend/./src/device/properties/dialog-insteon-property.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// import \"@material/mwc-button/mwc-button\";\n// import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../homeassistant-frontend/src/components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../homeassistant-frontend/src/components/ha-dialog\";\nimport { haStyleDialog } from \"../../../homeassistant-frontend/src/resources/styles\";\nimport { HomeAssistant } from \"../../../homeassistant-frontend/src/types\";\nimport { Insteon, InsteonProperty, PropertyRadioButtons } from \"../../data/insteon\";\nimport \"../../../homeassistant-frontend/src/components/ha-form/ha-form\";\nimport type {\n  HaFormSchema,\n  HaFormMultiSelectSchema,\n} from \"../../../homeassistant-frontend/src/components/ha-form/types\";\nimport { InsteonPropertyDialogParams } from \"./show-dialog-insteon-property\";\n\n@customElement(\"dialog-insteon-property\")\nclass DialogInsteonProperty extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _record!: InsteonProperty;\n\n  @state() private _schema!: HaFormSchema[];\n\n  @state() private _title?: string;\n\n  @state() private _callback?: (name: string, value: any) => Promise<void>;\n\n  @state() private _formData = {};\n\n  @state() private _errors: { [key: string]: string } = { base: \"\" };\n\n  @state() private _opened = false;\n\n  public async showDialog(params: InsteonPropertyDialogParams): Promise<void> {\n    this.hass = params.hass;\n    this.insteon = params.insteon;\n    this._record = params.record;\n    if (this._record.name == \"radio_button_groups\") {\n      const rb_schema = params.schema[0] as HaFormMultiSelectSchema;\n      this._formData = this._radio_button_value(\n        this._record as PropertyRadioButtons,\n        Math.floor(Object.entries(rb_schema.options).length / 2)\n      );\n      this._schema = this._radio_button_schema(this._record.value as [[number]] | [], rb_schema);\n    } else {\n      this._formData[this._record!.name] = this._record!.value;\n      this._schema = params.schema;\n    }\n    this._callback = params.callback;\n    this._title = params.title;\n    this._errors = { base: \"\" };\n    this._opened = true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=\"${this._close}\"\n        .heading=${createCloseHeading(this.hass, this._title!)}\n      >\n        <div class=\"form\">\n          <ha-form\n            .data=${this._formData}\n            .schema=${this._schema}\n            @value-changed=${this._valueChanged}\n            .error=${this._errors}\n          ></ha-form>\n        </div>\n        <div class=\"buttons\">\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n          <mwc-button @click=${this._submit} slot=\"primaryAction\">\n            ${this.hass.localize(\"ui.dialogs.generic.ok\")}\n          </mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    this._close();\n  }\n\n  private async _submit(): Promise<void> {\n    if (!this._changeMade()) {\n      this._close();\n      return;\n    }\n    let value: string | boolean | number | [] | [[number]] | undefined = undefined;\n    if (this._record.name == \"radio_button_groups\") {\n      if (!this._validate_radio_buttons(this._formData)) {\n        return;\n      }\n      value = this._radio_button_groups_to_value(this._formData);\n    } else {\n      value = this._formData[this._record!.name];\n    }\n\n    this._close();\n    await this._callback!(this._record.name, value);\n  }\n\n  private _changeMade(): boolean {\n    if (this._record.name == \"radio_button_groups\") {\n      const form_values = this._radio_button_groups_to_value(this._formData);\n      return this._record!.value !== form_values;\n    }\n    return this._record!.value !== this._formData[this._record!.name];\n  }\n\n  private _close(): void {\n    this._opened = false;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this._formData = ev.detail.value;\n  }\n\n  private _radio_button_value(\n    curr_prop: PropertyRadioButtons,\n    num_groups: number\n  ): { [key: string]: [number] | [] } {\n    const num_curr_groups = curr_prop.value.length;\n    const curr_groups: [[number]] = curr_prop.value as [[number]];\n    const radio_button_group_properties = {};\n    for (let group = 0; group < num_groups; group++) {\n      const group_name = \"radio_button_group_\" + group;\n      if (group < num_curr_groups) {\n        const group_string = [];\n        curr_groups[group].forEach((value) => {\n          // eslint-disable-next-line no-console\n          console.info(\"Group \" + group + \" value \" + value);\n          return group_string.push(value.toString());\n        });\n        radio_button_group_properties[group_name] = group_string;\n      } else {\n        radio_button_group_properties[group_name] = [];\n      }\n      // eslint-disable-next-line no-console\n      console.info(\n        \"New prop value: \" + group_name + \" value \" + radio_button_group_properties[group_name]\n      );\n    }\n    return radio_button_group_properties;\n  }\n\n  private _radio_button_schema(\n    curr_groups: [[number]] | [],\n    schema: HaFormMultiSelectSchema\n  ): HaFormMultiSelectSchema[] {\n    const new_schema: HaFormMultiSelectSchema[] = [];\n    const num_buttons: number = Object.entries(schema.options).length;\n    const max_groups: number = Math.floor(num_buttons / 2);\n    const groups_options = {};\n\n    for (let group = 0; group < max_groups; group++) {\n      const group_name = \"radio_button_group_\" + group;\n      // groups_options[group] = [];\n\n      // // Get any current button group\n      // if (group < curr_groups.length) {\n      //   const curr_group = curr_groups[group];\n      //   // Assign any buttons in the current group to the group options\n      //   // and remove that button from the list of buttons to other groups\n      //   curr_group.forEach((button) => {\n      //     const button_name = this.insteon.localize(\n      //       \"properties.form_options.\" + schema.options[button]\n      //     );\n      //     groups_options[group].push([button, button_name]);\n      //     delete schema.options[button];\n      //   });\n      // }\n\n      // Add remaing buttons to all group options\n      // Object.entries(schema.options).forEach(([option, value]) => {\n      //   groups_options[group].push([option, value]);\n      // });\n      new_schema.push({\n        name: group_name,\n        type: \"multi_select\",\n        optional: true,\n        options: schema.options, // groups_options[group],\n        description: { suffix: this.insteon!.localize(\"properties.descriptions.\" + group_name) },\n      });\n    }\n    // eslint-disable-next-line no-console\n    console.info(\"RB Schema length: \" + new_schema.length);\n    return new_schema;\n  }\n\n  private _radio_button_groups_to_value(props: { [key: string]: [number] | [] }): [[number]] | [] {\n    const output: [[number]] | [] = [];\n    Object.entries(props).forEach(([_, value]) => {\n      if (value.length > 0) {\n        const int_value = value.map((button) => {\n          return +button;\n        });\n        output.push(int_value);\n      }\n    });\n    return output;\n  }\n\n  private _validate_radio_buttons(props: { [key: string]: [string] | [] }): boolean {\n    this._errors = { base: \"\" };\n    let is_valid = true;\n    // Make sure there are two entries in each group\n    const selected_buttons: [string] | [] = [];\n    Object.entries(props).forEach(([group_name, value]) => {\n      if (value.length == 1) {\n        this._errors[group_name] = \"Must have at least 2 buttons in a group\";\n        is_valid = false;\n      }\n      if (value.length > 0) {\n        value.forEach((button) => {\n          // eslint-disable-next-line no-console\n          console.info(\"Checking button \" + button);\n          if (selected_buttons.includes(button)) {\n            // eslint-disable-next-line no-console\n            console.info(\"Found buttong \" + button);\n            if (this._errors.base == \"\") {\n              this._errors.base = \"A button can not be selected twice\";\n            }\n            is_valid = false;\n          } else {\n            selected_buttons.push(button);\n          }\n        });\n      }\n    });\n    return is_valid;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        table {\n          width: 100%;\n        }\n        ha-combo-box {\n          width: 20px;\n        }\n        .title {\n          width: 200px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-insteon-property\": DialogInsteonProperty;\n  }\n}\n"],"names":[],"sourceRoot":""}