{"version":3,"file":"fcc81ea9.js","mappings":";;;;;;AAsBA;;;;AAKA;;ACyIA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;ACvEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAIA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;AAGA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;;;;;AAMA;;AAGA;;;AAIA;;;;;;AAMA;AACA;;;;;;;AAOA;;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkUA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-fab.ts","webpack://insteon-panel-frontend/./src/device/aldb/insteon-aldb-data-table.ts","webpack://insteon-panel-frontend/./src/device/aldb/insteon-device-aldb-page.ts"],"sourcesContent":["import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../homeassistant-frontend/src/components/ha-circular-progress\";\nimport \"../../../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport { DataTableColumnContainer } from \"../../../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport type { ALDBRecord, Insteon } from \"../../data/insteon\";\nimport type { HomeAssistant } from \"../../../homeassistant-frontend/src/types\";\nimport { computeRTLDirection } from \"../../../homeassistant-frontend/src/common/util/compute_rtl\";\n\nexport interface RecordRowData extends ALDBRecord {\n  record?: ALDBRecord;\n}\n\n@customElement(\"insteon-aldb-data-table\")\nexport class InsteonALDBDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public records: ALDBRecord[] = [];\n\n  @property({ type: Boolean }) public isLoading = false;\n\n  @property({ type: Boolean }) public showWait = false;\n\n  private _records = memoizeOne((records: ALDBRecord[]) => {\n    if (!records) {\n      return [];\n    }\n    const outputRecords: RecordRowData[] = records;\n\n    return outputRecords.map((record) => ({\n      ...record,\n    }));\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            in_use: {\n              title: this.insteon.localize(\"aldb.fields.in_use\"),\n              template: (in_use: boolean) => {\n                if (in_use) {\n                  return html`${this.hass.localize(\"ui.common.yes\")}`;\n                }\n                return html`${this.hass.localize(\"ui.common.no\")}`;\n              },\n              sortable: true,\n              width: \"15%\",\n            },\n            dirty: {\n              title: this.insteon.localize(\"aldb.fields.modified\"),\n              template: (dirty: boolean) => {\n                if (dirty) {\n                  return html`${this.hass.localize(\"ui.common.yes\")}`;\n                }\n                return html`${this.hass.localize(\"ui.common.no\")}`;\n              },\n              sortable: true,\n              width: \"15%\",\n            },\n            target: {\n              title: this.insteon.localize(\"aldb.fields.target\"),\n              sortable: true,\n              grows: true,\n            },\n            group: {\n              title: this.insteon.localize(\"aldb.fields.group\"),\n              sortable: true,\n              width: \"15%\",\n            },\n            is_controller: {\n              title: this.insteon.localize(\"aldb.fields.mode\"),\n              template: (is_controller: boolean) => {\n                if (is_controller) {\n                  return html`${this.insteon.localize(\"aldb.mode.controller\")}`;\n                }\n                return html`${this.insteon.localize(\"aldb.mode.responder\")}`;\n              },\n              sortable: true,\n              width: \"25%\",\n            },\n          }\n        : {\n            mem_addr: {\n              title: this.insteon.localize(\"aldb.fields.id\"),\n              template: (mem_addr: number) => {\n                if (mem_addr < 0) {\n                  return html`New`;\n                }\n                return html`${mem_addr}`;\n              },\n              sortable: true,\n              direction: \"desc\",\n              width: \"10%\",\n            },\n            in_use: {\n              title: this.insteon.localize(\"aldb.fields.in_use\"),\n              template: (in_use: boolean) => {\n                if (in_use) {\n                  return html`${this.hass.localize(\"ui.common.yes\")}`;\n                }\n                return html`${this.hass.localize(\"ui.common.no\")}`;\n              },\n              sortable: true,\n              width: \"10%\",\n            },\n            dirty: {\n              title: this.insteon.localize(\"aldb.fields.modified\"),\n              template: (dirty: boolean) => {\n                if (dirty) {\n                  return html`${this.hass.localize(\"ui.common.yes\")}`;\n                }\n                return html`${this.hass.localize(\"ui.common.no\")}`;\n              },\n              sortable: true,\n              width: \"10%\",\n            },\n            target: {\n              title: this.insteon.localize(\"aldb.fields.target\"),\n              sortable: true,\n              width: \"15%\",\n            },\n            target_name: {\n              title: this.insteon.localize(\"aldb.fields.target_device\"),\n              sortable: true,\n              grows: true,\n            },\n            group: {\n              title: this.insteon.localize(\"aldb.fields.group\"),\n              sortable: true,\n              width: \"10%\",\n            },\n            is_controller: {\n              title: this.insteon.localize(\"aldb.fields.mode\"),\n              template: (is_controller: boolean) => {\n                if (is_controller) {\n                  return html`${this.insteon.localize(\"aldb.mode.controller\")}`;\n                }\n                return html`${this.insteon.localize(\"aldb.mode.responder\")}`;\n              },\n              sortable: true,\n              width: \"12%\",\n            },\n          }\n  );\n\n  private _noDataText(loading): string {\n    if (loading) {\n      return \"\";\n    }\n    return this.insteon.localize(\"aldb.no_data\");\n  }\n\n  protected render(): TemplateResult {\n    if (this.showWait) {\n      return html` <ha-circular-progress active alt=\"Loading\"></ha-circular-progress> `;\n    }\n    return html`\n      <ha-data-table\n        .columns=${this._columns(this.narrow)}\n        .data=${this._records(this.records)}\n        .id=${\"mem_addr\"}\n        .dir=${computeRTLDirection(this.hass)}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .noDataText=\"${this._noDataText(this.isLoading)}\"\n      >\n        <ha-circular-progress active alt=\"Loading\"></ha-circular-progress>\n      </ha-data-table>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"insteon-aldb-data-table\": InsteonALDBDataTable;\n  }\n}\n","import type { ActionDetail } from \"@material/mwc-list\";\n// import \"@material/mwc-fab\";\nimport { mdiPlus, mdiDotsVertical } from \"@mdi/js\";\n// import \"@material/mwc-button\";\nimport \"../../../homeassistant-frontend/src/components/ha-icon-button\";\nimport \"../../../homeassistant-frontend/src/components/ha-circular-progress\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../homeassistant-frontend/src/components/ha-service-description\";\nimport \"../../../homeassistant-frontend/src/components/ha-fab\";\n//import \"@polymer/paper-input/paper-textarea\";\nimport {\n  Insteon,\n  InsteonDevice,\n  fetchInsteonDevice,\n  ALDBRecord,\n  fetchInsteonALDB,\n  changeALDBRecord,\n  createALDBRecord,\n  writeALDB,\n  loadALDB,\n  resetALDB,\n  addDefaultLinks,\n  aldbChangeRecordSchema,\n  aldbNewRecordSchema,\n} from \"../../data/insteon\";\nimport \"../../../homeassistant-frontend/src/layouts/hass-tabs-subpage\";\nimport { HomeAssistant, Route } from \"../../../homeassistant-frontend/src/types\";\nimport { insteonDeviceTabs } from \"../insteon-device-router\";\nimport \"./insteon-aldb-data-table\";\nimport { HASSDomEvent } from \"../../../homeassistant-frontend/src/common/dom/fire_event\";\nimport { RowClickedEvent } from \"../../../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport {\n  showConfirmationDialog,\n  showAlertDialog,\n} from \"../../../homeassistant-frontend/src/dialogs/generic/show-dialog-box\";\nimport { showInsteonALDBRecordDialog } from \"./show-dialog-insteon-aldb-record\";\nimport { navigate } from \"../../../homeassistant-frontend/src/common/navigate\";\nimport \"../../../homeassistant-frontend/src/components/ha-button-menu\";\n\n@customElement(\"insteon-device-aldb-page\")\nclass InsteonDeviceALDBPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property() private deviceId?: string;\n\n  @state() private _device?: InsteonDevice;\n\n  @state() private _records?: ALDBRecord[];\n\n  @state() private _allRecords?: ALDBRecord[] = [];\n\n  @state() private _showHideUnused = \"show\";\n\n  @state() private _showUnused = false;\n\n  @state() private _isLoading = false;\n\n  private _subscribed?: Promise<() => Promise<void>>;\n\n  private _refreshDevicesTimeoutHandle?: number;\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    // eslint-disable-next-line no-console\n    console.info(\"Device GUID: \" + this.deviceId + \" in aldb\");\n    super.firstUpdated(changedProps);\n    if (this.deviceId && this.hass) {\n      fetchInsteonDevice(this.hass, this.deviceId).then(\n        (device) => {\n          this._device = device;\n          this._getRecords();\n        },\n        () => {\n          this._noDeviceError();\n        }\n      );\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._unsubscribe();\n  }\n\n  protected _dirty() {\n    return this._records?.reduce((dirty, rec) => dirty || rec.dirty, false);\n  }\n\n  private _filterRecords(records: ALDBRecord[], showUnused: boolean): ALDBRecord[] {\n    return records.filter((record) => record.in_use || showUnused);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${insteonDeviceTabs}\n        .localizeFunc=${this.insteon.localize}\n        .backCallback=${() => this._handleBackTapped()}\n        hasFab\n      >\n        ${this.narrow\n          ? html`\n              <!-- <span slot=\"header\"> -->\n              <div slot=\"header\" class=\"header fullwidth\">\n                <div slot=\"header\" class=\"narrow-header-left\">${this._device?.name}</div>\n                <div slot=\"header\" class=\"narrow-header-right\">\n                  <ha-button-menu\n                    corner=\"BOTTOM_START\"\n                    @action=${this._handleMenuAction}\n                    activatable\n                  >\n                    <ha-icon-button\n                      slot=\"trigger\"\n                      .label=${this.hass.localize(\"ui.common.menu\")}\n                      .path=${mdiDotsVertical}\n                    ></ha-icon-button>\n\n                    <mwc-list-item>\n                      ${this.insteon!.localize(\"aldb.actions.\" + this._showHideUnused)}\n                    </mwc-list-item>\n                    <mwc-list-item>\n                      ${this.insteon!.localize(\"aldb.actions.add_default_links\")}\n                    </mwc-list-item>\n                    <mwc-list-item>\n                      ${this.insteon!.localize(\"common.actions.load\")}\n                    </mwc-list-item>\n                    <mwc-list-item .disabled=${!this._dirty()}>\n                      ${this.insteon!.localize(\"common.actions.write\")}\n                    </mwc-list-item>\n                    <mwc-list-item .disabled=${!this._dirty()}>\n                      ${this.insteon!.localize(\"common.actions.reset\")}\n                    </mwc-list-item>\n                  </ha-button-menu>\n                </div>\n              </div>\n              <!-- </span> -->\n            `\n          : \"\"}\n        <div class=\"container\">\n          ${!this.narrow\n            ? html`\n                <div class=\"page-header fullwidth\">\n                  <div class=\"device-name\">\n                    <h1>${this._device?.name}</h1>\n                  </div>\n                  <div class=\"logo header-right\">\n                    <img\n                      src=\"https://brands.home-assistant.io/insteon/logo.png\"\n                      referrerpolicy=\"no-referrer\"\n                      @load=${this._onImageLoad}\n                      @error=${this._onImageError}\n                    />\n                  </div>\n                </div>\n                <div class=\"page-header fullwidth\">\n                  <div class=\"aldb-status\">\n                    ALDB Status:\n                    ${this._device\n                      ? this.insteon!.localize(\"aldb.status.\" + this._device?.aldb_status)\n                      : \"\"}\n                  </div>\n                  <div class=\"actions header-right\">\n                    <mwc-button @click=${this._onLoadALDBClick}>\n                      ${this.insteon!.localize(\"common.actions.load\")}\n                    </mwc-button>\n                    <mwc-button @click=${this._onAddDefaultLinksClicked}>\n                      ${this.insteon!.localize(\"aldb.actions.add_default_links\")}\n                    </mwc-button>\n                    <mwc-button .disabled=${!this._dirty()} @click=${this._onWriteALDBClick}>\n                      ${this.insteon!.localize(\"common.actions.write\")}\n                    </mwc-button>\n                    <mwc-button .disabled=${!this._dirty()} @click=${this._onResetALDBClick}>\n                      ${this.insteon!.localize(\"common.actions.reset\")}\n                    </mwc-button>\n                    <ha-button-menu\n                      corner=\"BOTTOM_START\"\n                      @action=${this._handleMenuAction}\n                      activatable\n                    >\n                      <ha-icon-button\n                        slot=\"trigger\"\n                        .label=${this.hass.localize(\"ui.common.menu\")}\n                        .path=${mdiDotsVertical}\n                      ></ha-icon-button>\n\n                      <mwc-list-item>\n                        ${this.insteon!.localize(\"aldb.actions.\" + this._showHideUnused)}\n                      </mwc-list-item>\n                    </ha-button-menu>\n                  </div>\n                </div>\n              `\n            : \"\"}\n          <insteon-aldb-data-table\n            .insteon=${this.insteon}\n            .hass=${this.hass}\n            .narrow=${this.narrow!}\n            .records=${this._records!}\n            @row-click=${this._handleRowClicked}\n            .isLoading=${this._isLoading}\n          ></insteon-aldb-data-table>\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .title=\"${this.insteon.localize(\"aldb.actions.create\")}\"\n          .label=\"${this.insteon.localize(\"aldb.actions.create\")}\"\n          @click=${this._createRecord}\n          .extended=${!this.narrow}\n        >\n          <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _getRecords(): void {\n    if (!this._device) {\n      this._records = [];\n      return;\n    }\n    fetchInsteonALDB(this.hass, this._device?.address).then((records) => {\n      this._allRecords = records;\n      this._records = this._filterRecords(this._allRecords, this._showUnused);\n    });\n  }\n\n  private _createRecord(): void {\n    const record: ALDBRecord = {\n      mem_addr: 0,\n      in_use: true,\n      is_controller: true,\n      highwater: false,\n      group: 0,\n      target: \"\",\n      target_name: \"\",\n      data1: 0,\n      data2: 0,\n      data3: 0,\n      dirty: true,\n    };\n    showInsteonALDBRecordDialog(this, {\n      hass: this.hass,\n      insteon: this.insteon,\n      schema: aldbNewRecordSchema(this.insteon),\n      record: record,\n      title: this.insteon.localize(\"aldb.actions.new\"),\n      callback: async (rec) => this._handleRecordCreate(rec),\n    });\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"inline-block\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private async _onLoadALDBClick() {\n    await showConfirmationDialog(this, {\n      text: this.insteon.localize(\"common.warn.load\"),\n      confirmText: this.hass!.localize(\"ui.common.yes\"),\n      dismissText: this.hass!.localize(\"ui.common.no\"),\n      confirm: async () => this._load(),\n    });\n  }\n\n  private async _load() {\n    if (this._device!.is_battery) {\n      await showAlertDialog(this, {\n        text: this.insteon.localize(\"common.warn.wake_up\"),\n      });\n    }\n    this._subscribe();\n    loadALDB(this.hass, this._device!.address);\n    this._isLoading = true;\n    this._records = [];\n  }\n\n  private async _onShowHideUnusedClicked() {\n    this._showUnused = !this._showUnused;\n    if (this._showUnused) {\n      this._showHideUnused = \"hide\";\n    } else {\n      this._showHideUnused = \"show\";\n    }\n    this._records = this._filterRecords(this._allRecords!, this._showUnused);\n  }\n\n  private async _onWriteALDBClick() {\n    await showConfirmationDialog(this, {\n      text: this.insteon.localize(\"common.warn.write\"),\n      confirmText: this.hass!.localize(\"ui.common.yes\"),\n      dismissText: this.hass!.localize(\"ui.common.no\"),\n      confirm: async () => this._write(),\n    });\n  }\n\n  private async _write() {\n    if (this._device!.is_battery) {\n      await showAlertDialog(this, {\n        text: this.insteon.localize(\"common.warn.wake_up\"),\n      });\n    }\n    this._subscribe();\n    writeALDB(this.hass, this._device!.address);\n    this._isLoading = true;\n    this._records = [];\n  }\n\n  private async _onResetALDBClick() {\n    resetALDB(this.hass, this._device!.address);\n    this._getRecords();\n  }\n\n  private async _onAddDefaultLinksClicked() {\n    await showConfirmationDialog(this, {\n      text: this.insteon!.localize(\"common.warn.add_default_links\"),\n      confirm: async () => this._addDefaultLinks(),\n    });\n  }\n\n  private async _addDefaultLinks() {\n    if (this._device!.is_battery) {\n      await showAlertDialog(this, {\n        text: this.insteon.localize(\"common.warn.wake_up\"),\n      });\n    }\n    this._subscribe();\n    addDefaultLinks(this.hass, this._device!.address);\n    this._records = [];\n  }\n\n  private async _handleRecordChange(record: ALDBRecord) {\n    changeALDBRecord(this.hass, this._device!.address, record);\n    if (!record.in_use) {\n      this._showUnused = true;\n    }\n    this._getRecords();\n  }\n\n  private async _handleRecordCreate(record: ALDBRecord) {\n    createALDBRecord(this.hass, this._device!.address, record);\n    this._getRecords();\n  }\n\n  private async _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const id = ev.detail.id;\n    const record = this._records!.find((rec) => rec.mem_addr === +id);\n    showInsteonALDBRecordDialog(this, {\n      hass: this.hass,\n      insteon: this.insteon,\n      schema: aldbChangeRecordSchema(this.insteon),\n      record: record!,\n      title: this.insteon.localize(\"aldb.actions.change\"),\n      callback: async (rec) => this._handleRecordChange(rec),\n    });\n    history.back();\n  }\n\n  private async _handleBackTapped(): Promise<void> {\n    if (this._dirty()) {\n      await showConfirmationDialog(this, {\n        text: this.hass!.localize(\"ui.panel.config.common.editor.confirm_unsaved\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n        confirm: () => this._goBack(),\n      });\n    } else {\n      navigate(\"/insteon/devices\");\n    }\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        await this._onShowHideUnusedClicked();\n        break;\n      case 1:\n        await this._addDefaultLinks();\n        break;\n      case 2:\n        await this._onLoadALDBClick();\n        break;\n      case 3:\n        await this._onWriteALDBClick();\n        break;\n      case 4:\n        await this._onResetALDBClick();\n        break;\n    }\n  }\n\n  private _goBack(): void {\n    resetALDB(this.hass, this._device!.address);\n    navigate(\"/insteon/devices\");\n  }\n\n  private _handleMessage(message: any): void {\n    if (message.type === \"record_loaded\") {\n      this._getRecords();\n    }\n    if (message.type === \"status_changed\") {\n      fetchInsteonDevice(this.hass, this.deviceId!).then((device) => {\n        this._device = device;\n      });\n      this._isLoading = message.is_loading;\n      if (!message.is_loading) {\n        this._unsubscribe();\n      }\n    }\n  }\n\n  private _unsubscribe(): void {\n    if (this._refreshDevicesTimeoutHandle) {\n      clearTimeout(this._refreshDevicesTimeoutHandle);\n    }\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _subscribe(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribed = this.hass.connection.subscribeMessage(\n      (message) => this._handleMessage(message),\n      {\n        type: \"insteon/aldb/notify\",\n        device_address: this._device?.address,\n      }\n    );\n    this._refreshDevicesTimeoutHandle = window.setTimeout(() => this._unsubscribe(), 1200000);\n  }\n\n  private _noDeviceError(): void {\n    showAlertDialog(this, {\n      text: this.insteon.localize(\"common.error.device_not_found\"),\n    });\n    this._goBack();\n    this._goBack();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n        --app-header-border-bottom: 1px solid var(--divider-color);\n      }\n\n      :host([narrow]) {\n        --aldb-table-height: 86vh;\n      }\n\n      :host(:not([narrow])) {\n        --aldb-table-height: 76vh;\n      }\n\n      .header {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .container {\n        display: flex;\n        flex-wrap: wrap;\n        margin: 0px;\n      }\n\n      insteon-aldb-data-table {\n        width: 100%;\n        height: var(--aldb-table-height);\n        display: block;\n        --data-table-border-width: 0;\n      }\n\n      h1 {\n        margin: 0;\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(--paper-font-headline_-_-webkit-font-smoothing);\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .page-header {\n        padding: 8px;\n        margin-left: 32px;\n        margin-right: 32px;\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .fullwidth {\n        padding: 8px;\n        box-sizing: border-box;\n        width: 100%;\n        flex-grow: 1;\n      }\n\n      .header-right {\n        align-self: center;\n        display: flex;\n      }\n\n      .header-right img {\n        height: 30px;\n      }\n\n      .header-right:first-child {\n        width: 100%;\n        justify-content: flex-end;\n      }\n\n      .actions mwc-button {\n        margin: 8px;\n      }\n\n      :host([narrow]) .container {\n        margin-top: 0;\n      }\n\n      .narrow-header-left {\n        padding: 8px;\n        width: 90%;\n      }\n      .narrow-header-right {\n        align-self: right;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"insteon-device-aldb-page\": InsteonDeviceALDBPage;\n  }\n}\n"],"names":[],"sourceRoot":""}