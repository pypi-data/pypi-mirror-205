{"version":3,"file":"5dbecaa4.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;;ACnEA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;AArBA;;;;;;;;;;AAoHA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://insteon-panel-frontend/./src/device/aldb/dialog-insteon-aldb-record.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../homeassistant-frontend/src/components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../homeassistant-frontend/src/components/ha-dialog\";\nimport { haStyleDialog } from \"../../../homeassistant-frontend/src/resources/styles\";\nimport { HomeAssistant } from \"../../../homeassistant-frontend/src/types\";\nimport { Insteon, ALDBRecord } from \"../../data/insteon\";\nimport \"./insteon-aldb-data-table\";\nimport { check_address } from \"../../tools/check_address\";\nimport \"../../../homeassistant-frontend/src/components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../../homeassistant-frontend/src/components/ha-form/types\";\nimport { InsteonALDBRecordDialogParams } from \"./show-dialog-insteon-aldb-record\";\n\n@customElement(\"dialog-insteon-aldb-record\")\nclass DialogInsteonALDBRecord extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _record?: ALDBRecord;\n\n  @state() private _schema?: HaFormSchema[];\n\n  @state() private _title?: string;\n\n  @state() private _callback?: (record: ALDBRecord) => Promise<void>;\n\n  @state() private _errors?: { [key: string]: string };\n\n  @state() private _formData?: { [key: string]: any };\n\n  @state() private _opened = false;\n\n  public async showDialog(params: InsteonALDBRecordDialogParams): Promise<void> {\n    this.hass = params.hass;\n    this.insteon = params.insteon;\n    this._record = params.record;\n    this._formData = { ...params.record };\n    this._formData!.mode = this._currentMode();\n    this._schema = params.schema;\n    this._callback = params.callback;\n    this._title = params.title;\n    this._errors = {};\n    this._opened = true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=\"${this._close}\"\n        .heading=${createCloseHeading(this.hass, this._title!)}\n      >\n        <div class=\"form\">\n          <ha-form\n            .data=${this._formData}\n            .schema=${this._schema}\n            .error=${this._errors}\n            @value-changed=${this._valueChanged}\n          ></ha-form>\n        </div>\n        <div class=\"buttons\">\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n          <mwc-button @click=${this._submit} slot=\"primaryAction\">\n            ${this.hass.localize(\"ui.dialogs.generic.ok\")}\n          </mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    this._close();\n  }\n\n  private async _submit(): Promise<void> {\n    if (!this._changeMade()) {\n      this._close();\n      return;\n    }\n    if (this._checkData()) {\n      const record = this._record;\n      record!.mem_addr = this._formData!.mem_addr;\n      record!.in_use = this._formData!.in_use;\n      record!.target = this._formData!.target;\n      record!.is_controller = this._updatedMode();\n      record!.group = this._formData!.group;\n      record!.data1 = this._formData!.data1;\n      record!.data2 = this._formData!.data2;\n      record!.data3 = this._formData!.data3;\n      record!.highwater = false;\n      record!.dirty = true;\n      this._close();\n      await this._callback!(record!);\n    } else {\n      this._errors!.base = this.insteon.localize(\"common.error.base\");\n    }\n  }\n\n  private _changeMade(): boolean {\n    return (\n      this._record!.in_use !== (this._formData!.in_use as boolean) ||\n      this._currentMode() !== (this._formData!.mode as string) ||\n      this._record!.target !== (this._formData!.target as string) ||\n      this._record!.group !== (this._formData!.group as number) ||\n      this._record!.data1 !== (this._formData!.data1 as number) ||\n      this._record!.data2 !== (this._formData!.data2 as number) ||\n      this._record!.data3 !== (this._formData!.data3 as number)\n    );\n  }\n\n  private _close(): void {\n    this._opened = false;\n  }\n\n  private _currentMode(): string {\n    if (this._record!.is_controller) {\n      return \"c\";\n    }\n    return \"r\";\n  }\n\n  private _updatedMode(): boolean {\n    return this._formData!.mode === \"c\";\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this._formData = ev.detail.value;\n  }\n\n  private _checkData(): boolean {\n    let success = true;\n    this._errors = {};\n    if (!check_address(this._formData!.target)) {\n      if (!this.insteon) {\n        // eslint-disable-next-line no-console\n        console.info(\"This should NOT show up\");\n      }\n      this._errors.target = this.insteon!.localize(\"common.error.address\");\n      success = false;\n    }\n    return success;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        table {\n          width: 100%;\n        }\n        ha-combo-box {\n          width: 20px;\n        }\n        .title {\n          width: 200px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-insteon-aldb-record\": DialogInsteonALDBRecord;\n  }\n}\n"],"names":[],"sourceRoot":""}