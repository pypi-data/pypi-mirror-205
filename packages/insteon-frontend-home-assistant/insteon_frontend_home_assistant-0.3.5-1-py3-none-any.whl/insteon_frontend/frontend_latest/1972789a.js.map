{"version":3,"file":"1972789a.js","mappings":";;AAmIA;AACA;AACA;AApIA;AAwIA;;;AAGA;AACA;AACA;AA7IA;AAiJA;;AAGA;;AA4CA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;;AAjNA;;;AAuNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA","sources":["webpack://insteon-panel-frontend/./src/insteon-scenes-panel.ts"],"sourcesContent":["import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  mdiCheck,\n  mdiPlus,\n  mdiLightbulbGroup,\n  mdiLightbulbGroupOff,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport {\n  RowClickedEvent,\n  SelectionChangedEvent,\n  SortingChangedEvent,\n} from \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport \"../homeassistant-frontend/src/layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport {\n  Insteon,\n  InsteonScene,\n  InsteonScenes,\n  fetchInsteonScenes,\n} from \"./data/insteon\";\nimport { navigate } from \"../homeassistant-frontend/src/common/navigate\";\nimport { HASSDomEvent } from \"../homeassistant-frontend/src/common/dom/fire_event\";\nimport { insteonMainTabs } from \"./insteon-router\";\nimport \"../homeassistant-frontend/src/components/ha-fab\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n    \"scene-trigger\": InsteonSceneTriggeredEvent;\n  }\n}\n\ninterface SceneRowData extends InsteonScene {\n  record?: InsteonScene;\n  num_devices?: number;\n  ha_scene?: boolean;\n  ha_script?: boolean;\n  actions?: string;\n}\n\nexport interface InsteonSceneTriggeredEvent {\n  scene: {\n    group: number;\n  };\n}\n\n@customElement(\"insteon-scenes-panel\")\nexport class InsteonScenesPanel extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public insteon!: Insteon;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Array }) private _scenes: InsteonScenes = {};\n\n  public firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n\n    if (!this.hass || !this.insteon) {\n      return;\n    }\n    fetchInsteonScenes(this.hass).then((scenes) => {\n      this._scenes = scenes;\n    });\n  }\n\n  private _columns = memoizeOne((narrow: boolean) =>\n    narrow\n      ? {\n          group: {\n            title: \"Scene\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"10%\",\n          },\n          name: {\n            title: \"Name\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            grows: true,\n          },\n          num_devices: {\n            title: \"Devices\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"10%\",\n          },\n        }\n      : {\n          group: {\n            title: \"Scene\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"10%\",\n          },\n          name: {\n            title: \"Name\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            grows: true,\n          },\n          num_devices: {\n            title: \"Devices\",\n            sortable: true,\n            filterable: true,\n            direction: \"asc\",\n            width: \"10%\",\n          },\n          actions: {\n            title: \"Actions\",\n            type: \"icon-button\",\n            template: (_toggle, scene) =>\n              html`\n                <ha-icon-button\n                  .scene=${scene}\n                  .hass=${this.hass}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.scene.picker.activate_scene\"\n                  )}\n                  .path=${mdiLightbulbGroup}\n                  @click=${this._activateScene}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .scene=${scene}\n                  .hass=${this.hass}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.scene.picker.activate_scene\"\n                  )}\n                  .path=${mdiLightbulbGroupOff}\n                  @click=${this._deactivateScene}\n                ></ha-icon-button>\n              `,\n            width: \"150px\",\n          },\n        }\n  );\n\n  private async _activateScene(ev): Promise<void> {\n    ev.stopPropagation();\n    const scene = ev.currentTarget.scene as InsteonScene;\n    const hass = ev.currentTarget.hass as HomeAssistant;\n    // eslint-disable-next-line no-console\n    console.info(\"Scene activate clicked received: \" + scene.group);\n    hass.callService(\"insteon\", \"scene_on\", { group: scene.group });\n  }\n\n  private async _deactivateScene(ev): Promise<void> {\n    ev.stopPropagation();\n    const hass = ev.currentTarget.hass as HomeAssistant;\n    const scene = ev.currentTarget.scene as InsteonScene;\n    // eslint-disable-next-line no-console\n    console.info(\"Scene activate clicked received: \" + scene.group);\n    hass.callService(\"insteon\", \"scene_off\", { group: scene.group });\n  }\n\n  private _records = memoizeOne((scenes: InsteonScenes) => {\n    if (Object.keys(scenes).length == 0) {\n      return [];\n    }\n    const outputScenes: SceneRowData[] = [];\n    for (const [scene_num, scene] of Object.entries(scenes)) {\n      const scene_data = {\n        ...scene,\n        num_devices: Object.keys(scene.devices).length,\n        ha_scene: true, // to be replace later\n        ha_script: false, // to be replace later\n        actions: \"\",\n      };\n      outputScenes.push(scene_data);\n    }\n    return outputScenes;\n  });\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${insteonMainTabs}\n        .route=${this.route}\n        id=\"group\"\n        .data=${this._records(this._scenes)}\n        .columns=${this._columns(this.narrow)}\n        @row-click=${this._handleRowClicked}\n        clickable\n        .localizeFunc=${this.insteon.localize}\n        .mainPage=${true}\n        .hasFab=${true}\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.insteon.localize(\"scenes.add_scene\")}\n          extended\n          @click=${this._addScene}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private async _addScene(): Promise<void> {\n    navigate(\"/insteon/scene/\");\n  }\n\n  private async _handleRowClicked(\n    ev: HASSDomEvent<RowClickedEvent>\n  ): Promise<void> {\n    const id = ev.detail.id;\n    // eslint-disable-next-line no-console\n    console.info(\"Row clicked received: \" + id);\n    navigate(\"/insteon/scene/\" + id);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-data-table {\n          width: 100%;\n          height: 100%;\n          --data-table-border-width: 0;\n        }\n        :host(:not([narrow])) ha-data-table {\n          height: calc(100vh - 1px - var(--header-height));\n          display: block;\n        }\n        :host([narrow]) hass-tabs-subpage {\n          --main-title-margin: 0;\n        }\n        .table-header {\n          display: flex;\n          align-items: center;\n          --mdc-shape-small: 0;\n          height: 56px;\n        }\n        .search-toolbar {\n          display: flex;\n          align-items: center;\n          color: var(--secondary-text-color);\n        }\n        search-input {\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: var(--divider-color);\n          --text-field-overflow: visible;\n          z-index: 5;\n        }\n        .table-header search-input {\n          display: block;\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n        }\n        .search-toolbar search-input {\n          display: block;\n          width: 100%;\n          color: var(--secondary-text-color);\n          --mdc-ripple-color: transparant;\n        }\n        #fab {\n          position: fixed;\n          right: calc(16px + env(safe-area-inset-right));\n          bottom: calc(16px + env(safe-area-inset-bottom));\n          z-index: 1;\n        }\n        :host([narrow]) #fab.tabs {\n          bottom: calc(84px + env(safe-area-inset-bottom));\n        }\n        #fab[is-wide] {\n          bottom: 24px;\n          right: 24px;\n        }\n        :host([rtl]) #fab {\n          right: auto;\n          left: calc(16px + env(safe-area-inset-left));\n        }\n        :host([rtl][is-wide]) #fab {\n          bottom: 24px;\n          left: 24px;\n          right: auto;\n        }\n      `,\n      haStyle,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"insteon-scenes-panel\": InsteonScenesPanel;\n  }\n}\n"],"names":[],"sourceRoot":""}