{"version":3,"file":"0282887a.js","mappings":";;AAqIA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;AA+BA;;AChFA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAMA;;;;;AAKA;;;;;AAKA;AACA;;;;AAIA;;;AAKA;;AAEA;AACA;;AAEA;AACA;;;;;;AAMA;;AAIA;;;AAKA;;;;;;AAMA;AACA;;;;;;;AAOA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkSA","sources":["webpack://insteon-panel-frontend/./src/device/properties/insteon-properties-data-table.ts","webpack://insteon-panel-frontend/./src/device/properties/insteon-device-properties-page.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../homeassistant-frontend/src/components/ha-circular-progress\";\n\nimport \"../../../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport type {\n  HaDataTable,\n  DataTableColumnContainer,\n} from \"../../../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport type { InsteonProperty } from \"../../data/insteon\";\nimport type { HomeAssistant } from \"../../../homeassistant-frontend/src/types\";\nimport { computeRTLDirection } from \"../../../homeassistant-frontend/src/common/util/compute_rtl\";\nimport type { HaFormSchema } from \"../../../homeassistant-frontend/src/components/ha-form/types\";\nimport { Insteon } from \"../../data/insteon\";\n\nexport interface RecordRowData {\n  record?: InsteonProperty;\n}\n\n@customElement(\"insteon-properties-data-table\")\nexport class InsteonPropertiesDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Array }) public records: InsteonProperty[] = [];\n\n  @property() public schema: { [key: string]: HaFormSchema } = {};\n\n  @property() public noDataText?: string;\n\n  @property({ type: Boolean }) public showWait = false;\n\n  private _records = memoizeOne((records: InsteonProperty[]) => {\n    return records.map((record) => ({\n      description: this._calcDescription(record.name),\n      display_value: this._translateValue(record.name, record.value),\n      ...record,\n    }));\n  });\n\n  private _calcDescription(prop_name: string) {\n    if (prop_name.startsWith(\"toggle_\")) {\n      return (\n        this.insteon.localize(\"properties.descriptions.button\") +\n        \" \" +\n        this._calcButtonName(prop_name) +\n        \" \" +\n        this.insteon.localize(\"properties.descriptions.toggle\")\n      );\n    }\n    if (prop_name.startsWith(\"radio_button_group_\")) {\n      return (\n        this.insteon.localize(\"properties.descriptions.radio_button_group\") +\n        \" \" +\n        this._calcButtonName(prop_name)\n      );\n    }\n    return this.insteon.localize(\"properties.descriptions.\" + prop_name);\n  }\n\n  private _calcButtonName(prop_name: string) {\n    if (prop_name.endsWith(\"main\")) {\n      return this.insteon.localize(\"properties.descriptions.main\");\n    }\n    return prop_name.substr(-1, 1).toUpperCase();\n  }\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: this.insteon.localize(\"properties.fields.name\"),\n              sortable: true,\n              grows: true,\n            },\n            modified: {\n              title: this.insteon.localize(\"properties.fields.modified\"),\n              template: (modified: boolean) => {\n                if (modified) {\n                  return html`${this.hass.localize(\"ui.common.yes\")}`;\n                }\n                return html`${this.hass.localize(\"ui.common.no\")}`;\n              },\n              sortable: true,\n              width: \"20%\",\n            },\n            display_value: {\n              title: this.insteon.localize(\"properties.fields.value\"),\n              sortable: true,\n              width: \"20%\",\n            },\n          }\n        : {\n            name: {\n              title: this.insteon.localize(\"properties.fields.name\"),\n              sortable: true,\n              width: \"20%\",\n            },\n            description: {\n              title: this.insteon.localize(\"properties.fields.description\"),\n              sortable: true,\n              grows: true,\n            },\n            modified: {\n              title: this.insteon.localize(\"properties.fields.modified\"),\n              template: (modified: boolean) => {\n                if (modified) {\n                  return html`${this.hass.localize(\"ui.common.yes\")}`;\n                }\n                return html`${this.hass.localize(\"ui.common.no\")}`;\n              },\n              sortable: true,\n              width: \"20%\",\n            },\n            display_value: {\n              title: this.insteon.localize(\"properties.fields.value\"),\n              sortable: true,\n              width: \"20%\",\n            },\n          }\n  );\n\n  protected render(): TemplateResult {\n    if (this.showWait) {\n      return html`\n        <ha-circular-progress class=\"fullwidth\" active alt=\"Loading\"></ha-circular-progress>\n      `;\n    }\n    return html`\n      <ha-data-table\n        .columns=${this._columns(this.narrow)}\n        .data=${this._records(this.records!)}\n        .id=${\"name\"}\n        .dir=${computeRTLDirection(this.hass!)}\n        noDataText=\"${this.noDataText!}\"\n      ></ha-data-table>\n    `;\n  }\n\n  private _translateValue(\n    name: string,\n    value: number | boolean | [number] | [[number]] | [string] | []\n  ) {\n    const schema = this.schema[name];\n    if (schema.name == \"radio_button_groups\") {\n      return \"\" + value.length + \" groups\";\n    }\n    if (schema.type === \"multi_select\" && Array.isArray(value)) {\n      return value.map((item) => schema.options[item]).join(\", \");\n    }\n    if (schema.type === \"select\") {\n      const options_dict = schema.options?.reduce((x, item) => ({ ...x, [item[0]]: item[1] }), {});\n      return options_dict[value.toString()];\n    }\n    return value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-circular-progress {\n        align-items: center;\n        justify-content: center;\n        padding: 8px;\n        box-sizing: border-box;\n        width: 100%;\n        flex-grow: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"insteon-properties-data-table\": InsteonPropertiesDataTable;\n  }\n}\n","import { mdiDotsVertical } from \"@mdi/js\";\nimport type { ActionDetail } from \"@material/mwc-list\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  HomeAssistant,\n  Route,\n} from \"../../../homeassistant-frontend/src/types\";\nimport \"../../../homeassistant-frontend/src/components/ha-icon-button\";\nimport \"../../../homeassistant-frontend/src/components/ha-service-description\";\nimport \"./insteon-properties-data-table\";\nimport {\n  Insteon,\n  InsteonDevice,\n  InsteonProperty,\n  fetchInsteonDevice,\n  fetchInsteonProperties,\n  changeProperty,\n  writeProperties,\n  loadProperties,\n  resetProperties,\n} from \"../../data/insteon\";\nimport { HASSDomEvent } from \"../../../homeassistant-frontend/src/common/dom/fire_event\";\nimport { showInsteonPropertyDialog } from \"./show-dialog-insteon-property\";\nimport {\n  showConfirmationDialog,\n  showAlertDialog,\n} from \"../../../homeassistant-frontend/src/dialogs/generic/show-dialog-box\";\nimport type { HaFormSchema } from \"../../../homeassistant-frontend/src/components/ha-form/types\";\nimport { RowClickedEvent } from \"../../../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport \"../../../homeassistant-frontend/src/layouts/hass-tabs-subpage\";\nimport { insteonDeviceTabs } from \"../insteon-device-router\";\nimport { navigate } from \"../../../homeassistant-frontend/src/common/navigate\";\nimport \"../../../homeassistant-frontend/src/components/ha-button-menu\";\n\n@customElement(\"insteon-device-properties-page\")\nclass InsteonDevicePropertiesPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property() private deviceId?: string;\n\n  @state() private _device?: InsteonDevice;\n\n  @state() private _properties: InsteonProperty[] = [];\n\n  @state() private _schema?: { [key: string]: HaFormSchema };\n\n  @state() private _showWait = false;\n\n  @state() private _showAdvanced = false;\n\n  private _showHideAdvanced = \"show\";\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this.deviceId && this.hass) {\n      fetchInsteonDevice(this.hass, this.deviceId).then(\n        (device) => {\n          this._device = device;\n          this._getProperties();\n        },\n        () => {\n          this._noDeviceError();\n        }\n      );\n    }\n  }\n\n  protected _dirty() {\n    return this._properties?.reduce(\n      (modified, prop) => modified || prop.modified,\n      false\n    );\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${insteonDeviceTabs}\n        .localizeFunc=${this.insteon.localize}\n        .backCallback=${async () => this._handleBackTapped()}\n      >\n        ${\n          this.narrow\n            ? html`\n                <!-- <span slot=\"header\"> -->\n                <div slot=\"header\" class=\"header fullwidth\">\n                  <div slot=\"header\" class=\"narrow-header-left\">\n                    ${this._device?.name}\n                  </div>\n                  <div slot=\"header\" class=\"narrow-header-right\">\n                    <ha-button-menu\n                      corner=\"BOTTOM_START\"\n                      @action=${this._handleMenuAction}\n                      activatable\n                    >\n                      <ha-icon-button\n                        slot=\"trigger\"\n                        .label=${this.hass.localize(\"ui.common.menu\")}\n                        .path=${mdiDotsVertical}\n                      ></ha-icon-button>\n\n                      <mwc-list-item>\n                        ${this.insteon!.localize(\n                          \"properties.actions.\" + this._showHideAdvanced\n                        )}\n                      </mwc-list-item>\n                      <mwc-list-item>\n                        ${this.insteon!.localize(\"common.actions.load\")}\n                      </mwc-list-item>\n                      <mwc-list-item .disabled=${!this._dirty()}>\n                        ${this.insteon!.localize(\"common.actions.write\")}\n                      </mwc-list-item>\n                      <mwc-list-item .disabled=${!this._dirty()}>\n                        ${this.insteon!.localize(\"common.actions.reset\")}\n                      </mwc-list-item>\n                    </ha-button-menu>\n                  </div>\n                </div>\n                <!-- </span> -->\n              `\n            : \"\"\n        }\n        <div class=\"container\">\n          ${\n            !this.narrow\n              ? html`\n                  <div class=\"page-header fullwidth\">\n                    <div class=\"device-name\">\n                      <h1>${this._device?.name}</h1>\n                    </div>\n                    <div class=\"logo header-right\">\n                      <img\n                        src=\"https://brands.home-assistant.io/insteon/logo.png\"\n                        referrerpolicy=\"no-referrer\"\n                        @load=${this._onImageLoad}\n                        @error=${this._onImageError}\n                      />\n                    </div>\n                  </div>\n                  <div class=\"page-header fullwidth\">\n                    <div class=\"header-right\">\n                      <div slot=\"header\" class=\"actions header-right\">\n                        <mwc-button @click=${this._onLoadPropertiesClick}>\n                          ${this.insteon!.localize(\"common.actions.load\")}\n                        </mwc-button>\n                        <mwc-button\n                          .disabled=${!this._dirty()}\n                          @click=${this._onWritePropertiesClick}\n                        >\n                          ${this.insteon!.localize(\"common.actions.write\")}\n                        </mwc-button>\n                        <mwc-button\n                          .disabled=${!this._dirty()}\n                          @click=${this._onResetPropertiesClick}\n                        >\n                          ${this.insteon!.localize(\"common.actions.reset\")}\n                        </mwc-button>\n                        <ha-button-menu\n                          corner=\"BOTTOM_START\"\n                          @action=${this._handleMenuAction}\n                          activatable\n                        >\n                          <ha-icon-button\n                            slot=\"trigger\"\n                            .label=${this.hass.localize(\"ui.common.menu\")}\n                            .path=${mdiDotsVertical}\n                          ></ha-icon-button>\n\n                          <mwc-list-item>\n                            ${this.insteon!.localize(\n                              \"properties.actions.\" + this._showHideAdvanced\n                            )}\n                          </mwc-list-item>\n                        </ha-button-menu>\n                      </div>\n                    </div>\n                  </div>\n                `\n              : \"\"\n          }\n          </div>\n          <insteon-properties-data-table\n            .hass=${this.hass}\n            .insteon=${this.insteon}\n            .narrow=${this.narrow!}\n            .records=${this._properties}\n            .schema=${this._schema!}\n            noDataText=${this.insteon!.localize(\"properties.no_data\")}\n            @row-click=${this._handleRowClicked}\n            .showWait=${this._showWait}\n          ></insteon-properties-data-table>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"inline-block\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private async _onLoadPropertiesClick() {\n    await showConfirmationDialog(this, {\n      text: this.insteon!.localize(\"common.warn.load\"),\n      confirmText: this.hass!.localize(\"ui.common.yes\"),\n      dismissText: this.hass!.localize(\"ui.common.no\"),\n      confirm: async () => this._load(),\n    });\n  }\n\n  private async _load() {\n    if (this._device!.is_battery) {\n      await showAlertDialog(this, {\n        text: this.insteon.localize(\"common.warn.wake_up\"),\n      });\n    }\n    this._showWait = true;\n    try {\n      await loadProperties(this.hass, this._device!.address);\n    } catch (err) {\n      showAlertDialog(this, {\n        text: this.insteon!.localize(\"common.error.load\"),\n        confirmText: this.hass!.localize(\"ui.common.close\"),\n      });\n    }\n    this._showWait = false;\n  }\n\n  private async _onWritePropertiesClick() {\n    await showConfirmationDialog(this, {\n      text: this.insteon!.localize(\"common.warn.write\"),\n      confirmText: this.hass!.localize(\"ui.common.yes\"),\n      dismissText: this.hass!.localize(\"ui.common.no\"),\n      confirm: async () => this._write(),\n    });\n  }\n\n  private async _write() {\n    if (this._device!.is_battery) {\n      await showAlertDialog(this, {\n        text: this.insteon.localize(\"common.warn.wake_up\"),\n      });\n    }\n    this._showWait = true;\n    try {\n      await writeProperties(this.hass, this._device!.address);\n    } catch (err) {\n      showAlertDialog(this, {\n        text: this.insteon!.localize(\"common.error.write\"),\n        confirmText: this.hass!.localize(\"ui.common.close\"),\n      });\n    }\n    this._getProperties();\n    this._showWait = false;\n  }\n\n  private async _getProperties() {\n    const propertiesInfo = await fetchInsteonProperties(\n      this.hass,\n      this._device!.address,\n      this._showAdvanced\n    );\n    // eslint-disable-next-line no-console\n    console.info(\"Properties: \" + propertiesInfo.properties.length);\n    this._properties = propertiesInfo.properties;\n    this._schema = this._translateSchema(propertiesInfo.schema);\n  }\n\n  private async _onResetPropertiesClick() {\n    resetProperties(this.hass, this._device!.address);\n    this._getProperties();\n  }\n\n  private async _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const id = ev.detail.id;\n    const record = this._properties!.find((rec) => rec.name === id);\n    const schema = this._schema![record!.name];\n\n    showInsteonPropertyDialog(this, {\n      hass: this.hass,\n      insteon: this.insteon,\n      schema: [schema!],\n      record: record!,\n      title: this.insteon!.localize(\"properties.actions.change\"),\n      callback: async (name, value) => this._handlePropertyChange(name, value),\n    });\n    history.back();\n  }\n\n  private async _handlePropertyChange(name: string, value: any) {\n    changeProperty(this.hass, this._device!.address, name, value);\n    this._getProperties();\n  }\n\n  private async _handleBackTapped(): Promise<void> {\n    if (this._dirty()) {\n      await showConfirmationDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.common.editor.confirm_unsaved\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n        confirm: () => this._goBack(),\n      });\n    } else {\n      navigate(\"/insteon/devices\");\n    }\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        await this._onShowHideAdvancedClicked();\n        break;\n      case 1:\n        await this._onLoadPropertiesClick();\n        break;\n      case 2:\n        await this._onWritePropertiesClick();\n        break;\n      case 3:\n        await this._onResetPropertiesClick();\n        break;\n    }\n  }\n\n  private async _onShowHideAdvancedClicked() {\n    this._showAdvanced = !this._showAdvanced;\n    if (this._showAdvanced) {\n      this._showHideAdvanced = \"hide\";\n    } else {\n      this._showHideAdvanced = \"show\";\n    }\n    this._getProperties();\n  }\n\n  private _goBack(): void {\n    resetProperties(this.hass, this._device!.address);\n    navigate(\"/insteon/devices\");\n  }\n\n  private _noDeviceError(): void {\n    showAlertDialog(this, {\n      text: this.insteon!.localize(\"common.error.device_not_found\"),\n    });\n    this._goBack();\n  }\n\n  private _translateSchema(schema: { [key: string]: HaFormSchema }) {\n    const new_schema: { [key: string]: HaFormSchema | HaFormSchema[] } = {\n      ...schema,\n    };\n    Object.entries(new_schema as { [key: string]: HaFormSchema }).forEach(\n      ([prop, prop_schema]) => {\n        if (!prop_schema.description) {\n          prop_schema.description = {};\n        }\n        prop_schema.description[prop] = this.insteon!.localize(\n          \"properties.descriptions.\" + prop\n        );\n        if (prop_schema.type === \"multi_select\") {\n          Object.entries(prop_schema.options).forEach(([option, value]) => {\n            if (isNaN(+value)) {\n              prop_schema.options[option] = this.insteon!.localize(\n                \"properties.form_options.\" + value\n              );\n            } else {\n              prop_schema.options[option] = value;\n            }\n          });\n        }\n        if (prop_schema.type === \"select\") {\n          Object.entries(prop_schema.options).forEach(\n            ([item, [_key, value]]) => {\n              if (isNaN(+value)) {\n                prop_schema.options[item][1] = this.insteon!.localize(\n                  \"properties.form_options.\" + value\n                );\n              } else {\n                prop_schema.options[item][1] = value;\n              }\n            }\n          );\n        }\n      }\n    );\n    return schema;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n        --app-header-border-bottom: 1px solid var(--divider-color);\n      }\n\n      :host([narrow]) {\n        --properties-table-height: 86vh;\n      }\n\n      :host(:not([narrow])) {\n        --properties-table-height: 80vh;\n      }\n\n      .header {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .container {\n        display: flex;\n        flex-wrap: wrap;\n        margin: 0px;\n      }\n\n      insteon-properties-data-table {\n        width: 100%;\n        height: var(--properties-table-height);\n        display: block;\n        --data-table-border-width: 0;\n      }\n\n      h1 {\n        margin: 0;\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .page-header {\n        padding: 8px;\n        margin-left: 32px;\n        margin-right: 32px;\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .fullwidth {\n        padding: 8px;\n        box-sizing: border-box;\n        width: 100%;\n        flex-grow: 1;\n      }\n\n      .header-right {\n        align-self: center;\n        display: flex;\n      }\n\n      .header-right img {\n        height: 30px;\n      }\n\n      .header-right:first-child {\n        width: 100%;\n        justify-content: flex-end;\n      }\n\n      .actions mwc-button {\n        margin: 8px;\n      }\n\n      :host([narrow]) .container {\n        margin-top: 0;\n      }\n\n      .narrow-header-left {\n        padding: 8px;\n        width: 90%;\n      }\n      .narrow-header-right {\n        align-self: right;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"insteon-device-properties-page\": InsteonDevicePropertiesPage;\n  }\n}\n"],"names":[],"sourceRoot":""}