{"version":3,"file":"152db136.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;;AC/DA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;AAbA;;;;;;;;;;AA0HA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://insteon-panel-frontend/./src/device/dialog-insteon-adding-device.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../homeassistant-frontend/src/components/ha-code-editor\";\nimport { createCloseHeading } from \"../../homeassistant-frontend/src/components/ha-dialog\";\nimport { haStyleDialog } from \"../../homeassistant-frontend/src/resources/styles\";\nimport { HomeAssistant } from \"../../homeassistant-frontend/src/types\";\nimport {\n  Insteon,\n  cancelAddInsteonDevice,\n  deviceAddedMessage,\n} from \"../data/insteon\";\nimport \"../../homeassistant-frontend/src/components/ha-form/ha-form\";\nimport { InsteonAddingDeviceDialogParams } from \"./show-dialog-adding-device\";\n\n@customElement(\"dialog-insteon-adding-device\")\nclass DialogInsteonAddingDevice extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public insteon!: Insteon;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _title?: string;\n\n  @state() private _opened = false;\n\n  @state() private _devicesAddedText = \"\";\n\n  @state() private _subscribed?: Promise<() => Promise<void>>;\n\n  private _devicesAdded?: [string];\n\n  private _address = \"\";\n\n  private _multiple = false;\n\n  private _refreshLinkingTimeoutHandle?: number;\n\n  public async showDialog(\n    params: InsteonAddingDeviceDialogParams\n  ): Promise<void> {\n    this.hass = params.hass;\n    this.insteon = params.insteon;\n    this._address = params.address;\n    this._multiple = params.multiple;\n    this._title = params.title;\n    this._opened = true;\n    this._subscribe();\n    this._devicesAddedText = \"\";\n    this._devicesAdded = undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=\"${this._close}\"\n        .heading=${createCloseHeading(this.hass!, this._title!)}\n      >\n        <div class=\"instructions\">${this._showInstructions()}</div>\n        <br />\n        <div class=\"devices\">${this._devicesAddedText}</div>\n        <div class=\"buttons\">\n          <mwc-button @click=${this._checkCancel} slot=\"primaryAction\">\n            ${this._buttonText(this._subscribed)}\n          </mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _showInstructions() {\n    if (this.insteon && !this._subscribed)\n      return this.insteon.localize(\"device.add.complete\");\n    if (this._address) return this._addressText(this._address);\n    if (this._multiple) return this.insteon!.localize(\"device.add.multiple\");\n    return this.insteon!.localize(\"device.add.single\");\n  }\n\n  private _buttonText(active): string {\n    if (active) return this.insteon.localize(\"device.actions.stop\");\n    return this.hass!.localize(\"ui.dialogs.generic.ok\");\n  }\n\n  private _showAddedDevices(): string {\n    if (!this._devicesAdded) return \"\";\n\n    let content = \"\";\n    this._devicesAdded.forEach((addr) => {\n      let device_text = this.insteon?.localize(\"device.add.added\");\n      device_text = device_text?.replace(\"--address--\", addr);\n      content = html`${content}<br />${device_text}`;\n    });\n    return content;\n  }\n\n  private _addressText(address: string): string {\n    let add_text = this.insteon.localize(\"device.add.address\");\n    add_text = add_text.replace(\"--address--\", address.toUpperCase());\n    return add_text;\n  }\n\n  private _handleMessage(message: deviceAddedMessage): void {\n    if (message.type === \"device_added\") {\n      // eslint-disable-next-line no-console\n      console.info(\"Added device: \" + message.address);\n      if (!this._devicesAdded) {\n        this._devicesAdded = [message.address];\n      } else {\n        this._devicesAdded.push(message.address);\n      }\n      this._devicesAddedText = this._showAddedDevices();\n    }\n    if (message.type === \"linking_stopped\") {\n      this._unsubscribe();\n    }\n  }\n\n  private _unsubscribe(): void {\n    if (this._refreshLinkingTimeoutHandle) {\n      clearTimeout(this._refreshLinkingTimeoutHandle);\n    }\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _subscribe(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribed = this.hass.connection.subscribeMessage(\n      (message) => this._handleMessage(message),\n      {\n        type: \"insteon/device/add\",\n        multiple: this._multiple,\n        device_address: this._address,\n      }\n    );\n    this._refreshLinkingTimeoutHandle = window.setTimeout(\n      () => this._unsubscribe(),\n      (3 * 60 + 15) * 1000\n    );\n  }\n\n  private _checkCancel(): void {\n    if (this._subscribed) {\n      cancelAddInsteonDevice(this.hass);\n      this._unsubscribe();\n    }\n    this._close();\n  }\n\n  private _close(): void {\n    this._opened = false;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        table {\n          width: 100%;\n        }\n        ha-combo-box {\n          width: 20px;\n        }\n        .title {\n          width: 200px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-insteon-adding-device\": DialogInsteonAddingDevice;\n  }\n}\n"],"names":[],"sourceRoot":""}