{"version":3,"file":"15506ccb.js","mappings":";;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-icon.ts"],"sourcesContent":["import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../common/entity/domain_icon\";\nimport { IconSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-picker\";\n\n@customElement(\"ha-selector-icon\")\nexport class HaIconSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: IconSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: {\n    icon_entity?: string;\n  };\n\n  protected render() {\n    const iconEntity = this.context?.icon_entity;\n\n    const stateObj = iconEntity ? this.hass.states[iconEntity] : undefined;\n\n    const placeholder =\n      this.selector.icon?.placeholder || stateObj?.attributes.icon;\n    const fallbackPath =\n      !placeholder && stateObj\n        ? domainIcon(computeDomain(iconEntity!), stateObj)\n        : undefined;\n\n    return html`\n      <ha-icon-picker\n        .hass=${this.hass}\n        .label=${this.label}\n        .value=${this.value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .fallbackPath=${this.selector.icon?.fallbackPath ?? fallbackPath}\n        .placeholder=${this.selector.icon?.placeholder ?? placeholder}\n        @value-changed=${this._valueChanged}\n      ></ha-icon-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-icon\": HaIconSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}