{"version":3,"file":"add81c96.js","mappings":";;;;;;;;;;;;;AA4CA;;;;;;;;AC3BA;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AC9CA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;AChEA;AAIA;;;;;AAMA;;;;AChBA;;ACoEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAGA;AApCA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;;;;AAMA;AAwBA;AASA;AAEA;;AAIA;;;AAnHA;AAwHA;AACA;;;AAGA;AAEA;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;;;;AAMA;;;;;;;;;AAiIA","sources":["webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-formfield.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-input-helper-text.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-select.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-chip.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-chip-set.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-radio.ts","webpack://insteon-panel-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-select.ts"],"sourcesContent":["import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          if ((input as any).disabled) {\n            break;\n          }\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n\n      :host {\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-chip-set\")\nexport class HaChipSet extends LitElement {\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip-set\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n\n      slot::slotted(ha-chip) {\n        margin: 4px 4px 4px 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip-set\": HaChipSet;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../common/dom/stop_propagation\";\nimport type { SelectOption, SelectSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-checkbox\";\nimport \"../ha-chip\";\nimport \"../ha-chip-set\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-formfield\";\nimport \"../ha-radio\";\nimport \"../ha-select\";\nimport \"../ha-input-helper-text\";\n\n@customElement(\"ha-selector-select\")\nexport class HaSelectSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: SelectSelector;\n\n  @property() public value?: string | string[];\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public localizeValue?: (key: string) => string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  private _filter = \"\";\n\n  protected render() {\n    const options =\n      this.selector.select?.options.map((option) =>\n        typeof option === \"object\"\n          ? (option as SelectOption)\n          : ({ value: option, label: option } as SelectOption)\n      ) || [];\n\n    const translationKey = this.selector.select?.translation_key;\n\n    if (this.localizeValue && translationKey) {\n      options.forEach((option) => {\n        option.label =\n          this.localizeValue!(`${translationKey}.options.${option.value}`) ||\n          option.label;\n      });\n    }\n\n    if (!this.selector.select?.custom_value && this._mode === \"list\") {\n      if (!this.selector.select?.multiple) {\n        return html`\n          <div>\n            ${this.label}\n            ${options.map(\n              (item: SelectOption) => html`\n                <ha-formfield .label=${item.label}>\n                  <ha-radio\n                    .checked=${item.value === this.value}\n                    .value=${item.value}\n                    .disabled=${item.disabled || this.disabled}\n                    @change=${this._valueChanged}\n                  ></ha-radio>\n                </ha-formfield>\n              `\n            )}\n          </div>\n          ${this._renderHelper()}\n        `;\n      }\n\n      return html`\n        <div>\n          ${this.label}\n          ${options.map(\n            (item: SelectOption) => html`\n              <ha-formfield .label=${item.label}>\n                <ha-checkbox\n                  .checked=${this.value?.includes(item.value)}\n                  .value=${item.value}\n                  .disabled=${item.disabled || this.disabled}\n                  @change=${this._checkboxChanged}\n                ></ha-checkbox>\n              </ha-formfield>\n            `\n          )}\n        </div>\n        ${this._renderHelper()}\n      `;\n    }\n\n    if (this.selector.select?.multiple) {\n      const value =\n        !this.value || this.value === \"\" ? [] : (this.value as string[]);\n\n      const optionItems = options.filter(\n        (option) => !option.disabled && !value?.includes(option.value)\n      );\n\n      return html`\n        ${value?.length\n          ? html`<ha-chip-set>\n              ${value.map(\n                (item, idx) =>\n                  html`\n                    <ha-chip hasTrailingIcon>\n                      ${options.find((option) => option.value === item)\n                        ?.label || item}\n                      <ha-svg-icon\n                        slot=\"trailing-icon\"\n                        .path=${mdiClose}\n                        .idx=${idx}\n                        @click=${this._removeItem}\n                      ></ha-svg-icon>\n                    </ha-chip>\n                  `\n              )}\n            </ha-chip-set>`\n          : \"\"}\n\n        <ha-combo-box\n          item-value-path=\"value\"\n          item-label-path=\"label\"\n          .hass=${this.hass}\n          .label=${this.label}\n          .helper=${this.helper}\n          .disabled=${this.disabled}\n          .required=${this.required && !value.length}\n          .value=${this._filter}\n          .items=${optionItems}\n          .allowCustomValue=${this.selector.select.custom_value ?? false}\n          @filter-changed=${this._filterChanged}\n          @value-changed=${this._comboBoxValueChanged}\n          @opened-changed=${this._openedChanged}\n        ></ha-combo-box>\n      `;\n    }\n\n    if (this.selector.select?.custom_value) {\n      if (\n        this.value !== undefined &&\n        !Array.isArray(this.value) &&\n        !options.find((option) => option.value === this.value)\n      ) {\n        options.unshift({ value: this.value, label: this.value });\n      }\n\n      const optionItems = options.filter((option) => !option.disabled);\n\n      return html`\n        <ha-combo-box\n          item-value-path=\"value\"\n          item-label-path=\"label\"\n          .hass=${this.hass}\n          .label=${this.label}\n          .helper=${this.helper}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .items=${optionItems}\n          .value=${this.value}\n          @filter-changed=${this._filterChanged}\n          @value-changed=${this._comboBoxValueChanged}\n          @opened-changed=${this._openedChanged}\n        ></ha-combo-box>\n      `;\n    }\n\n    return html`\n      <ha-select\n        fixedMenuPosition\n        naturalMenuWidth\n        .label=${this.label ?? \"\"}\n        .value=${this.value ?? \"\"}\n        .helper=${this.helper ?? \"\"}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        @closed=${stopPropagation}\n        @selected=${this._valueChanged}\n      >\n        ${options.map(\n          (item: SelectOption) => html`\n            <mwc-list-item .value=${item.value} .disabled=${item.disabled}\n              >${item.label}</mwc-list-item\n            >\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  private _renderHelper() {\n    return this.helper\n      ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n      : \"\";\n  }\n\n  private get _mode(): \"list\" | \"dropdown\" {\n    return (\n      this.selector.select?.mode ||\n      ((this.selector.select?.options?.length || 0) < 6 ? \"list\" : \"dropdown\")\n    );\n  }\n\n  private _valueChanged(ev) {\n    ev.stopPropagation();\n    const value = ev.detail?.value || ev.target.value;\n    if (this.disabled || value === undefined) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: value,\n    });\n  }\n\n  private _checkboxChanged(ev) {\n    ev.stopPropagation();\n    if (this.disabled) {\n      return;\n    }\n\n    let newValue: string[];\n    const value: string = ev.target.value;\n    const checked = ev.target.checked;\n\n    if (checked) {\n      if (!this.value) {\n        newValue = [value];\n      } else if (this.value.includes(value)) {\n        return;\n      } else {\n        newValue = [...this.value, value];\n      }\n    } else {\n      if (!this.value?.includes(value)) {\n        return;\n      }\n      newValue = (this.value as string[]).filter((v) => v !== value);\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  private async _removeItem(ev) {\n    const value: string[] = [...(this.value! as string[])];\n    value.splice(ev.target.idx, 1);\n\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n    await this.updateComplete;\n    this._filterChanged();\n  }\n\n  private _comboBoxValueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (this.disabled || newValue === \"\") {\n      return;\n    }\n\n    if (!this.selector.select?.multiple) {\n      fireEvent(this, \"value-changed\", {\n        value: newValue,\n      });\n      return;\n    }\n\n    if (newValue !== undefined && this.value?.includes(newValue)) {\n      return;\n    }\n\n    setTimeout(() => {\n      this._filterChanged();\n      this.comboBox.setInputValue(\"\");\n    }, 0);\n\n    const currentValue =\n      !this.value || this.value === \"\" ? [] : (this.value as string[]);\n\n    fireEvent(this, \"value-changed\", {\n      value: [...currentValue, newValue],\n    });\n  }\n\n  private _openedChanged(ev?: CustomEvent): void {\n    if (ev?.detail.value) {\n      this._filterChanged();\n    }\n  }\n\n  private _filterChanged(ev?: CustomEvent): void {\n    this._filter = ev?.detail.value || \"\";\n\n    const filteredItems = this.comboBox.items?.filter((item) => {\n      const label = item.label || item.value;\n      return label.toLowerCase().includes(this._filter?.toLowerCase());\n    });\n\n    if (this._filter && this.selector.select?.custom_value) {\n      filteredItems?.unshift({ label: this._filter, value: this._filter });\n    }\n\n    this.comboBox.filteredItems = filteredItems;\n  }\n\n  static styles = css`\n    ha-select,\n    mwc-formfield,\n    ha-formfield {\n      display: block;\n    }\n    mwc-list-item[disabled] {\n      --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-select\": HaSelectSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}