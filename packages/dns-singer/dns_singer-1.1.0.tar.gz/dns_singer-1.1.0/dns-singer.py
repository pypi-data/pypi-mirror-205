import idna
import uuid
import argparse


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--domain", required=True,   help="the domain name suffix")
    parser.add_argument("-f", "--file",   required=True,   help="the file to read from")
    parser.add_argument("-s", "--start",  default="start", help="start subdomain")
    parser.add_argument("-t", "--ttl",    default=60,      help="TTL of the records")
    return parser.parse_args()


def main():
    args = parse_args()
    with open(args.file, "r", encoding="utf-8") as f:
        text = f.read().strip().replace("\r", "").split("\n")
    lines = []
    for line in text:
        if line.startswith("#"):
            continue
        if line.strip() == "":
            continue
        lines.append(line.strip())
    lines.insert(0, args.start)
    idn_lines = [idna.encode(x).decode("ascii") for x in lines]
    random_lines = [uuid.uuid4().hex[:8] for _ in lines]
    max_idn_length = max([len(x) for x in idn_lines])
    print(f"; Generated by dns-singer v1.0.0")
    print(f"; Copyright (c) 2023 Joseph Chris <joseph@josephcz.xyz> MIT License")
    print(f"; Domain: {args.domain}\n")
    for i in range(len(lines) - 1):
        idn           = idn_lines[i]
        random        = random_lines[i]
        next_idn      = idn_lines[i + 1]
        next_random   = random_lines[i + 1]
        next_original = lines[i + 1]
        zone_line_format = "{0:<" + str(max_idn_length + 12) + "} {1} IN CNAME {2:<" + str(max_idn_length + 12 + len(args.domain)) + "} ; {3}"
        zone_line = zone_line_format.format(
            f"{idn}.{random}",
            args.ttl,
            f"{next_idn}.{next_random}.{args.domain}.",
            next_original
        )
        print(zone_line)


if __name__ == "__main__":
    main()
