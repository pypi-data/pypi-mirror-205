import pandas as pd
import pytest

from cnswd.setting.constants import MARKET_START
from cnswd.utils.dt_utils import time_for_next_update


ts = pd.Timestamp
nanoseconds = pd.Timedelta(nanoseconds=1)


@pytest.mark.parametrize("t,expected", [
    (None,  ts(MARKET_START)),
])
def test_null(t, expected):
    actual = time_for_next_update(t)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    (ts('2019-11-29 10:30:25.587389'),  1, ts('2019-11-29 10:31:00')),
    (ts('2019-11-29 10:30:25.587389'),  2, ts('2019-11-29 10:32:00')),
])
def test_minute(t, num, expected):
    actual = time_for_next_update(t, 'MIN', num)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    (ts('2019-11-29 10:30:25.587389'),  1, ts('2019-11-29 11:00:00')),
    (ts('2019-11-29 10:30:25.587389'),  2, ts('2019-11-29 12:00:00')),
])
def test_hour(t, num, expected):
    actual = time_for_next_update(t, 'H', num)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    (ts('2019-11-29 10:30:25.587389'),  8, ts('2019-11-30 08:00:00')),
    (ts('2019-11-29 10:30:25.587389'),  11, ts('2019-11-29 11:00:00')),
    (ts('2019-11-30 10:30:25.587389'),  11, ts('2019-11-30 11:00:00')),
    (ts('2019-11-30 10:30:25.587389'),  10, ts('2019-12-01 10:00:00')),
])
def test_day(t, num, expected):
    actual = time_for_next_update(t, 'D', num)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # 未达更新时点的工作日，只更改小时
    (ts('2019-11-18 10:30:25.587389'),  18, ts('2019-11-18 18:00:00')),
    (ts('2019-11-19 10:30:25.587389'),  18, ts('2019-11-19 18:00:00')),
    (ts('2019-11-20 10:30:25.587389'),  18, ts('2019-11-20 18:00:00')),
    (ts('2019-11-21 10:30:25.587389'),  18, ts('2019-11-21 18:00:00')),
    (ts('2019-11-22 10:30:25.587389'),  18, ts('2019-11-22 18:00:00')),
    # 非工作日 -> 最近一个工作日
    (ts('2019-11-23 10:30:25.587389'),  18, ts('2019-11-25 18:00:00')),
    (ts('2019-11-24 10:30:25.587389'),  18, ts('2019-11-25 18:00:00')),

    # 超过更新时点的工作日 -> 下一个工作日
    (ts('2019-11-18 18:19:25.587389'),  18, ts('2019-11-19 18:00:00')),
    (ts('2019-11-19 18:19:25.587389'),  18, ts('2019-11-20 18:00:00')),
    (ts('2019-11-20 18:19:25.587389'),  18, ts('2019-11-21 18:00:00')),
    (ts('2019-11-21 18:19:25.587389'),  18, ts('2019-11-22 18:00:00')),
    # 下周一
    (ts('2019-11-22 18:19:25.587389'),  18, ts('2019-11-25 18:00:00')),
])
def test_bday(t, num, expected):
    actual = time_for_next_update(t, 'B', num)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2019-11-18 10:30:25.587389'),  18, ts('2019-11-25 00:00:00')),
    (ts('2019-11-19 10:30:25.587389'),  19, ts('2019-11-25 00:00:00')),
    (ts('2019-11-20 10:30:25.587389'),  20, ts('2019-11-25 00:00:00')),
    (ts('2019-11-21 10:30:25.587389'),  21, ts('2019-11-25 00:00:00')),
    (ts('2019-11-22 10:30:25.587389'),  22, ts('2019-11-25 00:00:00')),
    (ts('2019-11-23 10:30:25.587389'),  18, ts('2019-11-25 00:00:00')),
    (ts('2019-11-24 10:30:25.587389'),  18, ts('2019-11-25 00:00:00')),
])
def test_week_start(t, num, expected):
    actual = time_for_next_update(t, 'W', is_end=False)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2019-11-18 10:30:25.587389'),  18, ts('2019-12-02') - nanoseconds),
    (ts('2019-11-19 10:30:25.587389'),  19, ts('2019-12-02') - nanoseconds),
    (ts('2019-11-20 10:30:25.587389'),  20, ts('2019-12-02') - nanoseconds),
    (ts('2019-11-21 10:30:25.587389'),  21, ts('2019-12-02') - nanoseconds),
    (ts('2019-11-22 10:30:25.587389'),  22, ts('2019-12-02') - nanoseconds),
    (ts('2019-11-23 10:30:25.587389'),  18, ts('2019-12-02') - nanoseconds),
    (ts('2019-11-24 10:30:25.587389'),  18, ts('2019-12-02') - nanoseconds),
])
def test_week_end(t, num, expected):
    actual = time_for_next_update(t, 'W', is_end=True)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2018-01-31 10:30:25.587389'),  18, ts('2018-02-01')),
    (ts('2018-02-28 10:30:25.587389'),  19, ts('2018-03-01')),
    (ts('2018-03-31 10:30:25.587389'),  20, ts('2018-04-01')),
    (ts('2018-04-30 10:30:25.587389'),  21, ts('2018-05-01')),
    (ts('2018-05-31 10:30:25.587389'),  22, ts('2018-06-01')),
    (ts('2018-06-30 10:30:25.587389'),  18, ts('2018-07-01')),
    (ts('2018-07-31 10:30:25.587389'),  18, ts('2018-08-01')),
    (ts('2018-08-31 10:30:25.587389'),  19, ts('2018-09-01')),
    (ts('2018-09-30 10:30:25.587389'),  20, ts('2018-10-01')),
    (ts('2018-10-31 10:30:25.587389'),  21, ts('2018-11-01')),
    (ts('2018-11-30 10:30:25.587389'),  22, ts('2018-12-01')),
    (ts('2018-12-31 10:30:25.587389'),  18, ts('2019-01-01')),
])
def test_month_start(t, num, expected):
    actual = time_for_next_update(t, 'M', is_end=False)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2018-01-01 10:30:25.587389'),  18, ts('2018-02-28')),
    (ts('2018-02-01 10:30:25.587389'),  19, ts('2018-03-31')),
    (ts('2018-03-01 10:30:25.587389'),  20, ts('2018-04-30')),
    (ts('2018-04-01 10:30:25.587389'),  21, ts('2018-05-31')),
    (ts('2018-05-01 10:30:25.587389'),  22, ts('2018-06-30')),
    (ts('2018-06-01 10:30:25.587389'),  18, ts('2018-07-31')),
    (ts('2018-07-01 10:30:25.587389'),  18, ts('2018-08-31')),
    (ts('2018-08-01 10:30:25.587389'),  19, ts('2018-09-30')),
    (ts('2018-09-01 10:30:25.587389'),  20, ts('2018-10-31')),
    (ts('2018-10-01 10:30:25.587389'),  21, ts('2018-11-30')),
    (ts('2018-11-01 10:30:25.587389'),  22, ts('2018-12-31')),
    (ts('2018-12-01 10:30:25.587389'),  18, ts('2019-01-31')),
])
def test_month_end(t, num, expected):
    actual = time_for_next_update(t, 'M', is_end=True)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2018-01-31 10:30:25.587389'),  18, ts('2018-04-01')),
    (ts('2018-02-28 10:30:25.587389'),  19, ts('2018-04-01')),
    (ts('2018-03-31 10:30:25.587389'),  20, ts('2018-04-01')),
    (ts('2018-04-30 10:30:25.587389'),  21, ts('2018-07-01')),
    (ts('2018-05-31 10:30:25.587389'),  22, ts('2018-07-01')),
    (ts('2018-06-30 10:30:25.587389'),  18, ts('2018-07-01')),
    (ts('2018-07-31 10:30:25.587389'),  18, ts('2018-10-01')),
    (ts('2018-08-31 10:30:25.587389'),  19, ts('2018-10-01')),
    (ts('2018-09-30 10:30:25.587389'),  20, ts('2018-10-01')),
    (ts('2018-10-31 10:30:25.587389'),  21, ts('2019-01-01')),
    (ts('2018-11-30 10:30:25.587389'),  22, ts('2019-01-01')),
    (ts('2018-12-31 10:30:25.587389'),  18, ts('2019-01-01')),
])
def test_quarter_begin(t, num, expected):
    actual = time_for_next_update(t, 'Q', is_end=False)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2018-01-31 10:30:25.587389'),  18, ts('2018-06-30')),
    (ts('2018-02-28 10:30:25.587389'),  19, ts('2018-06-30')),
    (ts('2018-03-31 10:30:25.587389'),  20, ts('2018-06-30')),
    (ts('2018-04-30 10:30:25.587389'),  21, ts('2018-09-30')),
    (ts('2018-05-31 10:30:25.587389'),  22, ts('2018-09-30')),
    (ts('2018-06-30 10:30:25.587389'),  18, ts('2018-09-30')),
    (ts('2018-07-31 10:30:25.587389'),  18, ts('2018-12-31')),
    (ts('2018-08-31 10:30:25.587389'),  19, ts('2018-12-31')),
    (ts('2018-09-30 10:30:25.587389'),  20, ts('2018-12-31')),
    (ts('2018-10-31 10:30:25.587389'),  21, ts('2019-03-31')),
    (ts('2018-11-30 10:30:25.587389'),  22, ts('2019-03-31')),
    (ts('2018-12-31 10:30:25.587389'),  18, ts('2019-03-31')),
])
def test_quarter_end(t, num, expected):
    actual = time_for_next_update(t, 'Q', is_end=True)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2018-01-31'),  18, ts('2019-01-01')),
    (ts('2018-02-28'),  19, ts('2019-01-01')),
    (ts('2018-03-31'),  20, ts('2019-01-01')),
    (ts('2018-04-30'),  21, ts('2019-01-01')),
    (ts('2018-05-31'),  22, ts('2019-01-01')),
    (ts('2018-06-30'),  18, ts('2019-01-01')),
    (ts('2018-07-31'),  18, ts('2019-01-01')),
    (ts('2018-08-31'),  19, ts('2019-01-01')),
    (ts('2018-09-30'),  20, ts('2019-01-01')),
    (ts('2018-10-31'),  21, ts('2019-01-01')),
    (ts('2018-11-30'),  22, ts('2019-01-01')),
    (ts('2018-12-31'),  18, ts('2019-01-01')),
])
def test_year_start(t, num, expected):
    actual = time_for_next_update(t, 'Y', is_end=False)
    assert actual == expected


@pytest.mark.parametrize("t,num,expected", [
    # num没有影响
    (ts('2018-01-31'),  18, ts('2019-12-31')),
    (ts('2018-02-28'),  19, ts('2019-12-31')),
    (ts('2018-03-31'),  20, ts('2019-12-31')),
    (ts('2018-04-30'),  21, ts('2019-12-31')),
    (ts('2018-05-31'),  22, ts('2019-12-31')),
    (ts('2018-06-30'),  18, ts('2019-12-31')),
    (ts('2018-07-31'),  18, ts('2019-12-31')),
    (ts('2018-08-31'),  19, ts('2019-12-31')),
    (ts('2018-09-30'),  20, ts('2019-12-31')),
    (ts('2018-10-31'),  21, ts('2019-12-31')),
    (ts('2018-11-30'),  22, ts('2019-12-31')),
    (ts('2018-12-31'),  18, ts('2019-12-31')),
])
def test_year_end(t, num, expected):
    actual = time_for_next_update(t, 'Y', is_end=True)
    assert actual == expected


@pytest.mark.skip
@pytest.mark.parametrize("t,is_end,expected", [
    # num没有影响
    (ts('2019-01-31'),  False, ts('2019-01-01')),
    (ts('2019-02-28'),  True, ts('2019-12-31')),
])
def test_this_year(t, is_end, expected):
    actual = time_for_next_update(t, 'Y', is_end=is_end)
    assert actual == expected
