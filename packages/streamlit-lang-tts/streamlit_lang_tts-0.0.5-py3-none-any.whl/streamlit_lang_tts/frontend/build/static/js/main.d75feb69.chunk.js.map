{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","textToSpeak","props","isFocused","render","name","label","translation","theme","style","borderStyling","primaryColor","border","outline","fontSize","padding","background","borderRadius","width","height","marginLeft","_jsx","children","_jsxs","display","fontWeight","flex","fontStyle","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","msg","window","SpeechSynthesisUtterance","monica","speechSynthesis","getVoices","filter","voice","voiceURI","text","rate","speak","setState","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"gNAgBMA,EAAW,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GA8Fd,OA9FcP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KACRM,MAAQ,CAAEC,YAAaZ,EAAKa,MAAMR,KAAW,KAAGS,WAAW,GAAOd,EAElEe,OAAS,WAGd,IAAMC,EAAOhB,EAAKa,MAAMR,KAAW,KAC7BY,EAAQjB,EAAKa,MAAMR,KAAY,OAAK,MACpCa,EAAclB,EAAKa,MAAMR,KAAkB,YAKzCc,EAAUnB,EAAKa,MAAfM,MACFC,EAA6B,CAAC,EAIpC,GAAID,EAAO,CAGT,IAAME,EAAa,aAAAX,OACjBV,EAAKW,MAAMG,UAAYK,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAChBD,EAAMG,OAAS,iBACfH,EAAMK,SAAW,OACjBL,EAAMM,QAAU,MAChBN,EAAMO,WAAa,YACnBP,EAAMQ,aAAe,MACrBR,EAAMS,MAAQ,OACdT,EAAMU,OAAS,OACfV,EAAMW,WAAa,MACrB,CAMA,OACEC,cAAA,OAAAC,SACEC,eAAA,OAAKd,MAAO,CAACe,QAAS,QAAQF,SAAA,CAC5BD,cAAA,OAAKZ,MAAO,CAACS,MAAO,QAAQI,SAC1BD,cAAA,KAAAC,SACED,cAAA,QAAMZ,MAAO,CAACgB,WAAY,QAAQH,SAAEhB,QAGxCiB,eAAA,OAAKd,MAAO,CAACiB,KAAM,KAAKJ,SAAA,CACtBC,eAAA,KAAAD,SAAA,CAAIjB,EAAK,WACTgB,cAAA,KAAGZ,MAAO,CAACkB,UAAW,UAAUL,SAAEf,OAEpCc,cAAA,UACEZ,MAAOA,EACPmB,QAASvC,EAAKwC,UACdC,SAAUzC,EAAKa,MAAM4B,SACrBC,QAAS1C,EAAK2C,SACdC,OAAQ5C,EAAK6C,QAAQZ,SACtB,qBAMT,EAEAjC,EACQwC,UAAY,WAGMxC,EAAKW,MAArBC,YAAR,IACMkC,EAAM,IAAIC,OAAOC,yBACjBC,EAASF,OAAOG,gBAAgBC,YAAYC,QAChD,SAACC,GAAK,MAAwB,yCAAnBA,EAAMC,QAAmD,IAAE,GACxER,EAAIS,KAAOvD,EAAKa,MAAMR,KAAW,KACjCyC,EAAIO,MAAQJ,EAEZH,EAAIU,KAAO,GACXT,OAAOG,gBAAgBO,MAAMX,EAM/B,EAEA9C,EACQ2C,SAAW,WACjB3C,EAAK0D,SAAS,CAAE5C,WAAW,GAC7B,EAEAd,EACQ6C,QAAU,WAChB7C,EAAK0D,SAAS,CAAE5C,WAAW,GAC7B,EAACd,CAAA,QAAA2D,YAAAhE,EAAA,CA9Fc,CAASiE,KAsGXC,cAAwBlE,GClHvCmE,IAAS/C,OACPiB,cAAC+B,IAAMC,WAAU,CAAA/B,SACfD,cAACrC,EAAW,MAEdsE,SAASC,eAAe,Q","file":"static/js/main.d75feb69.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  textToSpeak: string;\n  isFocused: boolean;\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { textToSpeak: this.props.args[\"name\"], isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const label = this.props.args[\"label\"] || 'AI:'\n    const translation = this.props.args[\"translation\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `0px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n      style.border = '1px solid gray'\n      style.fontSize = '20px';\n      style.padding = '3px';\n      style.background = 'lightgray';\n      style.borderRadius = '5px';\n      style.width = '70px';\n      style.height = '70px';\n      style.marginLeft = '10px';\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div>\n        <div style={{display: 'flex'}}>\n          <div style={{width: '70px'}}>\n            <p>\n              <span style={{fontWeight: 'bold'}}>{label}</span>\n            </p>\n          </div>\n          <div style={{flex: '1'}}>\n            <p>{name} &nbsp;</p>\n            <p style={{fontStyle: 'italic'}}>{translation}</p>\n          </div>\n          <button\n            style={style}\n            onClick={this.onClicked}\n            disabled={this.props.disabled}\n            onFocus={this._onFocus}\n            onBlur={this._onBlur}\n          >\n            ðŸ—£\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const { textToSpeak } = this.state;\n    const msg = new window.SpeechSynthesisUtterance();\n    const monica = window.speechSynthesis.getVoices().filter(\n      (voice) => voice.voiceURI === 'com.apple.voice.compact.es-ES.Monica')[0];\n    msg.text = this.props.args[\"name\"];\n    msg.voice = monica;\n    // Slower speech rate is easier for learning\n    msg.rate = 0.8;\n    window.speechSynthesis.speak(msg);\n\n//     this.setState(\n//       prevState => ({ textToSpeak: prevState.textToSpeak }),\n//       () => Streamlit.setComponentValue(textToSpeak)\n//     )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}