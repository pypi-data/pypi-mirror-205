# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['toio',
 'toio.cube',
 'toio.cube.api',
 'toio.device_interface',
 'toio.scanner',
 'toio.scanner.platform',
 'toio.simple']

package_data = \
{'': ['*']}

install_requires = \
['bleak==0.20.1']

setup_kwargs = {
    'name': 'toio-py',
    'version': '1.0.2',
    'description': 'Control toio™Core Cube',
    'long_description': '\ufeff# toio.py\n\n[![PyPI](https://img.shields.io/pypi/v/toio-py?color=00aeca)](https://pypi.org/project/toio-py/)\n\nThis is a library for controlling [toio™Core Cube](https://toio.io/platform/cube/) from Python.\n\nBased on [toio Core Cube Specifications](https://toio.github.io/toio-spec/en/) v2.3.0.\n\n**（日本語版 README.md は[こちら](https://github.com/toio/toio.py/blob/main/README.ja.md)）**\n\n## Features\n\n- Uses [bleak](https://github.com/hbldh/bleak) for Bluetooth communication\n- Supports Python 3.11 and later versions\n- Multi-platform (Windows, Linux, macOS)\n- No dedicated Bluetooth dongle required\n- Asynchronous API (ToioCoreCube API) based on the toio Core Cube Specifications and synchronous API (SimpleCube API) for easy cube control\n- Scanning function by specifying BLE addresses and cube-specific names\n- API to control cube functions classified by characteristics (ToioCoreCube API)\n- Ability to scan paired cubes (Windows only)\n\n## System requirements\n\n### Primaly tested environment\n\n- Windows: Windows 10 (21H2)\n\n### Secondary tested environment\n\n- Linux: Ubuntu22.04\n- macOS: macOS 12(Monterey)\n\n## Setup and tutorial\n\nSee below for instructions on how to set up and run the tutorial.\n\n- [Setup Guide (English)](https://github.com/toio/toio.py/blob/main/SETUP_GUIDE.en.md)\n- [Setup Guide (Japanese)](https://github.com/toio/toio.py/blob/main/SETUP_GUIDE.ja.md)\n- [Setup Guide (Chinese)](https://github.com/toio/toio.py/blob/main/SETUP_GUIDE.zh.md)\n\n---\n\n## SimpleCube API\n\nSee [SIMPLE_API.en.md](https://github.com/toio/toio.py/blob/main/SIMPLE_API.en.md) for information on the SimpleCube API for easily controlling toio Core Cubes.\n\n- [SIMPLE_API.en.md (English)](https://github.com/toio/toio.py/blob/main/SIMPLE_API.en.md)\n- [SIMPLE_API.ja.md (Japanese)](https://github.com/toio/toio.py/blob/main/SIMPLE_API.ja.md)\n\n---\n\n## API document\n\n- [API Document](https://toio.github.io/toio.py/)\n\n---\n\n## Implementation overview\n\ntoio.py consists of two classes, Scanner and ToioCoreCube.\n\n### Scanner\n\nClass for scanning cubes via the BLE interface.\n\nYou can scan for cubes in the following ways:\n\n- Scan for nearby cubes\n- Scan for a specific cube by name (the last 3 characters of the toio Core Cube name)\n\nThe following is available only for Windows and Linux:\n\n- Scan for a specific cube by BLE address\n\nThe following is available only for Windows:\n\n- Scan for cubes registered (paired) with OS\n\n### ToioCoreCube\n\nClass for controlling the cube.\n\nToioCoreCube has subclasses corresponding to the characteristics described in [toio CoreCube Specifications](https://toio.github.io/toio-spec/). You access the various functions of the cube via these subclasses.\n\n## Sample code\n\n### Scan and connect\n\nUse `BLEScanner.scan()`.\n\nThe argument is the number of cubes to find in the scan.\n\nIf the specified number of cubes are not found by the timeout (default value is 5 seconds), it returns a list of the number of cubes found at the time of the timeout.\n\nThe following sample scans and connects nearby cubes.\n\nDisconnects 3 seconds after connecting.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\nasync def scan_and_connect():\n    dev_list = await BLEScanner.scan(num=1)\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    await asyncio.sleep(3)\n\n    await cube.disconnect()\n    return 0\n\nif __name__ == "__main__":\n    asyncio.run(scan_and_connect())\n```\n\n### Scan and connect (scan by cube name)\n\nUse `BLEScanner.scan_with_id()`.\n\nThe argument is [set (set type)](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset), a 3-digit string at the end of the cube.\nThe argument is given as set even if only one unit is to be scanned.\n\nIf the specified number of cubes are not found by the timeout (default value is 5 seconds), it returns a list of cubes found at the time of the timeout.\n\n```Python\n    dev_list = await BLEScanner.scan_with_id(cube_id={"C7f"})\n```\n\nScan and connect `toio Core Cube-C7f`.\n\nDisconnects 3 seconds after connecting.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\nasync def scan_and_connect():\n    dev_list = await BLEScanner.scan_with_id(cube_id={"C7f"})\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    await asyncio.sleep(3)\n\n    await cube.disconnect()\n    return 0\n\nif __name__ == "__main__":\n    asyncio.run(scan_and_connect())\n```\n\n### Scan and connect (scan paired cubes: supported on Windows only)\n\nWindows only, paired cubes can be scanned.\n\nUse `BLEScanner.scan_registered_cubes()`.\n\nThe argument is the number of cubes to find in the scan.\n\nIf the specified number of cubes are not found by the timeout (default value is 5 seconds), it returns a list of the number of cubes found at the time of the timeout.\n\n```Python\n    dev_list = await BLEScanner.scan_registered_cubes()\n```\n\nScan for paired cubes and connect them. (Pair the cube with Windows using "Add Bluetooth Device" before doing this.)\n\nDisconnects 3 seconds after connecting.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\nasync def scan_and_connect():\n    dev_list = await BLEScanner.scan_registered_cubes(num=1)\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    await asyncio.sleep(3)\n\n    await cube.disconnect()\n    return 0\n\nif __name__ == "__main__":\n    asyncio.run(scan_and_connect())\n```\n\n### Get the cube location\n\nUse the class `ToioCoreCube.api.id_information` to get the location information of the cube.\nThis class provides access to the [read sensor characteristic](https://toio.github.io/toio-spec/en/docs/ble_id).\n\nThe following code reads and displays the cube ID information 200 times.\nIt uses `read()` to read to the characteristic.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\nasync def read_id():\n    device_list = await BLEScanner.scan(1)\n    assert len(device_list)\n    cube = ToioCoreCube(device_list[0].interface)\n    await cube.connect()\n    for n in range(200):\n        pos = await cube.api.id_information.read()\n        print("%4d:%s" % (n, str(pos)))\n    await cube.disconnect()\n\nif __name__ == "__main__":\n    asyncio.run(read_id())\n```\n\n### Get the cube location (using notification)\n\nYou can receive notifications from the cube by registering a notification handler with `register_notification_handler()`.\nNotifications are per each characteristic. A notification handler registered with `ToioCoreCube.api.id_information.register_notification_handler()` receives\nreceive only notifications from the read sensor.\n\nThe following code reads the ID by notification.\n\nAfter 10 seconds, the handler is unregistered and disconnected.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\n# Notification handler\ndef notification_handler(payload: bytearray):\n    id_info = IdInformation.is_my_data(payload)\n    print(str(id_info))\n\n\nasync def read_id():\n    # connect to a cube\n    dev_list = await BLEScanner.scan(1)\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    # add notification handler\n    await cube.api.id_information.register_notification_handler(notification_handler)\n    await asyncio.sleep(10)\n\n    # remove notification handler\n    await cube.api.id_information.unregister_notification_handler(\n        notification_handler\n    )\n    await cube.disconnect()\n    return 0\n\nif __name__ == "__main__":\n    asyncio.run(read_id())\n```\n\nThe complete code that keeps displaying ID information until Ctlr-C is pressed is [examples/read_position.py](https://github.com/toio/toio.py/blob/main/examples/read_position.py).\n\n### Motor control\n\nThe `ToioCoreCube.api.motor` class is used to control the motor.\nThis class provides access to the [motor\'s characteristic](https://toio.github.io/toio-spec/en/docs/ble_motor).\n\nThe following code uses `motor_control()` to rotate the cube in place for 2 seconds.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\nasync def motor_1():\n    # connect to a cube\n    dev_list = await BLEScanner.scan(1)\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    # go\n    await cube.api.motor.motor_control(10, -10)\n    await asyncio.sleep(2)\n    # stop\n    await cube.api.motor.motor_control(0, 0)\n\n    await cube.disconnect()\n    return 0\n\nif __name__ == "__main__":\n    asyncio.run(motor_1())\n```\n\n### Motor control (move to specified position)\n\nUse `motor.motor_control_target()` to move the cube to a specified position on the mat.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\n# Notification handler\ndef notification_handler(payload: bytearray):\n    id_info = IdInformation.is_my_data(payload)\n    print(str(id_info))\n\nasync def motor_2():\n    # connect to a cube\n    dev_list = await BLEScanner.scan(1)\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    await cube.api.motor.register_notification_handler(notification_handler)\n    await cube.api.motor.motor_control_target(\n        timeout=5,\n        movement_type=MovementType.Linear,\n        speed=Speed(\n            max=100, speed_change_type=SpeedChangeType.AccelerationAndDeceleration),\n        target=TargetPosition(\n            cube_location=CubeLocation(point=Point(x=200, y=200), angle=0),\n            rotation_option=RotationOption.AbsoluteOptimal,\n        ),\n    )\n\n    await asyncio.sleep(4)\n    await cube.disconnect()\n\nif __name__ == "__main__":\n    asyncio.run(motor_2())\n```\n\n### Motor control (move to multiple specified positions)\n\nUse `motor.motor_control_multiple_targets()` to move the cube to a specified position on multiple mats.\n\n```Python\nimport asyncio\n\nfrom toio import *\n\nasync def motor_3():\n    # connect to a cube\n    dev_list = await BLEScanner.scan(1)\n    assert len(dev_list)\n    cube = ToioCoreCube(dev_list[0].interface)\n    await cube.connect()\n\n    targets = [\n        TargetPosition(\n            cube_location=CubeLocation(point=Point(x=250, y=250), angle=0), rotation_option=RotationOption.AbsoluteOptimal\n        ),\n        TargetPosition(\n            cube_location=CubeLocation(point=Point(x=120, y=170), angle=0), rotation_option=RotationOption.AbsoluteOptimal\n        ),\n    ]\n    await cube.api.motor.motor_control_multiple_targets(\n        timeout=5,\n        movement_type=MovementType.Linear,\n        speed=Speed(\n            max=100, speed_change_type=SpeedChangeType.AccelerationAndDeceleration),\n        mode=WriteMode.Overwrite,\n        target_list=targets,\n    )\n\n    await asyncio.sleep(5)\n    await cube.disconnect()\n\nif __name__ == "__main__":\n    asyncio.run(motor_3())\n```\n',
    'author': 'Sony Interactive Entertainment',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://toio.io/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.11,<4.0',
}


setup(**setup_kwargs)
