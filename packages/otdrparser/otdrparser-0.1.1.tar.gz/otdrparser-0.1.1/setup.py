# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['otdrparser']
setup_kwargs = {
    'name': 'otdrparser',
    'version': '0.1.1',
    'description': 'Python library for parsing OTDR files in Telcordia SR-4731 Version 2 format',
    'long_description': '# otdrparser\n\n**otdrparser** is a Python library for parsing OTDR traces in Telcordia SR-4731 Version 2 format (```*.sor``` files).\n\nIt is effectively a simplified re-implementation of the [pyOTDR](https://github.com/sid5432/pyOTDR) project. Its author, Hsin-Yu Sidney Li, together with several others deserve a lot of credit for [reverse-engineering](https://morethanfootnotes.blogspot.com/2015/07/the-otdr-optical-time-domain.html) \nthe Telcordia SR-4731 standard as it is not freely available. \n\nThe **otdrparser** library differs from the **pyOTDR** project in multiple ways.\n* It\'s just a library with a single ``.parse()`` function.\n* It only supports Version 2 of the Telcordia SR-4731 standard.\n* It is assumed that the OTDR file contains only a single trace.\n* The checksum block is read but not verified.\n* No attempt is made to accomodate vendor specific "quirks" in standard blocks.\n* I am certain **otdrparser** contains bugs. Please open a Github Issue if you find any.\n\nThe **otdrparser** library contains only a single public ``.parse()`` function which returns the "blocks" contained in the file as a list of dictionaries. \n```python\nimport otdrparser\nwith open(\'my_trace_file.sor\', \'rb\') as fp:\n    blocks = otdrparser.parse(fp)\n```\nThe output below shows the (abridged) content of ```blocks``` converted into JSON format for easier reading.\n* Each "block" has a ```name``` attribute which describes its type.\n* Data points are included as a list of (distance, dBm) pairs.\n* Vendor proprietary blocks are included as raw bytes. There are none in the example below.\n* Some data is interpreted. For example ```fibre_type=652``` is also interpreted as ```"ITU-T G.652 (standard single-mode fiber)"```\n```json\n[\n  { "name": "Map",\n    "version": "2.0",\n    "numbytes": 231,\n    "numblocks": 13,\n    "maps": [\n      { "name": "GenParams",\n        "version": "2.0",\n        "numbytes": 92 },\n      { "name": "SupParams",\n        "version": "2.0",\n        "numbytes": 56 },\n      { "name": "FxdParams",\n        "version": "2.0",\n        "numbytes": 92 },\n      { "name": "DataPts",\n        "version": "2.0",\n        "numbytes": 127064 },\n      { "name": "KeyEvents",\n        "version": "2.0",\n        "numbytes": 342 },\n     {  "name": "Cksum",\n        "version": "2.0",\n        "numbytes": 8 },\n  { "name": "GenParams",\n    "cable_id": "FR96c from A to B",\n    "fiber_id": "FR96c",\n    "fiber_type": 652,\n    "wavelength": 1310,\n    "location_a": "Location A",\n    "location_b": "Location B",\n    "cable_code": "",\n    "build_condition": "CC",\n    "user_offset": 0,\n    "user_offset_distance": 0,\n    "operator": "BC",\n    "comments": "Example for Github",\n    "fiber_type_description": "ITU-T G.652 (standard single-mode fiber)",\n    "build_condition_description": "as-current" },\n  { "name": "SupParams",\n    "supplier_name": "Acterna",\n    "otdr_name": "MTS 6000",\n    "otdr_serial_number": "1111",\n    "module_name": "8156 SRL",\n    "module_serial_number": "652",\n    "software_version": "7.22",\n    "other": "" },\n  { "name": "FxdParams",\n    "date_time": 1644849308,\n    "units": "km",\n    "wavelength": 1310.0,\n    "acqusition_offset": 0,\n    "acqusition_offset_distance": 0,\n    "number_of_pulse_width_entries": 1,\n    "pulse_width": 30,\n    "sample_spacing": 312500,\n    "number_of_data_points": 63522,\n    "index_of_refraction": 1.4732,\n    "backscattering_coefficient": 790,\n    "number_of_averages": 12873,\n    "averaging_time": 420,\n    "range": 2000000,\n    "acquisition_range_distance": 406,\n    "front_panel_offset": 0,\n    "noise_floor_level": 55000,\n    "noise_floor_scaling_factor": 1000,\n    "power_offset_first_point": 35522,\n    "loss_threshold": 65526,\n    "reflection_threshold": 15000,\n    "end_of_transmission_threshold": 0,\n    "trace_type": "ST",\n    "x1": 0,\n    "y1": 0,\n    "x2": 0,\n    "y2": 0,\n    "trace_type_description": "standard trace" },\n  { "name": "DataPts",\n    "number_of_data_points": 63522,\n    "number_of_traces": 1,\n    "number_of_data_points2": 63522,\n    "scaling_factor": 1470,\n    "data_points": [\n      [ 0.0, -49.67865 ],\n      [ 0.93685143125, -44.19996 ],\n      ...\n      [ 23623.6456904, -55.10883 ],\n      [ 23624.58254183125, -55.26906 ]\n    ]\n  },\n  { "name": "KeyEvents",\n    "number_of_events": 7,\n    "events": [\n      { "event_number": 1,\n        "time_of_travel": 4821.900000000001,\n        "slope": 0.18,\n        "splice_loss": 0.138,\n        "reflection_loss": 0.0,\n        "event_type": "0F9999LS",\n        "end_of_previous_event": 0,\n        "beginning_of_current_event": 0,\n        "end_of_current_event": 0,\n        "beginning_of_next_event": 0,\n        "peak_point": 0,\n        "comment": "",\n        "distance_of_travel": 981.2444021383383,\n        "event_type_details": {\n          "event": "non-reflective",\n          "note": "found-by-software",\n          "landmark_number": 9999,\n          "loss_measurement_technique": "least-square"\n      },\n        ...\n      { "event_number": 7,\n        "time_of_travel": 114321.90000000001,\n        "slope": 0.0,\n        "splice_loss": 0.0,\n        "reflection_loss": -40.01,\n        "event_type": "2F99992P",\n        "end_of_previous_event": 0,\n        "beginning_of_current_event": 0,\n        "end_of_current_event": 0,\n        "beginning_of_next_event": 0,\n        "peak_point": 0,\n        "comment": "",\n        "distance_of_travel": 23264.216266786723,\n        "event_type_details": {\n          "event": "saturated-reflective",\n          "note": "found-by-software",\n          "landmark_number": 9999,\n          "loss_measurement_technique": "two-point" }\n      }\n    ],\n    "total_loss": 4.339,\n    "fiber_start_position": 0,\n    "fiber_length": 571563,\n    "optical_return_loss": 0.0,\n    "fiber_start_position2": 0,\n    "fiber_length2": 0 },\n  { "name": "Cksum",\n    "chksum": "e474"\n  }\n]\n```\n',
    'author': 'Markus Juenemann',
    'author_email': 'markus@juenemann.net',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'py_modules': modules,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
