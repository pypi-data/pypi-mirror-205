from __future__ import annotations
from datetime import datetime
from kiota_abstractions.serialization import Parsable, ParseNode, SerializationWriter
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from . import course_status, entity, learning_assignment, learning_self_initiated_course

from . import entity

class LearningCourseActivity(entity.Entity):
    def __init__(self,) -> None:
        """
        Instantiates a new learningCourseActivity and sets the default values.
        """
        super().__init__()
        # Date and time when the assignment was completed. Optional.
        self._completed_date_time: Optional[datetime] = None
        # The percentage completion value of the course activity. Optional.
        self._completion_percentage: Optional[int] = None
        # A course activity ID generated by the provider. Optional.
        self._externalcourse_activity_id: Optional[str] = None
        # The user ID of the learner to whom the activity is assigned. Required.
        self._learner_user_id: Optional[str] = None
        # The ID of the learning content created in Viva Learning. Required.
        self._learning_content_id: Optional[str] = None
        # The registration ID of the provider. Required.
        self._learning_provider_id: Optional[str] = None
        # The OdataType property
        self.odata_type: Optional[str] = None
        # The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
        self._status: Optional[course_status.CourseStatus] = None
    
    @property
    def completed_date_time(self,) -> Optional[datetime]:
        """
        Gets the completedDateTime property value. Date and time when the assignment was completed. Optional.
        Returns: Optional[datetime]
        """
        return self._completed_date_time
    
    @completed_date_time.setter
    def completed_date_time(self,value: Optional[datetime] = None) -> None:
        """
        Sets the completedDateTime property value. Date and time when the assignment was completed. Optional.
        Args:
            value: Value to set for the completed_date_time property.
        """
        self._completed_date_time = value
    
    @property
    def completion_percentage(self,) -> Optional[int]:
        """
        Gets the completionPercentage property value. The percentage completion value of the course activity. Optional.
        Returns: Optional[int]
        """
        return self._completion_percentage
    
    @completion_percentage.setter
    def completion_percentage(self,value: Optional[int] = None) -> None:
        """
        Sets the completionPercentage property value. The percentage completion value of the course activity. Optional.
        Args:
            value: Value to set for the completion_percentage property.
        """
        self._completion_percentage = value
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> LearningCourseActivity:
        """
        Creates a new instance of the appropriate class based on discriminator value
        Args:
            parseNode: The parse node to use to read the discriminator value and create the object
        Returns: LearningCourseActivity
        """
        if parse_node is None:
            raise Exception("parse_node cannot be undefined")
        mapping_value_node = parse_node.get_child_node("@odata.type")
        if mapping_value_node:
            mapping_value = mapping_value_node.get_str_value()
            if mapping_value == "#microsoft.graph.learningAssignment":
                from . import learning_assignment

                return learning_assignment.LearningAssignment()
            if mapping_value == "#microsoft.graph.learningSelfInitiatedCourse":
                from . import learning_self_initiated_course

                return learning_self_initiated_course.LearningSelfInitiatedCourse()
        return LearningCourseActivity()
    
    @property
    def externalcourse_activity_id(self,) -> Optional[str]:
        """
        Gets the externalcourseActivityId property value. A course activity ID generated by the provider. Optional.
        Returns: Optional[str]
        """
        return self._externalcourse_activity_id
    
    @externalcourse_activity_id.setter
    def externalcourse_activity_id(self,value: Optional[str] = None) -> None:
        """
        Sets the externalcourseActivityId property value. A course activity ID generated by the provider. Optional.
        Args:
            value: Value to set for the externalcourse_activity_id property.
        """
        self._externalcourse_activity_id = value
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from . import course_status, entity, learning_assignment, learning_self_initiated_course

        fields: Dict[str, Callable[[Any], None]] = {
            "completedDateTime": lambda n : setattr(self, 'completed_date_time', n.get_datetime_value()),
            "completionPercentage": lambda n : setattr(self, 'completion_percentage', n.get_int_value()),
            "externalcourseActivityId": lambda n : setattr(self, 'externalcourse_activity_id', n.get_str_value()),
            "learnerUserId": lambda n : setattr(self, 'learner_user_id', n.get_str_value()),
            "learningContentId": lambda n : setattr(self, 'learning_content_id', n.get_str_value()),
            "learningProviderId": lambda n : setattr(self, 'learning_provider_id', n.get_str_value()),
            "status": lambda n : setattr(self, 'status', n.get_enum_value(course_status.CourseStatus)),
        }
        super_fields = super().get_field_deserializers()
        fields.update(super_fields)
        return fields
    
    @property
    def learner_user_id(self,) -> Optional[str]:
        """
        Gets the learnerUserId property value. The user ID of the learner to whom the activity is assigned. Required.
        Returns: Optional[str]
        """
        return self._learner_user_id
    
    @learner_user_id.setter
    def learner_user_id(self,value: Optional[str] = None) -> None:
        """
        Sets the learnerUserId property value. The user ID of the learner to whom the activity is assigned. Required.
        Args:
            value: Value to set for the learner_user_id property.
        """
        self._learner_user_id = value
    
    @property
    def learning_content_id(self,) -> Optional[str]:
        """
        Gets the learningContentId property value. The ID of the learning content created in Viva Learning. Required.
        Returns: Optional[str]
        """
        return self._learning_content_id
    
    @learning_content_id.setter
    def learning_content_id(self,value: Optional[str] = None) -> None:
        """
        Sets the learningContentId property value. The ID of the learning content created in Viva Learning. Required.
        Args:
            value: Value to set for the learning_content_id property.
        """
        self._learning_content_id = value
    
    @property
    def learning_provider_id(self,) -> Optional[str]:
        """
        Gets the learningProviderId property value. The registration ID of the provider. Required.
        Returns: Optional[str]
        """
        return self._learning_provider_id
    
    @learning_provider_id.setter
    def learning_provider_id(self,value: Optional[str] = None) -> None:
        """
        Sets the learningProviderId property value. The registration ID of the provider. Required.
        Args:
            value: Value to set for the learning_provider_id property.
        """
        self._learning_provider_id = value
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        Args:
            writer: Serialization writer to use to serialize this model
        """
        if writer is None:
            raise Exception("writer cannot be undefined")
        super().serialize(writer)
        writer.write_datetime_value("completedDateTime", self.completed_date_time)
        writer.write_int_value("completionPercentage", self.completion_percentage)
        writer.write_str_value("externalcourseActivityId", self.externalcourse_activity_id)
        writer.write_str_value("learnerUserId", self.learner_user_id)
        writer.write_str_value("learningContentId", self.learning_content_id)
        writer.write_str_value("learningProviderId", self.learning_provider_id)
        writer.write_enum_value("status", self.status)
    
    @property
    def status(self,) -> Optional[course_status.CourseStatus]:
        """
        Gets the status property value. The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
        Returns: Optional[course_status.CourseStatus]
        """
        return self._status
    
    @status.setter
    def status(self,value: Optional[course_status.CourseStatus] = None) -> None:
        """
        Sets the status property value. The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
        Args:
            value: Value to set for the status property.
        """
        self._status = value
    

