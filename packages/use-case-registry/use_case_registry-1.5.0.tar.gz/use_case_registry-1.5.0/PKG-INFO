Metadata-Version: 2.1
Name: use_case_registry
Version: 1.5.0
Summary: Registry class for Use Case implementation. They are basically meaningfull lists with some constraints.
Project-URL: Homepage, https://github.com/Tomperez98/use-case-registry
Project-URL: Documentation, https://tomperez98.github.io/use-case-registry/
Project-URL: Issues, https://github.com/Tomperez98/use-case-registry/issues
Project-URL: Source, https://github.com/Tomperez98/use-case-registry
Author-email: Tomas Perez Alvarez <tomasperezalvarez@gmail.com>
License-Expression: MIT
License-File: LICENSE.txt
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.9
Requires-Dist: jinja2
Requires-Dist: mashumaro[orjson,yaml]
Requires-Dist: pydantic
Requires-Dist: result
Provides-Extra: dev
Requires-Dist: black; extra == 'dev'
Requires-Dist: hatch; extra == 'dev'
Requires-Dist: mkdocs-material; extra == 'dev'
Requires-Dist: mypy; extra == 'dev'
Requires-Dist: pip-tools; extra == 'dev'
Requires-Dist: pytest; extra == 'dev'
Requires-Dist: pytest-cov; extra == 'dev'
Requires-Dist: pytest-env; extra == 'dev'
Requires-Dist: ruff; extra == 'dev'
Requires-Dist: toml; extra == 'dev'
Requires-Dist: types-jsonschema; extra == 'dev'
Requires-Dist: types-pyyaml; extra == 'dev'
Provides-Extra: sqlalchemy
Requires-Dist: sqlalchemy; extra == 'sqlalchemy'
Description-Content-Type: text/markdown

# use-case-registry

[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json)](https://github.com/charliermarsh/ruff)
[![Build Status](https://github.com/Tomperez98/use-case-registry/workflows/test/badge.svg?branch=main&event=push)](https://github.com/Tomperez98/use-case-registry/actions?query=workflow%3Atest)
[![Coverage badge](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/Tomperez98/use-case-registry/python-coverage-comment-action-data/endpoint.json)](https://htmlpreview.github.io/?https://github.com/Tomperez98/use-case-registry/blob/python-coverage-comment-action-data/htmlcov/index.html)

-----

[PyPi](https://pypi.org/project/use-case-registry/)


```bash
pip install use-case-registry
```

----

Basically a typed annotated list (enforced), with fixed lenght, that can only be checked once. It's thought as a component to implement use cases for more complex applications.

These applications would implement one workflow per use case. The `UseCaseRegistry` convers a wide range of requirements for these workflows.