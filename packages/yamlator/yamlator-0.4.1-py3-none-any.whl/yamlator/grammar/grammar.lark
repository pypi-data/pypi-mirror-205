// Entry point
start: instructions*

// Collection constructs
?instructions: enum
            | ruleset
            | schema_entry
            | import_statement

?values: INT -> integer
       | FLOAT -> float
       | string



import_statement: "import" imported_types "from" IMPORT_STATEMENT_PATH ("as" NAMESPACE)?
imported_types: (CONTAINER_TYPE_NAME ("," CONTAINER_TYPE_NAME)*)

schema_entry: STRICT_KEYWORD? "schema" "{" rule+ "}"
ruleset: STRICT_KEYWORD? "ruleset" CONTAINER_TYPE_NAME (ruleset_parent)? "{" rule+ "}"
ruleset_parent: "(" container_type ")"

// Enum constructs
enum: "enum" CONTAINER_TYPE_NAME "{" enum_item+ "}"
enum_item: ENUM_ITEM_NAME "=" values

// Rule definitions
?rule: required_rule
     | optional_rule

required_rule: rule_name type "required" NEW_LINES
             | rule_name type NEW_LINES
optional_rule: rule_name type "optional" NEW_LINES

rule_name: /[\S]+/
         | /\"[\S ]+\"/

// Data types for rules
type: int_type
     | float_type
     | str_type
     | list_type
     | map_type
     | any_type
     | container_type
     | regex_type
     | bool_type
     | union_type

str_type: "str"
int_type: "int"
any_type: "any"
float_type: "float"
bool_type: "bool"
list_type: "list""(" type ")"
map_type: "map""(" type ")"
container_type: (NAMESPACE".")? CONTAINER_TYPE_NAME
regex_type: "regex""(" string ")"
union_type: "union""(" [type ("," type)+] ")"

string: ESCAPED_STRING

// Terminals
NEW_LINES: "\n"+
NAMESPACE: /[a-z]+/
CONTAINER_TYPE_NAME: /[A-Z]{1}[a-zA-Z0-9_]+/
IMPORT_STATEMENT_PATH: /\"(?:[\S]+\/)*[\S]+.ys\"/
ENUM_ITEM_NAME: /[A-Z0-9_]+/

STRICT_KEYWORD: "strict"

%import common.SH_COMMENT
%import common.ESCAPED_STRING
%import common.INT
%import common.FLOAT
%import common.WS

%ignore WS
%ignore NEW_LINES
%ignore SH_COMMENT